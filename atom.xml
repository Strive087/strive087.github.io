<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端之路</title>
  
  
  <link href="https://strive087.github.io/atom.xml" rel="self"/>
  
  <link href="https://strive087.github.io/"/>
  <updated>2020-11-06T12:51:32.261Z</updated>
  <id>https://strive087.github.io/</id>
  
  <author>
    <name>zhuduanlei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://strive087.github.io/2020/11/06/javascript/CORS%E8%B7%A8%E5%9F%9F/"/>
    <id>https://strive087.github.io/2020/11/06/javascript/CORS%E8%B7%A8%E5%9F%9F/</id>
    <published>2020-11-06T12:51:32.261Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://strive087.github.io/2020/11/06/javascript/Web%20Worker/"/>
    <id>https://strive087.github.io/2020/11/06/javascript/Web%20Worker/</id>
    <published>2020-11-06T12:51:32.261Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://strive087.github.io/2020/11/06/node/koa2/%E8%B7%AF%E7%94%B1/"/>
    <id>https://strive087.github.io/2020/11/06/node/koa2/%E8%B7%AF%E7%94%B1/</id>
    <published>2020-11-06T12:51:32.261Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p>/about -&gt;<br>后端 /about -&gt;<br>404 -&gt;<br>Fallback -&gt;<br>后端 / -&gt;<br>vue 页面 -&gt;<br>页面上 url是 /about -&gt;<br>vue-router -&gt;<br>/about</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;/about -&amp;gt;&lt;br&gt;后端 /about -&amp;gt;&lt;br&gt;404 -&amp;gt;&lt;br&gt;Fallback -&amp;gt;&lt;br&gt;后端 / -&amp;gt;&lt;br&gt;vue 页面 -&amp;gt;&lt;br&gt;页面上 url是 /about -&amp;gt;&lt;br&gt;vue-router -&amp;gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://strive087.github.io/2020/11/06/javascript/ES6/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>https://strive087.github.io/2020/11/06/javascript/ES6/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</id>
    <published>2020-11-06T12:51:32.261Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>网页图标解决方案--精灵图(雪碧图)</title>
    <link href="https://strive087.github.io/2020/11/04/css/sprites/"/>
    <id>https://strive087.github.io/2020/11/04/css/sprites/</id>
    <published>2020-11-04T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>传统的CSS Sprite</p><p class='p subtitle'>font-face字体图标</p><p class='p subtitle'>SVG Sprite</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;传统的CSS Sprite&lt;/p&gt;

&lt;p class=&#39;p subtitle&#39;&gt;font-face字体图标&lt;/p&gt;

&lt;p class=&#39;p subtitle&#39;&gt;SVG Sprite&lt;/p&gt;
</summary>
      
    
    
    
    <category term="css" scheme="https://strive087.github.io/categories/css/"/>
    
    
    <category term="css" scheme="https://strive087.github.io/tags/css/"/>
    
    <category term="icon" scheme="https://strive087.github.io/tags/icon/"/>
    
  </entry>
  
  <entry>
    <title>双精度浮点数</title>
    <link href="https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    <id>https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/</id>
    <published>2020-11-01T12:15:13.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>js中的数字</p><p>JavaScript中所有的数字，无论是整数还是小数，其类型均为Number。在程序内部，Number类型的实质是一个64位的浮点数，这与Java中double类型的浮点数是一致的；因此，JavaScript中所有的数都是浮点数。遵循IEEE 754标准（浮点数算术标准），JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的MAX_VALUE属性和MIN_VALUE属性来获取。</p><p class='p subtitle'>EEE 754标准</p><p>IEEE 754浮点数的三个域如下图所示:</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/qV74Bn.png' style='width:500px'><ul><li>sign(1bit):符号位</li><li>exponent(11bit):阶数 (阶数 = 指数+偏置量(对于双精度来说，其规定的偏置量为1023))</li><li>fraction(52bit):有效数字<br>例如:二进制数0.0101,此时可以表示为1.01*2^-2:</li><li>sign: 0</li><li>exponent: 1111111101  (1021)</li><li>fraction: 010000…00 (1.01 存储有效数字时，将不会存储小数点前面的1)</li></ul><p>十进制数为0.3125,转化为十进制的公式：</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/8cc994c808feffcdacec43ad2f6bee8b.svg' style='width:500px'>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;js中的数字&lt;/p&gt;
&lt;p&gt;JavaScript中所有的数字，无论是整数还是小数，其类型均为Number。在程序内部，Number类型的实质是一个64位的浮点数，这与Java中double类型的浮点数是一致的；因此，JavaScript</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="运算" scheme="https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"/>
    
    
    <category term="浮点数" scheme="https://strive087.github.io/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>进制转换</title>
    <link href="https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E8%BF%9B%E5%88%B6/"/>
    <id>https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E8%BF%9B%E5%88%B6/</id>
    <published>2020-11-01T11:35:13.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>二/八/十六进制数表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">0b101</span>;  <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">var</span> num8 = <span class="number">0765</span>;  <span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">var</span> num16 = <span class="number">0xFA37</span>;  <span class="comment">//十六进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num2)</span><br><span class="line"><span class="built_in">console</span>.log(num8)</span><br><span class="line"><span class="built_in">console</span>.log(num16)</span><br></pre></td></tr></table></figure><p class='p subtitle'>二/八/十六进制转十进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;101&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num8 = <span class="string">&#x27;765&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num16 = <span class="string">&#x27;FA37&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0b101 = (2^2)*1 + (2^1)*0 + (2^0)*1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;二进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num2,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//0765 = (8^2)*7 + (8^1)*6 + (8^0)*5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;八进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num8,<span class="number">8</span>));</span><br><span class="line"><span class="comment">//0xFA37 = (16^3)*15 + (16^2)*10 + (16^1)*3 + (16^0)*7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十六进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num16,<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p class='p subtitle'>十进制转二/八/十六进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num10 = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转二进制:&#x27;</span>,num10.toString(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转八进制:&#x27;</span>,num10.toString(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转十六进制:&#x27;</span>,num10.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;二/八/十六进制数表示&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="运算" scheme="https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"/>
    
    
    <category term="位运算" scheme="https://strive087.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>位运算的应用</title>
    <link href="https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/</id>
    <published>2020-11-01T11:05:13.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>js中的位操作符</p><p>1.~  (按位非)<br>2.&amp;  (按位与)<br>3.|  (按位或)<br>4.^  (按位异或)<br>5.&lt;&lt;  (左移)<br>6.&gt;&gt;  (有符号右移)<br>7.&gt;&gt;&gt;  (无符号右移)</p><p class='p subtitle'>~ (按位非)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1反码二进制表示: 11111111 11111111 11111111 11111110</span></span><br><span class="line"><span class="comment">// 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1的反码减1：     11111111 11111111 11111111 11111101</span></span><br><span class="line"><span class="comment">// 反码取反：       00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 表示为10进制加负号：-2</span></span><br><span class="line"><span class="built_in">console</span>.log(~ <span class="number">1</span>)     <span class="comment">// -2</span></span><br><span class="line"><span class="comment">//可以简单可以理解为-(num-1)</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>& (按位与)</p><p>&amp;以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; <span class="number">3</span>)     <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>| (按位或)</p><p>| 运算符跟 &amp; 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> | <span class="number">3</span>)     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>^ (按位异或)</p><p>^ 如果对应两个操作位有且仅有一个1时结果为1，其他都是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> ^ <span class="number">3</span>)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p class='p subtitle'><< (左移)</p><p>&lt;&lt;运算符使指定值的二进制数所有位都左移指定次数，其移动规则：丢弃高位，低位补0即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &lt;&lt; <span class="number">1</span>)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>>> (有符号右移)</p><p>&gt;&gt;该操作符会将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 0的二进制表示为: 00000000 00000000 00000000 00000000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt;&gt; <span class="number">1</span>)     <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>>>> (无符号右移)</p><p>&gt;&gt;&gt;该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）<br>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， 9 &gt;&gt;&gt; 2 得到 2 和 9 &gt;&gt; 2 相同。</p><p class='p subtitle'>位操作符的常见应用</p><p>1.使用&amp;运算符判断一个数的奇偶<br>2.使用~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |来取整<br>3.使用^来完成值交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"><span class="built_in">console</span>.log(a)   <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(b)   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>4.使用&amp;, &gt;&gt;, |来完成rgb值和16进制颜色值之间的转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 16进制颜色值转RGB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>hex 16进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>RGB颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hexToRGB</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hexx = hex.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> r = hexx &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">var</span> g = hexx &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">var</span> b = hexx &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB颜色转16进制颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>rgb RGB进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>16进制颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBToHex</span>(<span class="params">rgb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgbArr = rgb.split(<span class="regexp">/[^\d]+/</span>)</span><br><span class="line">    <span class="keyword">var</span> color = rgbArr[<span class="number">1</span>]&lt;&lt;<span class="number">16</span> | rgbArr[<span class="number">2</span>]&lt;&lt;<span class="number">8</span> | rgbArr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+ color.toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line">hexToRGB(<span class="string">&#x27;#ffffff&#x27;</span>)               <span class="comment">// &#x27;rgb(255,255,255)&#x27;</span></span><br><span class="line">RGBToHex(<span class="string">&#x27;rgb(255,255,255)&#x27;</span>)      <span class="comment">// &#x27;#ffffff&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;js中的位操作符&lt;/p&gt;

&lt;p&gt;1.~  (按位非)&lt;br&gt;2.&amp;amp;  (按位与)&lt;br&gt;3.|  (按位或)&lt;br&gt;4.^  (按位异或)&lt;br&gt;5.&amp;lt;&amp;lt;  (左移)&lt;br&gt;6.&amp;gt;&amp;gt;  (有符号右移)&lt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="运算" scheme="https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"/>
    
    
    <category term="位运算" scheme="https://strive087.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>什么是React SSR</title>
    <link href="https://strive087.github.io/2020/10/28/framework/react_ssr/"/>
    <id>https://strive087.github.io/2020/10/28/framework/react_ssr/</id>
    <published>2020-10-28T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>什么是React SSR</p><p>React SSR也就是指融合了单页面应用的优点以及服务端渲染的优点进行互补,做到切页SPA刷新SSR<br>优点:</p><p>1.SEO友好</p><p>2.首页加载速度快</p><p>3.页面切页快</p><p>缺点:</p><p>1.配置复杂</p><p>2.服务器压力相对较大,但比传统的服务器端压力小</p><p>3.部分开发受限,比如ComponentDidMount</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;什么是React SSR&lt;/p&gt;
&lt;p&gt;React SSR也就是指融合了单页面应用的优点以及服务端渲染的优点进行互补,做到切页SPA刷新SSR&lt;br&gt;优点:&lt;/p&gt;
&lt;p&gt;1.SEO友好&lt;/p&gt;
&lt;p&gt;2.首页加载速度快&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="framework" scheme="https://strive087.github.io/categories/framework/"/>
    
    
    <category term="framework" scheme="https://strive087.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>关于SPA/MPA和SSR/CSR</title>
    <link href="https://strive087.github.io/2020/10/27/framework/spa_mpa_ssr/"/>
    <id>https://strive087.github.io/2020/10/27/framework/spa_mpa_ssr/</id>
    <published>2020-10-27T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>什么是SPA</p><p>SPA也就是单页面应用,通过ajax和前端渲染更新页面部分内容而不是进行整体页面加载</p><p class='p subtitle'>什么是MPA</p><p>MPA也就是多页面应用,不同的内容来自不同的页面,需要整也加载(不同网址)</p><p class='p subtitle'>什么是SSR</p><p>SSR也就是服务器端渲染,将完整的html内容发送到前端,网页需要重新加载,相对于SPA单页应用他有如下几个优势:</p><p>1.首屏加载时间快(ssr可从服务端直出页面)</p><p>2.SEO友好(由于搜索引擎需要爬虫抓去html中的关键字,而spa依靠虚拟dom挂载所以爬虫无法获取,除了google等一些搜索引擎能够去抓取js中的关键字)</p><p>当然ssr也有很明显的劣势:</p><p>1.页面体验不够友好(相对无spa快速切页,由于ssr每次切页都要从服务端渲染页面,所以会造成卡顿延迟)</p><p>2.可见不一定可操作(因为js可能还在执行)</p><p>3.服务器压力大</p><p class='p subtitle'>什么是CSR</p><p>CSR指的是前端渲染,常是前端请求后端获取数据后通过js更新页面内容</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;什么是SPA&lt;/p&gt;
&lt;p&gt;SPA也就是单页面应用,通过ajax和前端渲染更新页面部分内容而不是进行整体页面加载&lt;/p&gt;
&lt;p class=&#39;p subtitle&#39;&gt;什么是MPA&lt;/p&gt;
&lt;p&gt;MPA也就是多页面应用,不同的内容来自不同</summary>
      
    
    
    
    <category term="framework" scheme="https://strive087.github.io/categories/framework/"/>
    
    
    <category term="framework" scheme="https://strive087.github.io/tags/framework/"/>
    
  </entry>
  
  <entry>
    <title>webpack4.x/5.x源码分析1</title>
    <link href="https://strive087.github.io/2020/10/25/webpack/wepack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/"/>
    <id>https://strive087.github.io/2020/10/25/webpack/wepack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/</id>
    <published>2020-10-25T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>单文件输出分析</p><p>1.webpack4.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      <span class="built_in">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__((__webpack_require__.s = <span class="string">&#x27;./src/index.js&#x27;</span>));</span><br><span class="line">&#125;)(&#123;<span class="comment">//立即执行函数传入一个对象,以文件路径为属性名,函数体为值</span></span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;zhuduanlei&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从上面代码可以得知首先调用立即执行函数,然后函数体内会创建一个缓存对象,然后对判断缓存对象中是否存在传入的module,存在就返回,不存在就创建一个module,模拟commonJS的export,然后存入缓存中,最后通过call执行mudule中的函数,返回mudule.export;</p><p>2.webpack5.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">&#x27;console.log(zhuduanlei)&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>由于现代浏览器的普及,在webpack5中便直接将源代码进行输出执行</p><p class='p subtitle'>多文件输出分析</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;单文件输出分析&lt;/p&gt;
&lt;p&gt;1.webpack4.x&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    <category term="webpack" scheme="https://strive087.github.io/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://strive087.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>vue面试题</title>
    <link href="https://strive087.github.io/2020/10/18/vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://strive087.github.io/2020/10/18/vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-10-18T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>runtime和完整版这两个版本的区别</p><p>答:最明显的就是大小的区别,还有就是编译的时机不同，完整版同时包含编译器和运行时的版本,编译器是运行时编译，性能会有一定的损耗；运行时版本是借助loader做的离线编译，运行性能更高。</p><ul><li>编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码</li><li>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切</li></ul><p class='p subtitle'>methods内的方法可以使用箭头函数么，会造成什么样的结果</p><p>答:是不可以使用箭头函数的，因为箭头函数的this是定义时就绑定的。在vue的内部，methods内每个方法的上下文是当前的vm组件实例，methods[key].bind(vm)，而如果使用使用箭头函数，函数的上下文就变成了父级的上下文，也就是undefined了，结果就是通过undefined访问任何变量都会报错。</p><p class='p subtitle'>请问可以在beforeCreate钩子内通过this访问到data中定义的变量么，为什么以及请问这个钩子可以做什么？</p><p>答:是不可以直接访问的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$options.data()方法获得。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;runtime和完整版这两个版本的区别&lt;/p&gt;
&lt;p&gt;答:最明显的就是大小的区别,还有就是编译的时机不同，完整版同时包含编译器和运行时的版本,编译器是运行时编译，性能会有一定的损耗；运行时版本是借助loader做的离线编译，运行性能更高</summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码分析-created之前</title>
    <link href="https://strive087.github.io/2020/10/16/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
    <id>https://strive087.github.io/2020/10/16/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/</id>
    <published>2020-10-16T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>initInjections(vm)方法</p><p>主要作用是初始化inject，可以访问到对应的依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm) <span class="comment">// 找结果</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(inject)  <span class="comment">//省略Symbol情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; hasOwn(source._provided, provideKey)) &#123; <span class="comment">//hasOwn为是否有</span></span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">    ... vue@<span class="number">2.5</span>后新增设置inject默认参数相关逻辑</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>source就是当前的实例，而source._provided内保存的就是当前provide提供的值。首先从当前实例查找，接着将它的父组件实例赋值给source，在它的父组件查找。找到后使用break跳出循环，将搜索的结果赋值给result，接着查找下一个。由于vue是组件式的,所以会先初始化父组件再初始化子组件,所以是先初始化inject再初始化provide</p><p class='p subtitle'>initState(vm)方法</p><p>初始化会被使用到的状态，状态包括props，methods，data，computed，watch五个选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span>(opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span>(opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span>(opts.data) initData(vm)</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span>(opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="keyword">if</span>(opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>initProps (vm, propsOptions)<br>主要作用是检测子组件接受的值是否符合规则，以及让对应的值可以用this直接访问。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span>(<span class="params">vm, propsOptions</span>) </span>&#123;  <span class="comment">// 第二个参数为验证规则</span></span><br><span class="line">  <span class="keyword">const</span> propsData = vm.$options.propsData || &#123;&#125;  <span class="comment">// props具体的值</span></span><br><span class="line">  <span class="keyword">const</span> props = vm._props = &#123;&#125;  <span class="comment">// 存放props</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !vm.$parent <span class="comment">// 是否是根节点</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsOptions) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    defineReactive(props, key, value)</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_props`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  toggleObserving(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>props是作为父组件向子组件通信的重要方式，而initProps内的第二个参数propsOptions，就是当前实例也就是通信角色里的子组件，它所定义的接受参数的规则。子组件的props规则是可以使用数组形式的定义的，不过再经过合并options之后会被格式化为对象的形式。所以在定义props规则时，直接使用对象格式吧，这也是更好的书写规范。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">target, sourceKey, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>[sourceKey][key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>[sourceKey][key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里vue内部做了一层代理，将对this.name的访问转而为对this._props.name的访问。</p><p>2.initMethods (vm, methods)<br>主要作用是将methods内的方法挂载到this下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMethods</span>(<span class="params">vm, methods</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(methods[key] == <span class="literal">null</span>) &#123;  <span class="comment">// methods[key] === null || methods[key] === undefined 的简写</span></span><br><span class="line">      warn(<span class="string">`只定义了key而没有相应的value`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      warn(<span class="string">`方法名和props的key重名了`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((key <span class="keyword">in</span> vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class="line">      warn(<span class="string">`方法名已经存在而且以_或$开头`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vm[key] = methods[key] == <span class="literal">null</span></span><br><span class="line">      ? noop  <span class="comment">// 空函数</span></span><br><span class="line">      : bind(methods[key], vm)  <span class="comment">//  相当于methods[key].bind(vm)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.initData(vm)<br>主要作用是初始化data，挂载到this下。有个重要的点，之所以data内的数据是响应式的，是在这里初始化的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    ? getData(data, vm) <span class="comment">// 通过data.call(vm, vm)得到返回的对象</span></span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123; <span class="comment">// 如果不是一个对象格式</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    warn(<span class="string">`data得是一个对象`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props  <span class="comment">// 得到props</span></span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods  <span class="comment">// 得到methods</span></span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">      warn(<span class="string">`和methods内的方法重名了`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      warn(<span class="string">`和props内的key重名了`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123; <span class="comment">// key不能以_或$开头</span></span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observe(data, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>initProvide(vm)方法</p><p>主要作用是初始化provide为子组件提供依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>provide选项应该是一个对象或是函数，所以对它取值即可，就像取data内的值类似</p><p class='p subtitle'>callHook-created</p><p>执行用户定义的created钩子函数，有mixin混入的也一并执行。</p><p>分别用一句话来介绍它们主要都干了什么事：</p><ul><li>initInjections(vm)：让子组件inject的项可以访问到正确的值</li><li>initState(vm)：将组件定义的状态挂载到this下。</li><li>initProvide(vm)：初始化父组件提供的provide依赖。</li><li>created：执行组件的created钩子函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;initInjections(vm)方法&lt;/p&gt;
&lt;p&gt;主要作用是初始化inject，可以访问到对应的依赖。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>深入理解vue组件缓存</title>
    <link href="https://strive087.github.io/2020/10/15/vue/%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98/"/>
    <id>https://strive087.github.io/2020/10/15/vue/%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98/</id>
    <published>2020-10-15T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件基础知识</title>
    <link href="https://strive087.github.io/2020/10/14/vue/%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
    <id>https://strive087.github.io/2020/10/14/vue/%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86/</id>
    <published>2020-10-14T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>全局组件和局部组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;test&#x27;</span>, &#123;...&#125;);  </span><br><span class="line"><span class="comment">//局部组件</span></span><br><span class="line"><span class="keyword">const</span> test = &#123;...&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  components:&#123;</span><br><span class="line">    test</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件相对对于局部组件而言,全局组件及时没有使用也会被webpack等打包工具打包起来,无法进行tree shaking</p><p class='p subtitle'>组件间通信</p><p>1.父组件向子组件通信</p><ul><li>v-bind: props 值传递</li><li>$parent 非值传递</li></ul><p>2.子组件向父组件通信</p><ul><li>$emit v-on: 事件传值</li><li>$children 非值传递</li></ul><p>3.兄弟组件通信</p><ul><li>bus中央事件总线 将bus挂载至vue根实例的原型上 注册的bus要及时销毁</li><li>Vuex 状态管理 适合中大型项目</li><li>通过父组件监听后传值给子组件</li></ul><p>4.多层嵌套传值</p><ul><li>provide/inject 依赖注入传值 适合高阶组件/组件库使用,不建议直接在应用代码中使用</li><li>v-bind: $attrs 使用inheritAttrs是否隐藏v-bind:</li></ul><p class='p subtitle'>插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">&quot;slotVal&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span> footer <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//子组件匿名</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">:slotVal</span>=<span class="string">&quot;slotVal&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.匿名插槽和具名插槽</p><ul><li>匿名插槽可以转换为具名插槽:v-slot:default</li><li>v-slot必须使用在template标签上</li></ul><p>2.作用域插槽<br>可以让插槽获取子组件的数据</p><p class='p subtitle'>动态组件以及组件缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">components</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用componentName来切换组件,使用&lt;keep-alive&gt;标签可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存。<br>和 &lt;transition&gt; 相似，&lt;keep-alive&gt; 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;全局组件和局部组件&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码分析-beforeCreate之前</title>
    <link href="https://strive087.github.io/2020/10/13/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
    <id>https://strive087.github.io/2020/10/13/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</id>
    <published>2020-10-13T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>_init()方法</p><p>该_init 方法在 initMixin 中定义,_init 方法执行了一系列初始化操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">this</span></span><br><span class="line">vm._uid = uid++ <span class="comment">// 唯一标识</span></span><br><span class="line"></span><br><span class="line">vm.$options = mergeOptions(  <span class="comment">// 合并options</span></span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">    options || &#123;&#125;,</span><br><span class="line">    vm</span><br><span class="line">  )</span><br><span class="line">  ...</span><br><span class="line">  initLifecycle(vm) <span class="comment">// 开始一系列的初始化</span></span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  initInjections(vm)</span><br><span class="line">  initState(vm)</span><br><span class="line">  initProvide(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先需要交代下，每一个组件都是一个Vue构造函数的子类，这个之后会说明为何如此。从上往下我们一步步看，首先会定义_uid属性，这是为每个组件每一次初始化时做的一个唯一的私有属性标识，有时候会有些作用。</p><p class='p subtitle'>合并options</p><p>回到主线任务，接着会合并options并在实例上挂载一个$options属性。这里是分两种情况的：</p><p>1.初始化new Vue</p><p>在执行new Vue构造函数时，参数就是一个对象，也就是用户的自定义配置；会将它和vue之前定义的原型方法，全局API属性；还有全局的Vue.mixin内的参数，将这些都合并成为一个新的options，最后赋值给一个的新的属性$options。</p><p>2.子组件初始化</p><p>如果是子组件初始化，除了合并以上那些外，还会将父组件的参数进行合并，如有父组件定义在子组件上的event、props等等。<br>经过合并之后就可以通过this.$options.data访问到用户定义的data函数，this.$options.name访问到用户定义的组件名称，这个合并后的属性很重要，会被经常使用到。</p><p class='p subtitle'>initLifecycle</p><p>initLifecycle(vm): 主要作用是确认组件的父子关系和初始化某些实例属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initLifecycle</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = vm.$options  <span class="comment">// 之前合并的属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> parent = options.parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !options.abstract) &#123; <span class="comment">//  找到第一个非抽象父组件</span></span><br><span class="line">    <span class="keyword">while</span> (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    parent.$children.push(vm)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  vm.$parent = parent  <span class="comment">// 找到后赋值</span></span><br><span class="line">  vm.$root = parent ? parent.$root : vm  <span class="comment">// 让每一个子组件的$root属性都是根组件</span></span><br><span class="line">  </span><br><span class="line">  vm.$children = []</span><br><span class="line">  vm.$refs = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  vm._watcher = <span class="literal">null</span></span><br><span class="line">  ...</span><br><span class="line">  vm._isDestroyed = <span class="literal">false</span></span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>initEvents</p><p>initEvents(vm): 主要作用是将父组件在使用v-on或@注册的自定义事件添加到子组件的事件中心中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initEvents</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>)  <span class="comment">// 事件中心</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> listeners = vm.$options._parentListeners  <span class="comment">// 经过合并options得到的</span></span><br><span class="line">  <span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经历过合并options阶段后，子组件就可以从vm.$options._parentListeners读取到父组件传过来的自定义事件：<br>&lt;child-components @select=’handleSelect’ /&gt;<br>复制代码传过来的事件数据格式是{select:function(){}}这样的，在initEvents方法内定义vm._events用来存储传过来的事件集合。<br>内部执行的方法updateComponentListeners(vm, listeners)主要是执行updateListeners方法。这个方法有两个执行时机，首先是现在的初始化阶段，还一个就是最后patch时的原生事件也会用到。它的作用是比较新旧事件的列表来确定事件的添加和移除以及事件修饰符的处理，现在主要看自定义事件的添加，它的作用是借助之前定义的$on，$emit方法，完成父子组件事件的通信，(详细的原理说明会在之后的全局API章节统一说明)。首先使用$on往vm.events事件中心下创建一个自定义事件名的数组集合项，数组内的每一项都是对应事件名的回调函数，例如：<br>vm._events.select = [function handleSelect(){}, …]  // 可以有多个<br>复制代码注册完成之后，使用$emit方法执行事件：<br>this.$emit(‘select’)<br>复制代码首先会读取到事件中心内$emit方法第一个参数select的对象的数组集合，然后将数组内每个回调函数顺序执行一遍即完成了$emit做的事情。</p><p class='p subtitle'>initRender</p><p>initRender(vm): 主要作用是挂载可以将render函数转为vnode的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span></span><br><span class="line">  ...</span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)  <span class="comment">//转化编译器的</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)  <span class="comment">// 转化手写的</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要作用是挂载vm._c和vm.$createElement两个方法，它们只是最后一个参数不同，这两个方法都可以将render函数转为vnode，从命名大家应该可以看出区别，vm._c转换的是通过编译器将template转换而来的render函数；而vm.$createElement转换的是用户自定义的render函数,例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello Vue!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render(h) &#123; <span class="comment">// 这里的 h 就是vm.$createElement</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">this</span>.msg);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>callHook-beforeCreate</p><p>在beforeCreate钩子内通过this是不可以访问到data中定义的变量的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$option.data()进行访问。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。</p><p>实例的第一个生命周期钩子阶段的初始化工作完成了，一句话来主要说明下他们做了什么事情：</p><ul><li>initLifecycle(vm)：确认组件(也是vue实例)的父子关系</li><li>initEvents(vm)：将父组件的自定义事件传递给子组件</li><li>initRender(vm)：提供将render函数转为vnode的方法</li><li>beforeCreate：执行组件的beforeCreate钩子函数</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;_init()方法&lt;/p&gt;
&lt;p&gt;该_init 方法在 initMixin 中定义,_init 方法执行了一系列初始化操作&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td </summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue源码分析-Vue实例创建</title>
    <link href="https://strive087.github.io/2020/10/12/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/"/>
    <id>https://strive087.github.io/2020/10/12/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/</id>
    <published>2020-10-12T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>vue实例的生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./init&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./state&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./render&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./events&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./lifecycle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure><p>Vue 不采用 ES6 的 class 来定义，因为这样可以方便的把 vue 的功能拆分到不同的目录中去维护，将 vue 的构造函数传入到以下方法内：</p><ul><li>initMixin(Vue)：定义_init 方法。</li><li>stateMixin(Vue)：定义数据相关的方法$set,$delete,$watch 方法。</li><li>eventsMixin(Vue)：定义事件相关的方法$on，$once，$off，$emit。</li><li>lifecycleMixin(Vue)：定义_update，及生命周期相关的$forceUpdate 和$destroy。</li><li>renderMixin(Vue)：定义$nextTick，_render 将 render 函数转为 vnode。</li></ul><p>这些方法都是在各自的文件内维护的，从而让代码结构更加清晰易懂可维护。</p><p>在再这些 xxxMixin 完成后，接着会定义一些全局的 API:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">Vue.set 方法</span><br><span class="line">Vue.delete 方法</span><br><span class="line">Vue.nextTick 方法</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">内置组件：</span><br><span class="line">keep-alive</span><br><span class="line">transition</span><br><span class="line">transition-group</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">initUse(Vue)：Vue.use 方法</span><br><span class="line">initMixin(Vue)：Vue.mixin 方法</span><br><span class="line">initExtend(Vue)：Vue.extend 方法</span><br><span class="line">initAssetRegisters(Vue)：Vue.component，Vue.directive，Vue.filter 方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要提一下 vue 的架构设计，它的架构是分层式的。最底层是一个 ES5 的构造函数，再上层在原型上会定义一些_init、$watch、_render 等这样的方法，再上层会在构造函数自身定义全局的一些 API，如 set、nextTick、use 等(以上这些是不区分平台的核心代码)，接着是跨平台和服务端渲染(这些暂时不在讨论范围)及编译器。</p><p class='p subtitle'>vue变量命名</p><p>在 vue 的内部，_符号开头定义的变量是供内部私有使用的，而$符号定义的变量是供用户使用的，而且用户自定义的变量不能以_或$开头，以防止内部冲突。</p><p class='p subtitle'>vue2.x 源码目录结构</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/%E6%88%AA%E5%B1%8F2020-10-18%20%E4%B8%8B%E5%8D%883.03.59.png' style='width:300px'><ul><li>flow：javaScript 是弱类型语言，使用 flow 以定义类型和检测类型，增加代码的健壮性。</li><li>src/compiler：将 template 模板编译为 render 函数。</li><li>src/core：与平台无关通用的逻辑，可以运行在任何 javaScript 环境下，如 web、Node.js、weex 嵌入原生应用中。</li><li>src/platforms：针对 web 平台和 weex 平台分别的实现，并提供统一的 API 供调用。</li><li>src/core/observer：vue 检测数据数据变化改变视图的代码实现。</li><li>src/core/vdom：将 render 函数转为 vnode 从而 patch 为真实 dom 以及 diff 算法的代码实现。</li><li>dist：存放着针对不同使用方式的不同的 vue 版本。</li></ul><p class='p subtitle'>vue版本</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%885.16.23.png' style='width:300px'><p>vue 使用的是 rollup 构建的，具体怎么构建的不重要，总之会构建出很多不同版本的 vue。vue-cli 默认是使用运行时版本。按照使用方式的不同，可以分为以下三类:</p><ul><li>UMD：通过&lt;script&gt;标签直接在浏览器中使用。</li><li>CommonJS：使用比较旧的打包工具使用，如 webpack1。</li><li>ES Module：配合现代打包工具使用，如 webpack2 及以上,分为直接作用于浏览器和基于构建工具使用。</li></ul><p>其实运行时版与完整版区别在于以下两点:</p><ul><li>最明显的就是大小的区别，带编译器会比不带的版本大。</li><li>编译的时机不同，编译器是运行时编译，性能会有一定的损耗；运行时版本是借助 loader 做的离线编译，运行性能更高。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;vue实例的生成&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;s</summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期</title>
    <link href="https://strive087.github.io/2020/10/11/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://strive087.github.io/2020/10/11/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</id>
    <published>2020-10-11T00:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>beforeCreate创建前</p><p>在初始化事件和生命周期完毕之后,初始化注入和反应之前触发</p><p class='p subtitle'>加载渲染过程</p><p>1.父组件beforeCreate<br>2.父组件created<br>3.父组件beforeMount<br>4.子组件beforeCreate<br>5.子组件created<br>6.子组件beforeMount<br>7.子组件mounted<br>8.父组件mounted</p><p class='p subtitle'>更新过程</p><p>1.父组件beforeUpdate<br>2.子组件beforeUpdate<br>3.子组件updated<br>4.父组件updated</p><p class='p subtitle'>销毁过程</p><p>1.父组件beforeDestroy<br>2.子组件beforeDestroy<br>3.子组件destroyed<br>4.父组件destroyed</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;beforeCreate创建前&lt;/p&gt;
&lt;p&gt;在初始化事件和生命周期完毕之后,初始化注入和反应之前触发&lt;/p&gt;
&lt;p class=&#39;p subtitle&#39;&gt;加载渲染过程&lt;/p&gt;
&lt;p&gt;1.父组件beforeCreate&lt;br&gt;2.父组件</summary>
      
    
    
    
    <category term="vue" scheme="https://strive087.github.io/categories/vue/"/>
    
    
    <category term="vue" scheme="https://strive087.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>wx小程序屏幕滑动</title>
    <link href="https://strive087.github.io/2020/09/12/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8/"/>
    <id>https://strive087.github.io/2020/09/12/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8/</id>
    <published>2020-09-12T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>屏幕滑动</p><p>movable-area:设置可滑动的区域<br>movable-view:必须为movable-area的直接子节点<br>当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；<br>当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area，这句话的意思是movable-view的左边框只能到达movable-area的左边框，右边框也只能到达movable-area的右边框，那么就可以实现左右滑动。<br>左滑动：只要movable-view的宽大于movable-area;<br>右滑动：只要movable-view的宽小于movable-area;</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;屏幕滑动&lt;/p&gt;
&lt;p&gt;movable-area:设置可滑动的区域&lt;br&gt;movable-view:必须为movable-area的直接子节点&lt;br&gt;当movable-view小于movable-area时，movable-view的移</summary>
      
    
    
    
    <category term="wx小程序" scheme="https://strive087.github.io/categories/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
    <category term="wx小程序" scheme="https://strive087.github.io/tags/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>webpack快速搭建手册</title>
    <link href="https://strive087.github.io/2020/09/12/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
    <id>https://strive087.github.io/2020/09/12/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</id>
    <published>2020-09-12T23:05:49.000Z</published>
    <updated>2020-11-06T12:51:32.261Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>工厂模式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;工厂模式&lt;/p&gt;
</summary>
      
    
    
    
    <category term="webpack" scheme="https://strive087.github.io/categories/webpack/"/>
    
    
    <category term="webpack" scheme="https://strive087.github.io/tags/webpack/"/>
    
  </entry>
  
</feed>
