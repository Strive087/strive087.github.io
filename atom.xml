<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端之路</title>
  
  
  <link href="https://strive087.github.io/atom.xml" rel="self"/>
  
  <link href="https://strive087.github.io/"/>
  <updated>2020-09-23T05:05:50.008Z</updated>
  <id>https://strive087.github.io/</id>
  
  <author>
    <name>zhuduanlei</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack快速搭建手册</title>
    <link href="https://strive087.github.io/2020/09/12/node/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
    <id>https://strive087.github.io/2020/09/12/node/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</id>
    <published>2020-09-12T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>工厂模式</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;工厂模式&lt;/p&gt;
</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="node" scheme="https://strive087.github.io/categories/javascript/node/"/>
    
    <category term="webpack" scheme="https://strive087.github.io/categories/javascript/node/webpack/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="node" scheme="https://strive087.github.io/tags/node/"/>
    
    <category term="webpack" scheme="https://strive087.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>XHR的使用</title>
    <link href="https://strive087.github.io/2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://strive087.github.io/2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2020-08-23T08:02:00.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>xhr基本用法</p><ol><li><p>XMLHttpRequest是原生xhr对象，可使用new操作符生成xhr对象。</p></li><li><p>open方法接受3个参数，发送请求的类型、url和是否异步发送。open方法并未真正发送，只是启动以备发送。</p></li><li><p>send方法接受1个参数，作为请求主体发送的数据，若不需要请求主体发送数据则必须传入null。调用该方法后便会发送请求到服务器，如果请求是同步的，JavaScript代码将等到服务器响应之后再继续执行，收到响应后，响应的数据会自动填入xhr对象属性。</p></li><li><p>xhr对象有个readystatechange事件，可以监听xhr的readyState属性的变化。以下readyState的属性值代表的含义：</p><ul><li>0: 未初始化。</li><li>1: 启动未发送。</li><li>2: 发送。</li><li>3: 接收部分数据。</li><li>4: 完成接收所有数据。</li></ul></li><li><p>abort方法，在接收到响应数据之前调用该方法可以取消异步请求。</p></li></ol><p class='p subtitle'>http头部请求</p><ol><li>setRequestHeader方法接受2个参数，头部字段的名称和值。该方法必须在open方法调用之后、send方法调用之前使用才有效。</li><li>getResponseHeader方法接受1个参数，头部字段名称获取值。</li><li>getAllResponseHeader获取所有头部信息。</li></ol><p class='p subtitle'>表单数据传达</p><p>FormData为序列化表单以及创建与表单格式相同的数据提供了便利。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user-info&#x27;</span>);</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure><p class='p subtitle'>超时设定</p><p>xhr有timeout属性和ontimeout事件，当请求时间到达timeout属性时间后请求就会自动终止，终止时触发ontimeout时间。<br>需要注意的是在终止之后访问status属性将导致错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.timeout = <span class="number">1000</span>;</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>overrideMimeType</p><p>overrideMimeType方法重写xhr响应的MIME类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.overrideMimeType(<span class="string">&quot;text/xml&quot;</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>ç<br>进度事件有如下几种：</p><ul><li>onloadstart：接收到响应数据第一个字节触发</li><li>onprogress：在接收响应数据期间不断触发</li><li>onerror：请求发送错误触发</li><li>onabort：调用abort方法触发</li><li>onload：接收到完整响应数据触发</li><li>onloadend：通信完成或者触发error、abort或load事件后触发</li></ul><p>其中onprogress事件会接收一个event对象。</p><ul><li>event.target指向xhr对象</li><li>event.lengthComputable是个布尔值代表进度信息是否可用</li><li>event.position表示已经接收的字节数</li><li>event.totalSize表示根据Content-Length响应头部确定的预期字节数 </li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;xhr基本用法&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;XMLHttpRequest是原生xhr对象，可使用new操作符生成xhr对象。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;open方法接受3个参数，发送请求的类型、url和是否异步发送。ope</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="xhr" scheme="https://strive087.github.io/tags/xhr/"/>
    
  </entry>
  
  <entry>
    <title>let和const命令</title>
    <link href="https://strive087.github.io/2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/"/>
    <id>https://strive087.github.io/2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</id>
    <published>2020-08-22T07:43:00.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>let</p><p>let类似于var，不同的地方在于var没有代码块作用域，这样会导致var变量提升，而let成功解决了这样的问题。<br>需要特别注意的是在for循环中，for的条件部分是个父作用域，而for的循环体是其中的子作用域。<br>从下面代码可以看出父作用域子作用域中的let声明的i不影响父作用域的let声明的i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abc</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let不允许在相同作用域内，重复声明同一个变量。</p><p class='p subtitle'>const</p><p>const声明的变量，一经声明便不允许修改。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;let&lt;/p&gt;
&lt;p&gt;let类似于var，不同的地方在于var没有代码块作用域，这样会导致var变量提升，而let成功解决了这样的问题。&lt;br&gt;需要特别注意的是在for循环中，for的条件部分是个父作用域，而for的循环体是其中的子作用</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="es6" scheme="https://strive087.github.io/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>this指针</title>
    <link href="https://strive087.github.io/2020/08/22/javascript/this%E6%8C%87%E9%92%88/"/>
    <id>https://strive087.github.io/2020/08/22/javascript/this%E6%8C%87%E9%92%88/</id>
    <published>2020-08-22T07:43:00.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>this</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;this&lt;/p&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="this" scheme="https://strive087.github.io/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>JS闭包</title>
    <link href="https://strive087.github.io/2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/"/>
    <id>https://strive087.github.io/2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/</id>
    <published>2020-08-02T09:23:19.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>闭包</p><p>闭包时指有权访问另一个函数作用域中的变量的函数。例如下图，createPerson可以访问到createFunc中的变量name。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">        person.name = name;</span><br><span class="line">        person.age = age</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createPerson = createFunc(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="number">18</span>);</span><br><span class="line">alert(person.name)  <span class="comment">//&#x27;zhu&#x27;</span></span><br><span class="line">createPerson = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><img src='https://pigbro.online:9608/images/javascript/javascript_closure.png' style='width:500px'><p>由于闭包会携带包含他的函数作用域，也因此他会比其他函数占用更多的内存，所有不要过度使用闭包。</p><p class='p subtitle'>常见的闭包与变量的陷阱</p><p>由于闭包在执行的时候，他只会取得包含函数中任何变量的最终值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    funcArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在执行funcArr数组中的闭包时，然会的i全为5。这时我们可以通过创建一个匿名函数去立即执行返回一个匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    funcArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>内存泄漏</p><p>在ie9之前对于js和dom对象使用不同的垃圾收集例程。因此如果闭包的作用域中保存着一个html元素，那么该元素将无法销毁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">elememt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(elememt.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这时可以采用如下方法解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> id = elememt.id;</span><br><span class="line">elememt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(id);</span><br><span class="line">&#125;</span><br><span class="line">elememt = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;闭包&lt;/p&gt;
&lt;p&gt;闭包时指有权访问另一个函数作用域中的变量的函数。例如下图，createPerson可以访问到createFunc中的变量name。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://strive087.github.io/2020/07/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://strive087.github.io/2020/07/22/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2020-07-22T00:10:13.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式是匹配模式，要么匹配字符，要么匹配位置。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="JavaScript" scheme="https://strive087.github.io/categories/JavaScript/"/>
    
    <category term="RegExp" scheme="https://strive087.github.io/categories/JavaScript/RegExp/"/>
    
    
    <category term="RegExp" scheme="https://strive087.github.io/tags/RegExp/"/>
    
  </entry>
  
  <entry>
    <title>JS继承</title>
    <link href="https://strive087.github.io/2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/"/>
    <id>https://strive087.github.io/2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/</id>
    <published>2020-07-16T01:34:14.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>原型链</p><p>原型链实现继承的主要方式就是使一个构造函数的原型对象等于另一个构造函数的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> children();</span><br></pre></td></tr></table></figure><img src='https://pigbro.online:9608/images/javascript/javascript_inherit.png' style='width:300px'><p>但是使用原型链实现继承存在两个问题，一个是在js创建对象中提到的原型对象的引用类型属性共享的问题，另一个是在创建子类型的实例时，无法向超类型的构造函数中传递参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children();</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>借用构造函数</p><p>借用构造函数实现的继承成功解决了上述原型链实现继承存在的两个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    father.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children(<span class="string">&#x27;duan&#x27;</span>);</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">alert(person1.name); <span class="comment">//&#x27;zhu&#x27;</span></span><br><span class="line">alert(person2.name); <span class="comment">//&#x27;duan&#x27;</span></span><br><span class="line">alert(person1.friend); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>但是仅仅使用借用构造函数，那么也将无法避免构造函数模式存在的定义方法复用的问题，在js创建对象中有提及。</p><p class='p subtitle'>组合继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">father.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    father.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line">children.prototype.constructor = children;</span><br><span class="line">children.prototype.sayage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children(<span class="string">&#x27;duan&#x27;</span>,<span class="number">19</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children(<span class="string">&#x27;lei&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">person1.sayname(); <span class="comment">//&#x27;duan&#x27;</span></span><br><span class="line">person2.sayname(); <span class="comment">//&#x27;lei&#x27;</span></span><br><span class="line">person1.sayage(); <span class="comment">//19</span></span><br><span class="line">person2.sayage(); <span class="comment">//18</span></span><br><span class="line">alert(person1.friend); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><div class="gallery ">              <p><img src="https://pigbro.online:9608/images/javascript/javascript_inherit2.png" alt=""><br><img src="https://pigbro.online:9608/images/javascript/javascript_inherit1.png" alt=""></p>            </div><p>组合继承避免了原型链呵借用构造函数的问题，成为最常用的继承模式。</p><p class='p subtitle'>原型式继承</p><p>借助原型可以基于已有对象创建新对象。在只想让一个对象与另一个对象类似的情况下这种模式可以胜任，因为它还是存在共享引用类型属性问题。<br>es5通过新增Object.create()方法规范化了原型式继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zhu&#x27;</span>,</span><br><span class="line">    friend : [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="built_in">Object</span>.create(person,&#123;</span><br><span class="line">    age : &#123;</span><br><span class="line">       value : <span class="number">18</span>,</span><br><span class="line">       writable : <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    sex : &#123;</span><br><span class="line">        value : <span class="string">&#x27;man&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生式继承</p><p>创建一个用于封装继承过程的函数，在函数内部增强对象。在主要考虑对象而不是自定义类型和构造函数的情况下，这个模式也是有用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name : <span class="string">&#x27;zhu&#x27;</span>,</span><br><span class="line">    friend : [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">another</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clone = object(another);</span><br><span class="line">    clone.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> anotherPerson = createAnother(person);</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生组合式继承</p><p>回过头看组合式继承的代码，一次在new father()时在children.prototype上创建了father的属性，另一次在children函数内部father.call时在实例上创建了father的属性。<br>寄生组合式继承相比组合式继承，解决了实例属性在原型链上重复的问题。寄生式组合继承通过借构造函数来继承属性，通过原型链的混成形式来继承方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">father,children</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> prototype = <span class="built_in">Object</span>.crearte(father.prototype); <span class="comment">//必须要创建对象</span></span><br><span class="line">    prototype.constructor = children;   <span class="comment">//增强对象</span></span><br><span class="line">    children.prototype = prototype;   <span class="comment">//指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    father.call(<span class="built_in">this</span>,name);</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(father,children);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;原型链&lt;/p&gt;
&lt;p&gt;原型链实现继承的主要方式就是使一个构造函数的原型对象等于另一个构造函数的实例。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS创建对象</title>
    <link href="https://strive087.github.io/2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
    <id>https://strive087.github.io/2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</id>
    <published>2020-07-14T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>工厂模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    person.name = name;</span><br><span class="line">    person.age = age;</span><br><span class="line">    person.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>构造函数模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>使用new操作符创建新实例必须经历4个阶段:<br> 1.创建一个新的对象<br> 2.将构造函数的作用域赋给新对象（因此this就指向了该对象）<br> 3.执行构造函数中的代码（为新对象添加属性）<br> 4.返回新对象<br>构造函数的问题：<br>对于sayname的函数相当于new Function(‘alert(this.name)’),这就造成不同实例的同名函数不相等，为了解决这个问题可以将函数定义移到构造函数外部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sayname = sayname；</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayname</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做多个对象共享了全局作用域中同一个函数，但是如果函数增多，那么在全局作用域中定义的函数也增多，那么封装的意义何在？好在这些问题在原型模式中解决。</p><p class='p subtitle'>原型模式</p><p>原型模式成功封装并共享同一函数，但是在原型对象对于包含引用类型的数据时，不同实例不会像基本值类型那样在实例上添加同名属性，而是共用同一引用类型数据，这也就是原型模式最大的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    name : &#x27;zhu&#x27;,</span><br><span class="line">    age : 18,</span><br><span class="line">    friend : [&#x27;fan&#x27;,&#x27;hou&#x27;],</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friend.push(<span class="string">&#x27;hang&#x27;</span>);</span><br><span class="line">alert(person2.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>组合使用原型模式和构造函数模式</p><p>这种混合模式是es5中使用最广泛、认同度最高的一种创建自定义类型的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age ;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="string">&#x27;fan&#x27;</span>,<span class="string">&#x27;hou&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friend.push(<span class="string">&#x27;hang&#x27;</span>);</span><br><span class="line">alert(person1.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]</span></span><br><span class="line">alert(person2.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>动态原型模式</p><p>对于混合模式，在有OO语言开发经验的开发人员来说可能会很困惑，那么动态原型模式，将所有信息都封装在了构造函数中，对原型对象的初始化只会在第一次执行时产生。<br>这里特别强调，在对原型对象初始化时不可使用对象字面量重写原型，因为已经产生了实例，这样会断开实例与原型对象的联系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="string">&#x27;fan&#x27;</span>,<span class="string">&#x27;hou&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span>.sayname != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        Person.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="built_in">this</span>.name)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生构造函数模式</p><p>如果前面提到几种模式都不适用，那么可以适用寄生构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    person.name = name;</span><br><span class="line">    person.age = age;</span><br><span class="line">    person.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure><p>这里特别说明下，在构造函数不返回值的情况下，会默认返回新对象实例。在末尾加上return可以重写返回值。但是这里返回的对象与构造函数或者构造函数的原型对象没有任何关系，所以叫做寄生。</p><p class='p subtitle'>稳妥构造函数模式</p><p>稳妥对象，没有公共属性，而且方法也不引用this。稳妥构造函数与寄生构造函数最大不同在于，稳妥构造函数模式实例方法不引用this，而且不是用new来调用构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">// private members</span></span><br><span class="line">    <span class="keyword">var</span> nameUC = name.toUpperCase();</span><br><span class="line">    <span class="comment">// public members</span></span><br><span class="line">    person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;;</span><br><span class="line">    person.sayNameUC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(nameUC);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">&quot;zhu&quot;</span>, <span class="number">18</span>);</span><br><span class="line">person.sayName(); <span class="comment">// &quot;zhu&quot;</span></span><br><span class="line">person.sayNameUC(); <span class="comment">// &quot;ZHU&quot;</span></span><br><span class="line">alert(person.name);  <span class="comment">// undefined</span></span><br><span class="line">alert(person.nameUC);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>new操作符发生了什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;zhu&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="number">1.</span><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="number">2.</span>obj.__proto__ = Person.prototype</span><br><span class="line"><span class="number">3.</span>Person.call(obj)</span><br><span class="line"><span class="number">4.</span><span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>在JavaScript构造函数中：如果return值类型，那么对构造函数没有影响，实例化对象返回空对象；如果return引用类型（数组，函数，对象），那么实例化对象就会返回该引用类型；</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;工厂模式&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span </summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>二叉树</title>
    <link href="https://strive087.github.io/2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://strive087.github.io/2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/</id>
    <published>2020-07-13T00:10:13.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>树</p><p>再说二叉树之前，我们先了解下什么是树？<br>树（tree）是n（n≥0）个节点的有限集。当n=0时，称为空树。在任意一个非空树中，有如下特点。</p><ol><li>有且仅有一个特定的称为根的节点。  </li><li>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。  </li></ol><p class='p subtitle'>二叉树</p><p>二叉树（binary tree）是树的一种特殊形式。二叉，顾名思义，这种树的每个节点最多有2个孩子节点。注意，这里是最多有2个，也可能只有1个，或者没有孩子节点。<br>此外，二叉树还有两种特殊形式，一个叫作满二叉树，另一个叫作完全二叉树。</p><p class='p subtitle'>满二叉树</p><p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同一层级上，那么这个树就是满二叉树。</p><p class='p subtitle'>完全二叉树</p><p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。</p><p class='p subtitle'>二叉树的应用</p><p>二叉树包含许多特殊的形式，每一种形式都有自己的作用，但是其最主要的应用还在于进行查找操作和维持相对顺序这两个方面。</p><p> 1.查找<br>二叉查找树（binary search tree）,一种特殊的二叉树。二叉查找树在二叉树的基础上增加了以下几个条件。</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值。</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值。</li><li>左、右子树也都是二叉查找树。</li></ul><p>对于一个节点分布相对均衡的二叉查找树来说，如果节点总数是n，那么搜索节点的时间复杂度就是O(logn)，和树的深度是一样的。 这种依靠比较大小来逐步查找的方式，和二分查找算法非常相似。</p><p> 2.维持相对顺序<br>这一点仍然要从二叉查找树说起。二叉查找树要求左子树小于父节点，右子树大于父节点，正是这样保证了二叉树的有序性。因此二叉查找树还有另一个名字 —— 二叉排序树（binary sort tree）。<br>对于持续的插入操作，二叉排序树偌没有自平衡则会发生左右失衡的现象,解决这个现象的方法有多种，如红黑树、AVL树、树堆等</p><img src='https://pigbro.online:9608/images/algorithm/binarytree.png' style='width:500px'><p class='p subtitle'>二叉树遍历</p><p>二叉树的遍历分为两大类，深度优先遍历和广度优先遍历。</p><ul><li><p>深度优先遍历</p><p>  1.前序遍历<br>  二叉树的前序遍历，输出顺序是根节点、左子树、右子树。<br>  2.中序遍历<br>  二叉树的中序遍历，输出顺序是左子树、根节点、右子树。<br>  3.后序遍历<br>  二叉树的后序遍历，输出顺序是左子树、右子树、根节点。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>广度优先遍历<br>  1.层序遍历</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;树&lt;/p&gt;
&lt;p&gt;再说二叉树之前，我们先了解下什么是树？&lt;br&gt;树（tree）是n（n≥0）个节点的有限集。当n=0时，称为空树。在任意一个非空树中，有如下特点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有且仅有一个特定的称为根的节点。  &lt;/li&gt;</summary>
      
    
    
    
    <category term="算法" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
    
    <category term="算法" scheme="https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="二叉树" scheme="https://strive087.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>散列表（哈希表）</title>
    <link href="https://strive087.github.io/2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    <id>https://strive087.github.io/2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/</id>
    <published>2020-07-11T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>什么是散列表</p><p>在职场中，我们每个人在公司内部都有一个唯一的工号工号，这就如同散列表的key值。而工号对应着你的个人信息，就如同散列表中key对应的数据value。<br>散列表本质由数组构成，通过哈希函数将key转换成数组的下标index，数组的下标index对应到相应的数据value。</p><p class='p subtitle'>哈希函数</p><p>每种编程语言实现哈希函数的算法都有不同，这里以Java的常用集合 HashMap为例，来看一看哈希函数在Java中的实现。 在Java及大多数面向对象的语言中，每一个对象都有属于自己的hashcode，这个hashcode是区分不同对象的重要标识。无论对象自身的类型是什么，它们的hashcode都是一个整型变量。 既然都是整型变量，想要转化成数组的下标也就不难实现了。最简单的转化方式是什么呢？是按照数组长度进行取模运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index &#x3D; HashCode (Key) % Array.length  </span><br></pre></td></tr></table></figure><p>实际上，JDK（Java Development Kit，Java语言的软件开发工具包）中的哈希函数并没有直接采用取模运算，而是利用了位运算的方式来优化性能。不过在这里可以姑且简单理解成取模操作。 通过哈希函数，我们可以把字符串或其他类型的Key，转化成数组的下标index。</p><img src='https://pigbro.online:9608/images/algorithm/hashtable.png' style='width:500px'><p class='p subtitle'>哈希冲突</p><p>由于数组长度有限，当key值通过哈希函数转换成index时，就会可能会出现不同的key值转换成相同的index，这种情况就称为哈希冲突。<br>解决哈希冲突有开放寻址法、拉链法和再哈希法等等。<br>这里主要介绍开放寻址法和拉链法。</p><div class="note quote">            <p class='p subtitle'>开放寻址法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p><strong>数据插入</strong><br>开放寻址法的原理很简单，当一个Key通过哈希函数获得对应的数组下标已被占 用时，我们可以“另谋高就”，寻找下一个空档位置。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_addressing.png' style='width:500px'><br><strong>数据查询</strong><br>散列表查询根据key通过哈希函数得到index后对比数据是否相同，如果不同则遍历数组中的数据,如果找到一个空闲的空间则说明该数组中并无该数据。<br>因为在插入数据的时候，遇到相同index的key值后便会遍历数组找到空闲空间进行插入，倘若在查询遍历时找到空闲空间，则表示数组中并没有插入对应key值的value数据。<br><strong>数据删除</strong><br>因为在数据查询的过程中，我们把遍历数组时遇到空闲的空间的情况认定为在数组中无此数据。所以在删除时，不能单单只是地把对应的数据设置为空，因为这操作可能是在插入之后，这将影响到查询。<br>遇到这种情况，通常可以将删除数据设置为空，并从删除位置开始遍历数据组将不为空的数据重新通过哈希函数插入，这将避免直接设置为空给查询带来影响。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_addressing2.png' style='width:500px'><br>另一种方法是标记法，可以将要删除的数据打上删除标记，之后查询的时遇到该标记就跳过，而插入时遇到该标记便可看为空闲的空间插入。<br><strong>装载因子</strong><br>你会发现当散列表插入的数据越来越多时，发生哈希冲突的可能将会上升，同时线性探测数据的方法的时间也会增加。极端状况下将探测整个数组，时间复杂度为O(n)。<br>为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子(load factor)来表示空位的多少。</p><p class='p center'>散列表的装载因子=填入表中的元素个数/散列表的长度</p>散列表的装载因子越大，空闲的空间越少，哈希冲突发生概率越高。              </div>            </details><p class='p subtitle'>拉链法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p><strong>数据插入</strong><br>拉链法又称链表法，每一个元素不仅是一个Entry对象，还是一个链表的头节点。每一个Entry对象通过next指针指向它的下一个Entry节点。当新来的Entry映射到与之冲突的数组位置时，只需要插入到对应的链表中即可。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_linkedlist.png' style='width:500px'><br><strong>数据查询</strong><br>数据查询时根据哈希函数得到index，根据链表的头结点，遍历链表找到对应key值的数据。<br><strong>数据删除</strong><br>数据删除时首先跟查询操作相同找到数据，然后做链表删除操作即可。</p>              </div>            </details>          </div><p class='p subtitle'>javasrcipt实现散列表(使用拉链法简单实现)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">entry</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(key,value)&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = &#123;</span><br><span class="line">            key : key,</span><br><span class="line">            value : value,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span></span>&#123;</span><br><span class="line">    last = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> entry();</span><br><span class="line">    &#125;</span><br><span class="line">    insert(entry)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head.next = entry;</span><br><span class="line">            <span class="built_in">this</span>.last = entry;</span><br><span class="line">            <span class="built_in">this</span>.size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.last.next = entry;</span><br><span class="line">            <span class="built_in">this</span>.last = entry;</span><br><span class="line">            <span class="built_in">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(key)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.next.next)&#123;</span><br><span class="line">                    entry.next = entry.next.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    entry.next = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.last.data.key == key)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.last = entry;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.size--;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fail&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    find(key)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                <span class="keyword">return</span> entry.next.data.value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    update(key,value)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                entry.next.data.value = value;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;not found&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashTable</span></span>&#123;</span><br><span class="line">    #size = 10;</span><br><span class="line">    <span class="keyword">constructor</span>(size)&#123;</span><br><span class="line">        <span class="built_in">this</span>.tableArr = [];</span><br><span class="line">        <span class="keyword">if</span>(size)&#123;</span><br><span class="line">            this.#size = size;</span><br><span class="line">        &#125;</span><br><span class="line">        for(let i = 0; i &lt; this.#size ; i++)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[i] = <span class="keyword">new</span> linkedList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashFunc(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.length; ++i)&#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return hash % this.#size;</span><br><span class="line">    &#125;</span><br><span class="line">    set(key,value)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.get(key) == <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[index].insert(<span class="keyword">new</span> entry(key,value));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[index].update(key,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    get(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tableArr[index].find(key);</span><br><span class="line">    &#125;</span><br><span class="line">    remove(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="built_in">this</span>.tableArr[index].delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> hashTable();</span><br><span class="line">map.set(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">map.set(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">map.set(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">map.set(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">map.set(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">map.set(<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">map.set(<span class="number">7</span>,<span class="number">7</span>);</span><br><span class="line">map.set(<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">map.set(<span class="number">9</span>,<span class="number">9</span>);</span><br><span class="line">map.set(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">map.set(<span class="number">11</span>,<span class="number">11</span>);</span><br><span class="line">map.set(<span class="number">12</span>,<span class="number">12</span>);</span><br><span class="line">map.set(<span class="number">13</span>,<span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">12</span>));</span><br><span class="line">map.remove(<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">12</span>));</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">6</span>));</span><br><span class="line">map.set(<span class="number">6</span>,<span class="number">-6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;什么是散列表&lt;/p&gt;
&lt;p&gt;在职场中，我们每个人在公司内部都有一个唯一的工号工号，这就如同散列表的key值。而工号对应着你的个人信息，就如同散列表中key对应的数据value。&lt;br&gt;散列表本质由数组构成，通过哈希函数将key转换成数组</summary>
      
    
    
    
    <category term="算法" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="散列表" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
    
    <category term="算法" scheme="https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="散列表" scheme="https://strive087.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
    
    <category term="哈希表" scheme="https://strive087.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>基本概念</title>
    <link href="https://strive087.github.io/2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://strive087.github.io/2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-07-06T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>算法</p><p>在数学领域里，算法是用于解决某一类 问题的公式和思想。<br>计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。</p><p class='p subtitle'>数据结构</p><p>数据结构是数据的组织、管理和存储格式， 其使用目的是为了高效地访问和修改数据。<br>数据结构包含数组、链表这样的线性数据结构，也包含树、图这样的复杂数据结构。</p><p class='p subtitle'>时间复杂度</p><p>如何推导出时间复杂度呢？有如下几个原则。  </p><ul><li>如果运行时间是常数量级，则用常数1表示</li><li>只保留时间函数中的最高阶项  </li><li>如果最高阶项存在，则省去最高阶项前面的系数</li></ul><p>常见的四种时间复杂度执行时间排序：<br>O(1)&lt;O(logn)&lt;O(n)&lt;O(n2)<br>在编程的世界中有各种各样的算法，除了上述4个场景，还有许多不同形式的时 间复杂度，例如：O(nlogn)、O(n3)、O(mn)、O(2n)、O(n!)</p><p class='p subtitle'>空间复杂度</p><p>在运行一段程序时，我们不仅要执行各种运算指令，同时也会根据需要，存储一些临时的中间数据，以便后续指令可以更方便地继续执行。<br>这些临时的中间数据在运行过程中所占用的内存空间自然是越小越好，那么空间复杂度便是评判其占用大小的标准。<br>常见的空间复杂度有下面几种情形。</p><ol><li>常量空间<br>当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作O(1)。</li><li>线性空间<br>当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)。</li><li>二维空间<br>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)。</li><li>递归空间<br>递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)。</li></ol><p class='p subtitle'>时间与空间的取舍</p><p>在绝大多数时候，时间复杂度更为重要一些，我们宁可多分配一些内存空间， 也要提升程序的执行速度。</p><p class='p subtitle'>最大公约数</p><p>如果数a能被数b整除，a就叫做b的倍数，b就叫做a的约数。<br>最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b), 同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。<br>可以在区块中放置一些复杂的结构，支持嵌套。<br>求法：</p><div class="note quote">            <p class='p subtitle'>质因数分解法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>把每个数分别分解质因数，再把各数中的全部公有质因数提取出来连乘，所得的积就是这几个数的最大公约数。<br>例如：求24和60的最大公约数，先分解质因数，得24=2×2×2×3，60=2×2×3×5，24与60的全部公有的质因数是2、2、3，它们的积是2×2×3=12，所以，（24，60）=12。</p>              </div>            </details><p class='p subtitle'>短除法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>短除法求最大公约数，先用这几个数的公约数连续去除，一直除到所有的商互质为止，然后把所有的除数连乘起来，所得的积就是这几个数的最大公约数。</p>              </div>            </details><p class='p subtitle'>辗转相除法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>辗转相除法是求两个自然数的最大公约数的一种方法，也叫欧几里德算法。<br>例如，求（319，377）：<br>∵ 319÷377=0（余319）<br>∴（319，377）=（377，319）；<br>∵ 377÷319=1（余58）<br>∴（377，319）=（319，58）；<br>∵ 319÷58=5（余29）<br>∴ （319，58）=（58，29）；<br>∵ 58÷29=2（余0）<br>∴ （58，29）= 29；<br>∴ （319，377）=29。<br>可以写成右边的格式。<br>用辗转相除法求几个数的最大公约数，可以先求出其中任意两个数的最大公约数，再求这个最大公约数与第三个数的最大公约数，依次求下去，直到最后一个数为止。最后所得的那个最大公约数，就是所有这些数的最大公约数。</p>              </div>            </details><p class='p subtitle'>更相减损法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>更相减损法：也叫更相减损术，是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。<br>第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。<br>第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止。<br>则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。<br>其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。所以更相减损法也叫等值算法。<br>例1．用更相减损术求98与63的最大公约数。<br>解：由于63不是偶数，把98和63以大数减小数，并辗转相减：<br>98-63=35<br>63-35=28<br>35-28=7<br>28-7=21<br>21-7=14<br>14-7=7<br>所以，98和63的最大公约数等于7。<br>这个过程可以简单的写为：<br>（98，63）=（35，63）=（35，28）=（7，28）=（7，21）=（7，14）=（7，7）=7.<br>例2．用更相减损术求260和104的最大公约数。<br>解：由于260和104均为偶数，首先用2约简得到130和52，再用2约简得到65和26。<br>此时65是奇数而26不是奇数，故把65和26辗转相减：<br>65-26=39<br>39-26=13<br>26-13=13<br>所以，260与104的最大公约数等于13乘以第一步中约掉的两个2，即13<em>2</em>2=52。<br>这个过程可以简单地写为：<br>（260,104）(/2/2) =&gt;（65,26）=（39,26）=（13,26）=（13,13）=13. (<em>2</em>2) =&gt; 52</p>              </div>            </details><p class='p subtitle'>比较辗转相除法与更相减损术的区别</p><ol><li><p>都是求最大公因数的方法，计算上辗转相除法以除法为主，更相减损术以减法为主，计算次数上辗转相除法计算次数相对较少，特别当两个数字大小区别较大时计算次数的区别较明显。</p></li><li><p>从结果体现形式来看，辗转相除法体现结果是以相除余数为0则得到，而更相减损术则以减数与差相等而得到。</p></li></ol>          </div><p class='p subtitle'>物理结构与逻辑结构</p><p>常用的数据结构有很多，但大多数以数组和链表作为主要的存储方式，数组和链表可以看做数据结构的”物理结构”。</p><img src='https://pigbro.online:9608/images/algorithm/datastructure.png' style='width:500px'>  <p class='p subtitle'>排列组合</p><p>回顾一下高中的知识,什么是排列组合？<br>现在有一个袋子中有4个标记了不同数字的小球[0,1,2,3]，要求从袋子中不放回的取出三个。<br>对于排列而言，顾名思义要有顺序性，也就是说小球的顺序是包含在内的，例如[0,1,2]和[1,2,0]是不同的两种可能。那么如果有n个小球，要从中取出k个，有公式如下：<br>$$<br>\begin{equation}<br>{A}_n^k = \frac{n!}{(n-k)!}<br>\end{equation}<br>$$<br>对于组合而言，顺序是不重要的，例如[0,1,2]和[1,2,0]是一种可能，所以在计算可能性时，要除去自身重复。那么如果有n个小球，要从中取出k个，有公式如下：<br>$$<br>\begin{equation}<br>{C}_n^k = \frac{n!}{k!*(n-k)!}<br>\end{equation}<br>$$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;算法&lt;/p&gt;
&lt;p&gt;在数学领域里，算法是用于解决某一类 问题的公式和思想。&lt;br&gt;计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。&lt;/p&gt;
&lt;p class=&#39;p subtitle&#39;&gt;数据结构&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="算法" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="基本概念" scheme="https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
    
    <category term="算法" scheme="https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>JS的函数式编程</title>
    <link href="https://strive087.github.io/2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    <id>https://strive087.github.io/2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</id>
    <published>2020-06-11T12:05:50.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p>函数式编程特点：</p><ol><li>函数是”第一等公民”  (与变量的)</li><li>只用”表达式”，不用”语句”  </li><li>没有”副作用”  </li><li>不修改状态  </li><li>引用透明（函数运行只靠参数）</li></ol><p>函数curry<br>多参数函数转化成一个嵌套的一元函数<br>好处：一种函数的预加载的方法,相当于-缓存，保存作用域链<br>闭包必定会有内存泄漏</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;函数式编程特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;函数是”第一等公民”  (与变量的)&lt;/li&gt;
&lt;li&gt;只用”表达式”，不用”语句”  &lt;/li&gt;
&lt;li&gt;没有”副作用”  &lt;/li&gt;
&lt;li&gt;不修改状态  &lt;/li&gt;
&lt;li&gt;引用透明（函数运行只靠参数）&lt;/li&gt;
&lt;/ol&gt;</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="函数式编程" scheme="https://strive087.github.io/categories/javascript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="函数式编程" scheme="https://strive087.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>JS的作用域</title>
    <link href="https://strive087.github.io/2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <id>https://strive087.github.io/2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</id>
    <published>2020-06-10T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p class='p subtitle'>作用域</p><p>其实作用域就是一套用来存储变量以及快速查找变量的一套的规则。分为全局、函数、块级作用域这三种。<br>块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：</p><ol><li>在一个函数内部</li><li>在一个代码块（由一对花括号包裹）内部</li></ol><p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/169590b8c66f551b.jpg' style='width:300px'><p class='p subtitle'>词法作用域</p><p class='p subtitle'>关于自由变量的取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">20</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    f() <span class="comment">//10，而不是20</span></span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">show(fn)</span><br></pre></td></tr></table></figure><p>在fn函数中，取自由变量x的值时，要到哪个作用域中取？——要到创建fn函数的那个作用域中取，无论fn函数将在哪里调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b) <span class="comment">//30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = fn(),</span><br><span class="line">  b = <span class="number">200</span></span><br><span class="line">x() <span class="comment">//bar()</span></span><br></pre></td></tr></table></figure><p>fn()返回的是bar函数，赋值给x。执行x()，即执行bar函数代码。取b的值时，直接在fn作用域取出。取a的值时，试图在fn作用域取，但是取不到，只能转向创建fn的那个作用域中去查找，结果找到了,所以最后的结果是30</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p class=&#39;p subtitle&#39;&gt;作用域&lt;/p&gt;
&lt;p&gt;其实作用域就是一套用来存储变量以及快速查找变量的一套的规则。分为全局、函数、块级作用域这三种。&lt;br&gt;块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被</summary>
      
    
    
    
    <category term="javascript" scheme="https://strive087.github.io/categories/javascript/"/>
    
    <category term="作用域" scheme="https://strive087.github.io/categories/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="作用域" scheme="https://strive087.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    
  </entry>
  
  <entry>
    <title>html5陀螺仪</title>
    <link href="https://strive087.github.io/2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/"/>
    <id>https://strive087.github.io/2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/</id>
    <published>2020-06-10T23:05:49.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<p>deviceorientation : 设备的物理方向，表示为一系列的本地坐标系旋角。<br>devicemotion : 提供设备的重力加速信息。<br>compassneedscalibration : 罗盘校准。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html5陀螺仪<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://at.alicdn.com/t/font_1872916_9bxpvrr3gw.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>摇一摇有惊喜！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://pigbro.online:9608/images/surprise/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;surprise&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取手机屏幕宽度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> speed = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> picture = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x=y=z=lastx=lasty=lastz=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).width(deviceWidth*<span class="number">0.9</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.DeviceOrientationEvent) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;deviceorientation&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> x = event.beta;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = event.gamma;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> z = event.alpha;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>((<span class="built_in">Math</span>.abs(x-lastx)&gt;speed || <span class="built_in">Math</span>.abs(y-lasty)&gt;speed || <span class="built_in">Math</span>.abs(z-lastz)&gt;speed) &amp;&amp; flag)&#123;</span></span><br><span class="line">                    if(++picture &gt; 7)&#123;</span><br><span class="line">                        picture = 1;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    $(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;https://pigbro.online:9608/images/surprise/&#x27;</span>+picture+<span class="string">&#x27;.jpg&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                lastx = x;</span><br><span class="line">                lasty = y;</span><br><span class="line">                lastz = z;</span><br><span class="line">            &#125;);</span><br><span class="line">            wi</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).on(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                flag = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;,1000);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;deviceorientation : 设备的物理方向，表示为一系列的本地坐标系旋角。&lt;br&gt;devicemotion : 提供设备的重力加速信息。&lt;br&gt;compassneedscalibration : 罗盘校准。&lt;/p&gt;
&lt;figure class=&quot;highligh</summary>
      
    
    
    
    <category term="html" scheme="https://strive087.github.io/categories/html/"/>
    
    
    <category term="javascript" scheme="https://strive087.github.io/tags/javascript/"/>
    
    <category term="html" scheme="https://strive087.github.io/tags/html/"/>
    
    <category term="html5" scheme="https://strive087.github.io/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>npm切换镜像源</title>
    <link href="https://strive087.github.io/2020/06/07/npm/"/>
    <id>https://strive087.github.io/2020/06/07/npm/</id>
    <published>2020-06-07T12:20:35.000Z</published>
    <updated>2020-09-23T05:05:50.008Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>切换为淘宝镜像</p><p>1.临时使用</p><pre><code>npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express;</code></pre><p>2.持久使用</p><pre><code>npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre><p>3.通过cnpm</p><pre><code>npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre></li><li><p>切换官方镜像</p><pre><code>npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</code></pre></li><li><p>查看当前npm源地址</p><pre><code>npm config get registry</code></pre></li></ul><p>取消代理<br>npm config delete proxy<br>npm config delete https-proxy<br>npm代理<br>npm config set proxy <a href="http://127.0.0.1:1087">http://127.0.0.1:1087</a><br>npm config set https-proxy <a href="http://127.0.0.1:1087">http://127.0.0.1:1087</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;切换为淘宝镜像&lt;/p&gt;
&lt;p&gt;1.临时使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm --registry https:&amp;#x2F;&amp;#x2F;registry.npm.taobao.org install express;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2</summary>
      
    
    
    
    <category term="nodeJs" scheme="https://strive087.github.io/categories/nodeJs/"/>
    
    
    <category term="npm" scheme="https://strive087.github.io/tags/npm/"/>
    
    <category term="nodejs" scheme="https://strive087.github.io/tags/nodejs/"/>
    
  </entry>
  
</feed>
