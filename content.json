{"meta":{"title":"前端之路","subtitle":"","description":"","author":"zhuduanlei","url":"https://strive087.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"404.html","permalink":"https://strive087.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"about/index.html","permalink":"https://strive087.github.io/about/index.html","excerpt":"","text":"网站说明 本站纯粹记录个人学习成果，若有侵犯，通知本人，必定删除。 email: 840459919@qq.com"},{"title":"所有分类","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"categories/index.html","permalink":"https://strive087.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-11-03T09:35:26.557Z","updated":"2020-11-03T09:35:26.557Z","comments":true,"path":"tags/index.html","permalink":"https://strive087.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"javascript/CORS跨域","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/03/javascript/CORS跨域/","link":"","permalink":"https://strive087.github.io/2020/11/03/javascript/CORS%E8%B7%A8%E5%9F%9F/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"node/koa2/路由","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/03/node/koa2/路由/","link":"","permalink":"https://strive087.github.io/2020/11/03/node/koa2/%E8%B7%AF%E7%94%B1/","excerpt":"","text":"/about -&gt;后端 /about -&gt;404 -&gt;Fallback -&gt;后端 / -&gt;vue 页面 -&gt;页面上 url是 /about -&gt;vue-router -&gt;/about","categories":[],"tags":[]},{"title":"","slug":"javascript/Web Worker","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/03/javascript/Web Worker/","link":"","permalink":"https://strive087.github.io/2020/11/03/javascript/Web%20Worker/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"javascript/ES6/变量的解构赋值","date":"2020-11-03T09:35:26.553Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/03/javascript/ES6/变量的解构赋值/","link":"","permalink":"https://strive087.github.io/2020/11/03/javascript/ES6/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"双精度浮点数","slug":"javascript/运算/双精度浮点数","date":"2020-11-01T12:15:13.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/01/javascript/运算/双精度浮点数/","link":"","permalink":"https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/","excerpt":"","text":"js中的数字 JavaScript中所有的数字，无论是整数还是小数，其类型均为Number。在程序内部，Number类型的实质是一个64位的浮点数，这与Java中double类型的浮点数是一致的；因此，JavaScript中所有的数都是浮点数。遵循IEEE 754标准（浮点数算术标准），JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的MAX_VALUE属性和MIN_VALUE属性来获取。 EEE 754标准 IEEE 754浮点数的三个域如下图所示: sign(1bit):符号位 exponent(11bit):阶数 (阶数 = 指数+偏置量(对于双精度来说，其规定的偏置量为1023)) fraction(52bit):有效数字例如:二进制数0.0101,此时可以表示为1.01*2^-2: sign: 0 exponent: 1111111101 (1021) fraction: 010000…00 (1.01 存储有效数字时，将不会存储小数点前面的1) 十进制数为0.3125,转化为十进制的公式：","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"运算","slug":"javascript/运算","permalink":"https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"}],"tags":[{"name":"浮点数","slug":"浮点数","permalink":"https://strive087.github.io/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"}]},{"title":"进制转换","slug":"javascript/运算/进制","date":"2020-11-01T11:35:13.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/01/javascript/运算/进制/","link":"","permalink":"https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E8%BF%9B%E5%88%B6/","excerpt":"","text":"二/八/十六进制数表示 123456var num2 = 0b101; //二进制var num8 = 0765; //八进制var num16 = 0xFA37; //十六进制console.log(num2)console.log(num8)console.log(num16) 二/八/十六进制转十进制 12345678910var num2 = &#x27;101&#x27;;var num8 = &#x27;765&#x27;;var num16 = &#x27;FA37&#x27;;// 0b101 = (2^2)*1 + (2^1)*0 + (2^0)*1console.log(&#x27;二进制转十进制:&#x27;,parseInt(num2,2));//0765 = (8^2)*7 + (8^1)*6 + (8^0)*5console.log(&#x27;八进制转十进制:&#x27;,parseInt(num8,8));//0xFA37 = (16^3)*15 + (16^2)*10 + (16^1)*3 + (16^0)*7console.log(&#x27;十六进制转十进制:&#x27;,parseInt(num16,16)); 十进制转二/八/十六进制 12345var num10 = 16;console.log(&#x27;十进制数转二进制:&#x27;,num10.toString(2));console.log(&#x27;十进制数转八进制:&#x27;,num10.toString(8));console.log(&#x27;十进制数转十六进制:&#x27;,num10.toString(16));","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"运算","slug":"javascript/运算","permalink":"https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"}],"tags":[{"name":"位运算","slug":"位运算","permalink":"https://strive087.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"}]},{"title":"位运算的应用","slug":"javascript/运算/位运算","date":"2020-11-01T11:05:13.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/11/01/javascript/运算/位运算/","link":"","permalink":"https://strive087.github.io/2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/","excerpt":"","text":"js中的位操作符 1.~ (按位非)2.&amp; (按位与)3.| (按位或)4.^ (按位异或)5.&lt;&lt; (左移)6.&gt;&gt; (有符号右移)7.&gt;&gt;&gt; (无符号右移) ~ (按位非) 1234567891011// 1的二进制表示为: 00000000 00000000 00000000 00000001// 3的二进制表示为: 00000000 00000000 00000000 00000011// -----------------------------// 1反码二进制表示: 11111111 11111111 11111111 11111110// 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。// -----------------------------// 1的反码减1： 11111111 11111111 11111111 11111101// 反码取反： 00000000 00000000 00000000 00000010// 表示为10进制加负号：-2console.log(~ 1) // -2//可以简单可以理解为-(num-1) & (按位与) &amp;以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。 12345// 1的二进制表示为: 00000000 00000000 00000000 00000001// 3的二进制表示为: 00000000 00000000 00000000 00000011// -----------------------------// 1的二进制表示为: 00000000 00000000 00000000 00000001console.log(1 &amp; 3) // 1 | (按位或) | 运算符跟 &amp; 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。 12345// 1的二进制表示为: 00000000 00000000 00000000 00000001// 3的二进制表示为: 00000000 00000000 00000000 00000011// -----------------------------// 3的二进制表示为: 00000000 00000000 00000000 00000011console.log(1 | 3) // 3 ^ (按位异或) ^ 如果对应两个操作位有且仅有一个1时结果为1，其他都是0。 12345// 1的二进制表示为: 00000000 00000000 00000000 00000001// 3的二进制表示为: 00000000 00000000 00000000 00000011// -----------------------------// 2的二进制表示为: 00000000 00000000 00000000 00000010console.log(1 ^ 3) // 2 < (左移)> (有符号右移) &gt;&gt;该操作符会将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。 1234// 1的二进制表示为: 00000000 00000000 00000000 00000001// -----------------------------// 0的二进制表示为: 00000000 00000000 00000000 00000000console.log(1 &gt;&gt; 1) // 0 >>> (无符号右移) &gt;&gt;&gt;该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， 9 &gt;&gt;&gt; 2 得到 2 和 9 &gt;&gt; 2 相同。 位操作符的常见应用 1.使用&amp;运算符判断一个数的奇偶2.使用~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |来取整3.使用^来完成值交换 1234567var a = 5var b = 8a ^= bb ^= aa ^= bconsole.log(a) // 8console.log(b) // 5 4.使用&amp;, &gt;&gt;, |来完成rgb值和16进制颜色值之间的转换 1234567891011121314151617181920212223242526/** * 16进制颜色值转RGB * @param &#123;String&#125; hex 16进制颜色字符串 * @return &#123;String&#125; RGB颜色字符串 */ function hexToRGB(hex) &#123; var hexx = hex.replace(&#x27;#&#x27;, &#x27;0x&#x27;) var r = hexx &gt;&gt; 16 var g = hexx &gt;&gt; 8 &amp; 0xff var b = hexx &amp; 0xff return `rgb($&#123;r&#125;, $&#123;g&#125;, $&#123;b&#125;)`&#125;/** * RGB颜色转16进制颜色 * @param &#123;String&#125; rgb RGB进制颜色字符串 * @return &#123;String&#125; 16进制颜色字符串 */function RGBToHex(rgb) &#123; var rgbArr = rgb.split(/[^\\d]+/) var color = rgbArr[1]&lt;&lt;16 | rgbArr[2]&lt;&lt;8 | rgbArr[3] return &#x27;#&#x27;+ color.toString(16)&#125;// -------------------------------------------------hexToRGB(&#x27;#ffffff&#x27;) // &#x27;rgb(255,255,255)&#x27;RGBToHex(&#x27;rgb(255,255,255)&#x27;) // &#x27;#ffffff&#x27;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"运算","slug":"javascript/运算","permalink":"https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"}],"tags":[{"name":"位运算","slug":"位运算","permalink":"https://strive087.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"}]},{"title":"什么是React SSR","slug":"framework/react_ssr","date":"2020-10-28T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/28/framework/react_ssr/","link":"","permalink":"https://strive087.github.io/2020/10/28/framework/react_ssr/","excerpt":"","text":"什么是React SSR React SSR也就是指融合了单页面应用的优点以及服务端渲染的优点进行互补,做到切页SPA刷新SSR优点: 1.SEO友好 2.首页加载速度快 3.页面切页快 缺点: 1.配置复杂 2.服务器压力相对较大,但比传统的服务器端压力小 3.部分开发受限,比如ComponentDidMount","categories":[{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/categories/framework/"}],"tags":[{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/tags/framework/"}]},{"title":"关于SPA/MPA和SSR/CSR","slug":"framework/spa_mpa_ssr","date":"2020-10-27T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/27/framework/spa_mpa_ssr/","link":"","permalink":"https://strive087.github.io/2020/10/27/framework/spa_mpa_ssr/","excerpt":"","text":"什么是SPA SPA也就是单页面应用,通过ajax和前端渲染更新页面部分内容而不是进行整体页面加载 什么是MPA MPA也就是多页面应用,不同的内容来自不同的页面,需要整也加载(不同网址) 什么是SSR SSR也就是服务器端渲染,将完整的html内容发送到前端,网页需要重新加载,相对于SPA单页应用他有如下几个优势: 1.首屏加载时间快(ssr可从服务端直出页面) 2.SEO友好(由于搜索引擎需要爬虫抓去html中的关键字,而spa依靠虚拟dom挂载所以爬虫无法获取,除了google等一些搜索引擎能够去抓取js中的关键字) 当然ssr也有很明显的劣势: 1.页面体验不够友好(相对无spa快速切页,由于ssr每次切页都要从服务端渲染页面,所以会造成卡顿延迟) 2.可见不一定可操作(因为js可能还在执行) 3.服务器压力大 什么是CSR CSR指的是前端渲染,常是前端请求后端获取数据后通过js更新页面内容","categories":[{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/categories/framework/"}],"tags":[{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/tags/framework/"}]},{"title":"webpack4.x/5.x源码分析1","slug":"webpack/wepack源码分析0","date":"2020-10-25T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/25/webpack/wepack源码分析0/","link":"","permalink":"https://strive087.github.io/2020/10/25/webpack/wepack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/","excerpt":"","text":"单文件输出分析 1.webpack4.x 123456789101112131415161718192021222324252627282930313233343536373839(function (modules) &#123; // webpackBootstrap // The module cache var installedModules = &#123;&#125;; // The require function function __webpack_require__(moduleId) &#123; // Check if module is in cache if (installedModules[moduleId]) &#123; return installedModules[moduleId].exports; &#125; // Create a new module (and put it into the cache) var module = (installedModules[moduleId] = &#123; i: moduleId, l: false, exports: &#123;&#125;, &#125;); // Execute the module function modules[moduleId].call( module.exports, module, module.exports, __webpack_require__ ); // Flag the module as loaded module.l = true; // Return the exports of the module return module.exports; &#125; // Load entry module and return exports return __webpack_require__((__webpack_require__.s = &#x27;./src/index.js&#x27;));&#125;)(&#123;//立即执行函数传入一个对象,以文件路径为属性名,函数体为值 &#x27;./src/index.js&#x27;: function (module, exports) &#123; console.log(&#x27;zhuduanlei&#x27;); &#125;,&#125;); 从上面代码可以得知首先调用立即执行函数,然后函数体内会创建一个缓存对象,然后对判断缓存对象中是否存在传入的module,存在就返回,不存在就创建一个module,模拟commonJS的export,然后存入缓存中,最后通过call执行mudule中的函数,返回mudule.export; 2.webpack5.x 123(() =&gt; &#123; eval(&#x27;console.log(zhuduanlei)&#x27;);&#125;)(); 由于现代浏览器的普及,在webpack5中便直接将源代码进行输出执行 多文件输出分析","categories":[{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/tags/webpack/"}]},{"title":"vue面试题","slug":"vue/vue面试题","date":"2020-10-18T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/18/vue/vue面试题/","link":"","permalink":"https://strive087.github.io/2020/10/18/vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"","text":"runtime和完整版这两个版本的区别 答:最明显的就是大小的区别,还有就是编译的时机不同，完整版同时包含编译器和运行时的版本,编译器是运行时编译，性能会有一定的损耗；运行时版本是借助loader做的离线编译，运行性能更高。 编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码 运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切 methods内的方法可以使用箭头函数么，会造成什么样的结果 答:是不可以使用箭头函数的，因为箭头函数的this是定义时就绑定的。在vue的内部，methods内每个方法的上下文是当前的vm组件实例，methods[key].bind(vm)，而如果使用使用箭头函数，函数的上下文就变成了父级的上下文，也就是undefined了，结果就是通过undefined访问任何变量都会报错。 请问可以在beforeCreate钩子内通过this访问到data中定义的变量么，为什么以及请问这个钩子可以做什么？ 答:是不可以直接访问的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$options.data()方法获得。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"vue源码分析-created之前","slug":"vue/vue源码分析2","date":"2020-10-16T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/16/vue/vue源码分析2/","link":"","permalink":"https://strive087.github.io/2020/10/16/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/","excerpt":"","text":"initInjections(vm)方法 主要作用是初始化inject，可以访问到对应的依赖。 123456789101112131415161718192021222324252627export function initInjections(vm) &#123; const result = resolveInject(vm.$options.inject, vm) // 找结果 ...&#125;export function resolveInject (inject, vm) &#123; if (inject) &#123; const result = Object.create(null) const keys = Object.keys(inject) //省略Symbol情况 for (let i = 0; i &lt; keys.length; i++) &#123; const key = keys[i] const provideKey = inject[key].from let source = vm while (source) &#123; if (source._provided &amp;&amp; hasOwn(source._provided, provideKey)) &#123; //hasOwn为是否有 result[key] = source._provided[provideKey] break &#125; source = source.$parent &#125; ... vue@2.5后新增设置inject默认参数相关逻辑 &#125; return result &#125;&#125; source就是当前的实例，而source._provided内保存的就是当前provide提供的值。首先从当前实例查找，接着将它的父组件实例赋值给source，在它的父组件查找。找到后使用break跳出循环，将搜索的结果赋值给result，接着查找下一个。由于vue是组件式的,所以会先初始化父组件再初始化子组件,所以是先初始化inject再初始化provide initState(vm)方法 初始化会被使用到的状态，状态包括props，methods，data，computed，watch五个选项。 12345678910111213export function initState(vm) &#123; ... const opts = vm.$options if(opts.props) initProps(vm, opts.props) if(opts.methods) initMethods(vm, opts.methods) if(opts.data) initData(vm) ... if(opts.computed) initComputed(vm, opts.computed) if(opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123; initWatch(vm, opts.watch) &#125;&#125; initProps (vm, propsOptions)主要作用是检测子组件接受的值是否符合规则，以及让对应的值可以用this直接访问。1234567891011121314151617function initProps(vm, propsOptions) &#123; // 第二个参数为验证规则 const propsData = vm.$options.propsData || &#123;&#125; // props具体的值 const props = vm._props = &#123;&#125; // 存放props const isRoot = !vm.$parent // 是否是根节点 if (!isRoot) &#123; toggleObserving(false) &#125; for (const key in propsOptions) &#123; const value = validateProp(key, propsOptions, propsData, vm) defineReactive(props, key, value) if (!(key in vm)) &#123; proxy(vm, `_props`, key) &#125; &#125; toggleObserving(true)&#125; props是作为父组件向子组件通信的重要方式，而initProps内的第二个参数propsOptions，就是当前实例也就是通信角色里的子组件，它所定义的接受参数的规则。子组件的props规则是可以使用数组形式的定义的，不过再经过合并options之后会被格式化为对象的形式。所以在定义props规则时，直接使用对象格式吧，这也是更好的书写规范。 123456789101112export function proxy(target, sourceKey, key) &#123; Object.defineProperty(target, key, &#123; enumerable: true, configurable: true, get: function () &#123; return this[sourceKey][key] &#125;, set: function () &#123; this[sourceKey][key] = val &#125; &#125;)&#125; 这里vue内部做了一层代理，将对this.name的访问转而为对this._props.name的访问。 2.initMethods (vm, methods)主要作用是将methods内的方法挂载到this下。 123456789101112131415161718192021function initMethods(vm, methods) &#123; const props = vm.$options.props for(const key in methods) &#123; if(methods[key] == null) &#123; // methods[key] === null || methods[key] === undefined 的简写 warn(`只定义了key而没有相应的value`) &#125; if(props &amp;&amp; hasOwn(props, key)) &#123; warn(`方法名和props的key重名了`) &#125; if((key in vm) &amp;&amp; isReserved(key)) &#123; warn(`方法名已经存在而且以_或$开头`) &#125; vm[key] = methods[key] == null ? noop // 空函数 : bind(methods[key], vm) // 相当于methods[key].bind(vm) &#125;&#125; 3.initData(vm)主要作用是初始化data，挂载到this下。有个重要的点，之所以data内的数据是响应式的，是在这里初始化的 123456789101112131415161718192021222324252627function initData (vm: Component) &#123; let data = vm.$options.data data = vm._data = typeof data === &#x27;function&#x27; ? getData(data, vm) // 通过data.call(vm, vm)得到返回的对象 : data || &#123;&#125; if (!isPlainObject(data)) &#123; // 如果不是一个对象格式 data = &#123;&#125; warn(`data得是一个对象`) &#125; const keys = Object.keys(data) const props = vm.$options.props // 得到props const methods = vm.$options.methods // 得到methods let i = keys.length while (i--) &#123; const key = keys[i] if (methods &amp;&amp; hasOwn(methods, key)) &#123; warn(`和methods内的方法重名了`) &#125; if (props &amp;&amp; hasOwn(props, key)) &#123; warn(`和props内的key重名了`) &#125; else if (!isReserved(key)) &#123; // key不能以_或$开头 proxy(vm, `_data`, key) &#125; &#125; observe(data, true)&#125; initProvide(vm)方法 主要作用是初始化provide为子组件提供依赖。 12345678export function initProvide (vm) &#123; const provide = vm.$options.provide if (provide) &#123; vm._provided = typeof provide === &#x27;function&#x27; ? provide.call(vm) : provide &#125;&#125; provide选项应该是一个对象或是函数，所以对它取值即可，就像取data内的值类似 callHook-created 执行用户定义的created钩子函数，有mixin混入的也一并执行。 分别用一句话来介绍它们主要都干了什么事： initInjections(vm)：让子组件inject的项可以访问到正确的值 initState(vm)：将组件定义的状态挂载到this下。 initProvide(vm)：初始化父组件提供的provide依赖。 created：执行组件的created钩子函数","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"深入理解vue组件缓存","slug":"vue/组件缓存","date":"2020-10-15T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/15/vue/组件缓存/","link":"","permalink":"https://strive087.github.io/2020/10/15/vue/%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98/","excerpt":"","text":"","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"vue组件基础知识","slug":"vue/组件知识","date":"2020-10-14T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/14/vue/组件知识/","link":"","permalink":"https://strive087.github.io/2020/10/14/vue/%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86/","excerpt":"","text":"全局组件和局部组件 1234567891011//全局组件Vue.component(&#x27;test&#x27;, &#123;...&#125;); //局部组件const test = &#123;...&#125;new Vue(&#123; ... components:&#123; test &#125;, ...&#125;) 全局组件相对对于局部组件而言,全局组件及时没有使用也会被webpack等打包工具打包起来,无法进行tree shaking 组件间通信 1.父组件向子组件通信 v-bind: props 值传递 $parent 非值传递 2.子组件向父组件通信 $emit v-on: 事件传值 $children 非值传递 3.兄弟组件通信 bus中央事件总线 将bus挂载至vue根实例的原型上 注册的bus要及时销毁 Vuex 状态管理 适合中大型项目 通过父组件监听后传值给子组件 4.多层嵌套传值 provide/inject 依赖注入传值 适合高阶组件/组件库使用,不建议直接在应用代码中使用 v-bind: $attrs 使用inheritAttrs是否隐藏v-bind: 插槽 12345678910111213//父组件&lt;template&gt; &lt;child&gt; &lt;template v-slot:footer=&quot;slotVal&quot;&gt; &lt;p&gt; footer &lt;/p&gt; &lt;/template&gt; &lt;/child&gt;&lt;/template&gt;//子组件匿名&lt;template&gt; &lt;slot name=&quot;footer&quot; :slotVal=&quot;slotVal&quot;&gt;&lt;slot&gt;&lt;/template&gt; 1.匿名插槽和具名插槽 匿名插槽可以转换为具名插槽:v-slot:default v-slot必须使用在template标签上 2.作用域插槽可以让插槽获取子组件的数据 动态组件以及组件缓存 123&lt;keep-alive&gt; &lt;component :is=&quot;componentName&quot;&gt;&lt;/components&gt;&lt;/keep-alive&gt; 使用componentName来切换组件,使用&lt;keep-alive&gt;标签可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存。和 &lt;transition&gt; 相似，&lt;keep-alive&gt; 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"vue源码分析-beforeCreate之前","slug":"vue/vue源码分析1","date":"2020-10-13T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/13/vue/vue源码分析1/","link":"","permalink":"https://strive087.github.io/2020/10/13/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/","excerpt":"","text":"_init()方法 该_init 方法在 initMixin 中定义,_init 方法执行了一系列初始化操作 123456789101112131415161718192021222324252627let uid = 0Vue.prototype._init = function(options) &#123;const vm = thisvm._uid = uid++ // 唯一标识vm.$options = mergeOptions( // 合并options resolveConstructorOptions(vm.constructor), options || &#123;&#125;, vm ) ... initLifecycle(vm) // 开始一系列的初始化 initEvents(vm) initRender(vm) callHook(vm, &#x27;beforeCreate&#x27;) initInjections(vm) initState(vm) initProvide(vm) callHook(vm, &#x27;created&#x27;) ... if (vm.$options.el) &#123; vm.$mount(vm.$options.el) &#125;&#125; 先需要交代下，每一个组件都是一个Vue构造函数的子类，这个之后会说明为何如此。从上往下我们一步步看，首先会定义_uid属性，这是为每个组件每一次初始化时做的一个唯一的私有属性标识，有时候会有些作用。 合并options 回到主线任务，接着会合并options并在实例上挂载一个$options属性。这里是分两种情况的： 1.初始化new Vue 在执行new Vue构造函数时，参数就是一个对象，也就是用户的自定义配置；会将它和vue之前定义的原型方法，全局API属性；还有全局的Vue.mixin内的参数，将这些都合并成为一个新的options，最后赋值给一个的新的属性$options。 2.子组件初始化 如果是子组件初始化，除了合并以上那些外，还会将父组件的参数进行合并，如有父组件定义在子组件上的event、props等等。经过合并之后就可以通过this.$options.data访问到用户定义的data函数，this.$options.name访问到用户定义的组件名称，这个合并后的属性很重要，会被经常使用到。 initLifecycle initLifecycle(vm): 主要作用是确认组件的父子关系和初始化某些实例属性。 12345678910111213141516171819202122export function initLifecycle(vm) &#123; const options = vm.$options // 之前合并的属性 let parent = options.parent; if (parent &amp;&amp; !options.abstract) &#123; // 找到第一个非抽象父组件 while (parent.$options.abstract &amp;&amp; parent.$parent) &#123; parent = parent.$parent &#125; parent.$children.push(vm) &#125; vm.$parent = parent // 找到后赋值 vm.$root = parent ? parent.$root : vm // 让每一个子组件的$root属性都是根组件 vm.$children = [] vm.$refs = &#123;&#125; vm._watcher = null ... vm._isDestroyed = false vm._isBeingDestroyed = false&#125; initEvents initEvents(vm): 主要作用是将父组件在使用v-on或@注册的自定义事件添加到子组件的事件中心中。 12345678export function initEvents (vm) &#123; vm._events = Object.create(null) // 事件中心 ... const listeners = vm.$options._parentListeners // 经过合并options得到的 if (listeners) &#123; updateComponentListeners(vm, listeners) &#125;&#125; 在经历过合并options阶段后，子组件就可以从vm.$options._parentListeners读取到父组件传过来的自定义事件：&lt;child-components @select=’handleSelect’ /&gt;复制代码传过来的事件数据格式是{select:function(){}}这样的，在initEvents方法内定义vm._events用来存储传过来的事件集合。内部执行的方法updateComponentListeners(vm, listeners)主要是执行updateListeners方法。这个方法有两个执行时机，首先是现在的初始化阶段，还一个就是最后patch时的原生事件也会用到。它的作用是比较新旧事件的列表来确定事件的添加和移除以及事件修饰符的处理，现在主要看自定义事件的添加，它的作用是借助之前定义的$on，$emit方法，完成父子组件事件的通信，(详细的原理说明会在之后的全局API章节统一说明)。首先使用$on往vm.events事件中心下创建一个自定义事件名的数组集合项，数组内的每一项都是对应事件名的回调函数，例如：vm._events.select = [function handleSelect(){}, …] // 可以有多个复制代码注册完成之后，使用$emit方法执行事件：this.$emit(‘select’)复制代码首先会读取到事件中心内$emit方法第一个参数select的对象的数组集合，然后将数组内每个回调函数顺序执行一遍即完成了$emit做的事情。 initRender initRender(vm): 主要作用是挂载可以将render函数转为vnode的方法。 1234567export function initRender(vm) &#123; vm._vnode = null ... vm._c = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, false) //转化编译器的 vm.$createElement = (a, b, c, d) =&gt; createElement(vm, a, b, c, d, true) // 转化手写的 ...&#125; 主要作用是挂载vm._c和vm.$createElement两个方法，它们只是最后一个参数不同，这两个方法都可以将render函数转为vnode，从命名大家应该可以看出区别，vm._c转换的是通过编译器将template转换而来的render函数；而vm.$createElement转换的是用户自定义的render函数,例如: 12345678new Vue(&#123; data: &#123; msg: &#x27;hello Vue!&#x27; &#125;, render(h) &#123; // 这里的 h 就是vm.$createElement return h(&#x27;span&#x27;, this.msg); &#125;&#125;).$mount(&#x27;#app&#x27;); callHook-beforeCreate 在beforeCreate钩子内通过this是不可以访问到data中定义的变量的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$option.data()进行访问。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。 实例的第一个生命周期钩子阶段的初始化工作完成了，一句话来主要说明下他们做了什么事情： initLifecycle(vm)：确认组件(也是vue实例)的父子关系 initEvents(vm)：将父组件的自定义事件传递给子组件 initRender(vm)：提供将render函数转为vnode的方法 beforeCreate：执行组件的beforeCreate钩子函数","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"vue源码分析-Vue实例创建","slug":"vue/vue源码分析0","date":"2020-10-12T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/12/vue/vue源码分析0/","link":"","permalink":"https://strive087.github.io/2020/10/12/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/","excerpt":"","text":"vue实例的生成 12345678910111213141516import &#123; initMixin &#125; from &#x27;./init&#x27;import &#123; stateMixin &#125; from &#x27;./state&#x27;import &#123; renderMixin &#125; from &#x27;./render&#x27;import &#123; eventsMixin &#125; from &#x27;./events&#x27;import &#123; lifecycleMixin &#125; from &#x27;./lifecycle&#x27;function Vue(options) &#123;...this._init(options)&#125;initMixin(Vue)stateMixin(Vue)eventsMixin(Vue)lifecycleMixin(Vue)renderMixin(Vue) Vue 不采用 ES6 的 class 来定义，因为这样可以方便的把 vue 的功能拆分到不同的目录中去维护，将 vue 的构造函数传入到以下方法内： initMixin(Vue)：定义_init 方法。 stateMixin(Vue)：定义数据相关的方法$set,$delete,$watch 方法。 eventsMixin(Vue)：定义事件相关的方法$on，$once，$off，$emit。 lifecycleMixin(Vue)：定义_update，及生命周期相关的$forceUpdate 和$destroy。 renderMixin(Vue)：定义$nextTick，_render 将 render 函数转为 vnode。 这些方法都是在各自的文件内维护的，从而让代码结构更加清晰易懂可维护。 在再这些 xxxMixin 完成后，接着会定义一些全局的 API: 1234567891011121314151617181920export function initGlobalAPI(Vue) &#123;Vue.set 方法Vue.delete 方法Vue.nextTick 方法...内置组件：keep-alivetransitiontransition-group...initUse(Vue)：Vue.use 方法initMixin(Vue)：Vue.mixin 方法initExtend(Vue)：Vue.extend 方法initAssetRegisters(Vue)：Vue.component，Vue.directive，Vue.filter 方法&#125; 这里需要提一下 vue 的架构设计，它的架构是分层式的。最底层是一个 ES5 的构造函数，再上层在原型上会定义一些_init、$watch、_render 等这样的方法，再上层会在构造函数自身定义全局的一些 API，如 set、nextTick、use 等(以上这些是不区分平台的核心代码)，接着是跨平台和服务端渲染(这些暂时不在讨论范围)及编译器。 vue变量命名 在 vue 的内部，_符号开头定义的变量是供内部私有使用的，而$符号定义的变量是供用户使用的，而且用户自定义的变量不能以_或$开头，以防止内部冲突。 vue2.x 源码目录结构 flow：javaScript 是弱类型语言，使用 flow 以定义类型和检测类型，增加代码的健壮性。 src/compiler：将 template 模板编译为 render 函数。 src/core：与平台无关通用的逻辑，可以运行在任何 javaScript 环境下，如 web、Node.js、weex 嵌入原生应用中。 src/platforms：针对 web 平台和 weex 平台分别的实现，并提供统一的 API 供调用。 src/core/observer：vue 检测数据数据变化改变视图的代码实现。 src/core/vdom：将 render 函数转为 vnode 从而 patch 为真实 dom 以及 diff 算法的代码实现。 dist：存放着针对不同使用方式的不同的 vue 版本。 vue版本 vue 使用的是 rollup 构建的，具体怎么构建的不重要，总之会构建出很多不同版本的 vue。vue-cli 默认是使用运行时版本。按照使用方式的不同，可以分为以下三类: UMD：通过&lt;script&gt;标签直接在浏览器中使用。 CommonJS：使用比较旧的打包工具使用，如 webpack1。 ES Module：配合现代打包工具使用，如 webpack2 及以上,分为直接作用于浏览器和基于构建工具使用。 其实运行时版与完整版区别在于以下两点: 最明显的就是大小的区别，带编译器会比不带的版本大。 编译的时机不同，编译器是运行时编译，性能会有一定的损耗；运行时版本是借助 loader 做的离线编译，运行性能更高。","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"vue生命周期","slug":"vue/生命周期","date":"2020-10-11T00:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/10/11/vue/生命周期/","link":"","permalink":"https://strive087.github.io/2020/10/11/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/","excerpt":"","text":"beforeCreate创建前 在初始化事件和生命周期完毕之后,初始化注入和反应之前触发 加载渲染过程 1.父组件beforeCreate2.父组件created3.父组件beforeMount4.子组件beforeCreate5.子组件created6.子组件beforeMount7.子组件mounted8.父组件mounted 更新过程 1.父组件beforeUpdate2.子组件beforeUpdate3.子组件updated4.父组件updated 销毁过程 1.父组件beforeDestroy2.子组件beforeDestroy3.子组件destroyed4.父组件destroyed","categories":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"}]},{"title":"webpack快速搭建手册","slug":"webpack/快速搭建手册","date":"2020-09-12T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/09/12/webpack/快速搭建手册/","link":"","permalink":"https://strive087.github.io/2020/09/12/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/","excerpt":"","text":"工厂模式","categories":[{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/categories/webpack/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/tags/webpack/"}]},{"title":"wx小程序屏幕滑动","slug":"wx/小程序滑动","date":"2020-09-12T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/09/12/wx/小程序滑动/","link":"","permalink":"https://strive087.github.io/2020/09/12/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8/","excerpt":"","text":"屏幕滑动 movable-area:设置可滑动的区域movable-view:必须为movable-area的直接子节点当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area，这句话的意思是movable-view的左边框只能到达movable-area的左边框，右边框也只能到达movable-area的右边框，那么就可以实现左右滑动。左滑动：只要movable-view的宽大于movable-area;右滑动：只要movable-view的宽小于movable-area;","categories":[{"name":"wx小程序","slug":"wx小程序","permalink":"https://strive087.github.io/categories/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"wx小程序","slug":"wx小程序","permalink":"https://strive087.github.io/tags/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"node单线程","slug":"node/单线程","date":"2020-09-10T12:10:35.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/09/10/node/单线程/","link":"","permalink":"https://strive087.github.io/2020/09/10/node/%E5%8D%95%E7%BA%BF%E7%A8%8B/","excerpt":"","text":"单线程的优势 1.不需要像多线程编程一样处处在意状态的同步问题2.没有死锁3.没有线程上下文交换所带来的性能上的开销 单线程的劣势 1.无法利用多核CPU2.当CPU有大量运算时,会影响异步I/O的执行3.错误会引起整个应用的退出,应用的健壮性值得考验","categories":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]},{"title":"package.json包描述文件分析","slug":"node/npm/包描述文件","date":"2020-09-07T12:20:35.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/09/07/node/npm/包描述文件/","link":"","permalink":"https://strive087.github.io/2020/09/07/node/npm/%E5%8C%85%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/","excerpt":"","text":"必需字段分析 -name:包名,必须是唯一的,以免对外公布时产生冲突-description:包简介-version:版本号,通常格式为major.minor.revision-keywords:关键词数组,npm用来做分类搜索-maintainers:包维护者列表,每个维护者由name/email/web三个属性组成,npm根据该属性进行权限认证-contributors:贡献者列表,格式与维护者列表相同-bugs:一个可以反馈bug的网址或者邮箱-licenses:许可证列表,表示这个包可以在哪些许可证下使用-repositories:托管源代码的位置列表-dependencies:当前包所需要依赖的包列表,npm会根据这个属性自动加载依赖包 非必需字段分析 -script:脚本说明对象,主要被包管理器用来安装/编译/测试/卸载包-homepage:当前包网址地址-os:操作系统支持列表-cpu:cpu架构支持列表-engines:支持的JavaScript引擎列表 devDependencies和dependencies的区别 通常我们安装模块时,使用npm i –save这时的模块将被放在 dependencies 下,而我们使用npm i –save –dev这时的模块将被放在 devDependencies 下他们的区别在于作为一个项目时,我们初始化 npm i 下载模块的时候,devDependencies 和 dependencies 下的所有依赖模块将被下载到本地的 node_modules,而在这个项目发布 npm 包时,别人 npm i 你的这个项目时,只会把 dependencies 下的所有依赖模块下载","categories":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]},{"title":"npm script使用指南","slug":"node/npm/npm_script","date":"2020-09-07T12:20:35.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/09/07/node/npm/npm_script/","link":"","permalink":"https://strive087.github.io/2020/09/07/node/npm/npm_script/","excerpt":"","text":"参考链接 npm script使用指南https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html","categories":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]},{"title":"http请求","slug":"http/http","date":"2020-08-25T12:09:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/08/25/http/http/","link":"","permalink":"https://strive087.github.io/2020/08/25/http/http/","excerpt":"","text":"pingttl 默认为 64，每次经过经过一个设备 ttl 减一，当 ttl 为 0 时包会被丢弃浏览器访问页面流程解析域名浏览器发送 http 请求服务器处理请求服务器返回 html 响应浏览器处理 html 页面 一次 http 操作为称为一个事务 http 请求：get、post、head、put、delete、connect、option http 状态码：1xx：指示信息 – 表示请求已经接受，继续处理 2xx：成功 – 请求已被成功接收 3xx：重定向 – 要完成请求必须进行更一步操作301：资源被永久移动了302：资源被临时移动了304：本地重定向305：资源直接请求不到，要通过代理307：临时重定向 4xx：客户端错误 – 请求有语法错误或请求无法实现400：请求语法错误402：请求需要验证403：拒绝执行404：资源没找到，资源根本不存在406：无法完成请求408：请求时间过长409：请求方法和无服务器要求的方法冲突410：资源不存在了，原来有后来没了，维护人员应该设置 301 跳转413：发送的数据太大，服务器拒绝执行422：请求的数据是错误的数据 5xx：服务器端错误 – 服务器未能实现合法的请求500：服务器奔溃 http 请求头 cookies存在于客户端的一小段文本，随客户端点每一个请求发送该 url 下的所有 cookies 到服务器端。既可以在服务端也可以在客户端产生cookie：客户端将服务器设置的 cookie 返回服务器setCookie：服务端向客户端设置 cookie seesion存在于服务端，服务端用 seesionid 区分会话，服务器会将 seesionid 通过 setCookie 存在客户端。 http 缓存机制（浏览器的缓存）缓存会根据请求保存输出内容的副本，如果是同一 url，缓存直接使用副本响应访问请求，而不是向源服务器再次发送请求。 缓存协商策略（服务器决定策略）Etag：文件的 md5 指纹（哈希值）Last-Modified：文件的时间戳强制缓存：不向服务器发送请求，直接拿缓存资源（资源有时间戳和强制缓存标志 Expires）每次访问后服务端会重新给个新的 md5 指纹或时间戳 密码学散列是一种数据一旦转化成其他形式将永远无法恢复的加密技术对称加密：加密和解密手段相同，手段泄露后不安全费对称加密：密钥交换算法： https:tls 协议包含了握手协议、密钥配置切换协议、应用数据协议和警报协议","categories":[{"name":"http","slug":"http","permalink":"https://strive087.github.io/categories/http/"}],"tags":[{"name":"http","slug":"http","permalink":"https://strive087.github.io/tags/http/"}]},{"title":"this指针","slug":"javascript/this指针","date":"2020-08-24T03:31:00.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/08/24/javascript/this指针/","link":"","permalink":"https://strive087.github.io/2020/08/24/javascript/this%E6%8C%87%E9%92%88/","excerpt":"","text":"this指针的由来 由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。 this指针全局对象调用 1234function foo()&#123; console.log(this);&#125;foo(); 这是的全局环境调用foo函数，那么this指针指向全局对象。需要注意的是全局对象不是顶层对象。在es5中全局对象等于顶层对象，但在es6中他们分离开了。例如下面例子： 12345let x = 1;function foo()&#123; console.log(this.x);&#125;foo(); //undefined，这是this指向全局对象window而x挂载在顶层对象上 this指针普通对象调用 12345678910111213function foo()&#123; console.log(this);&#125;let obj1 = &#123; f : foo&#125;let obj2 = &#123; f : function()&#123; foo(); &#125;&#125;obj1.f(); //obj1obj2.f(); //window 在对象环境调用时，this指针指向该对象。但是需要注意的是上面的例子obj2.f()的this，因为obj2.f的值并不是指向foo的地址，而是一个匿名函数的地址。 this指针数组环境调用 12345function foo()&#123; console.log(this);&#125;let arr = [foo];arr[0](); // arr 在函数放置于数值中进行调用时，this指针指向素组本身。 this指针构造函数调用 12345678var x = 2;function test() &#123; this.x = 1;&#125;var obj = new test();obj.x //1x //2 在构造函数中时，this指针指向新对象。 this指针箭头函数调用 this的值是可以用call方法修改的，而且只有在调用的时候我们才能确定this的值。而当我们使用箭头函数的时候，箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。 12345678910111213141516171819202122232425262728293031323334353637function foo() &#123; setTimeout(() =&gt; &#123; console.log(this.id); &#125;, 100);&#125;id = 21;foo.call(&#123; id: 12 &#125;);//12function foo()&#123; console.log(this);&#125;let obj1 = &#123; f : foo&#125;let obj2 = &#123; f : function()&#123; (function()&#123; consolt.log(this); &#125;)() &#125;&#125;obj1.f(); //windowobj2.f(); //windowfunction foo()&#123; console.log(this);&#125;let obj1 = &#123; f : foo&#125;let obj2 = &#123; f : function()&#123; (()=&gt;&#123;console.log(this)&#125;)() &#125;&#125;obj1.f(); //windowobj2.f(); //obj2 由于箭头函数没有自己的this指针，通过call()或apply()等方法调用一个函数时，只能传递参数，他们的第一个参数会被忽略。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"this","slug":"this","permalink":"https://strive087.github.io/tags/this/"}]},{"title":"XHR的使用","slug":"javascript/XHR的使用","date":"2020-08-23T08:02:00.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/08/23/javascript/XHR的使用/","link":"","permalink":"https://strive087.github.io/2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"xhr基本用法 XMLHttpRequest是原生xhr对象，可使用new操作符生成xhr对象。 open方法接受3个参数，发送请求的类型、url和是否异步发送。open方法并未真正发送，只是启动以备发送。 send方法接受1个参数，作为请求主体发送的数据，若不需要请求主体发送数据则必须传入null。调用该方法后便会发送请求到服务器，如果请求是同步的，JavaScript代码将等到服务器响应之后再继续执行，收到响应后，响应的数据会自动填入xhr对象属性。 xhr对象有个readystatechange事件，可以监听xhr的readyState属性的变化。以下readyState的属性值代表的含义： 0: 未初始化。 1: 启动未发送。 2: 发送。 3: 接收部分数据。 4: 完成接收所有数据。 abort方法，在接收到响应数据之前调用该方法可以取消异步请求。 http头部请求 setRequestHeader方法接受2个参数，头部字段的名称和值。该方法必须在open方法调用之后、send方法调用之前使用才有效。 getResponseHeader方法接受1个参数，头部字段名称获取值。 getAllResponseHeader获取所有头部信息。 表单数据传达 FormData为序列化表单以及创建与表单格式相同的数据提供了便利。 1234var xhr = new XMLHttpRequest;var form = document.getElementById(&#x27;user-info&#x27;);xhr.open(...)xhr.send(new FormData(form)); 超时设定 xhr有timeout属性和ontimeout事件，当请求时间到达timeout属性时间后请求就会自动终止，终止时触发ontimeout时间。需要注意的是在终止之后访问status属性将导致错误。 12345var xhr = new XMLHttpRequest;xhr.open(...)xhr.timeout = 1000;xhr.ontimeout = function()&#123;...&#125;;xhr.send(null); overrideMimeType overrideMimeType方法重写xhr响应的MIME类型。 1234var xhr = new XMLHttpRequest;xhr.open(...)xhr.overrideMimeType(&quot;text/xml&quot;)xhr.send(null); 进度事件有如下几种： onloadstart：接收到响应数据第一个字节触发 onprogress：在接收响应数据期间不断触发 onerror：请求发送错误触发 onabort：调用abort方法触发 onload：接收到完整响应数据触发 onloadend：通信完成或者触发error、abort或load事件后触发 其中onprogress事件会接收一个event对象。 event.target指向xhr对象 event.lengthComputable是个布尔值代表进度信息是否可用 event.position表示已经接收的字节数 event.totalSize表示根据Content-Length响应头部确定的预期字节数","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"xhr","slug":"xhr","permalink":"https://strive087.github.io/tags/xhr/"}]},{"title":"let和const命令","slug":"javascript/ES6/let和const命令","date":"2020-08-22T07:43:00.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/08/22/javascript/ES6/let和const命令/","link":"","permalink":"https://strive087.github.io/2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/","excerpt":"","text":"let let类似于var，不同的地方在于var没有代码块作用域，这样会导致var变量提升，而let成功解决了这样的问题。需要特别注意的是在for循环中，for的条件部分是个父作用域，而for的循环体是其中的子作用域。从下面代码可以看出父作用域子作用域中的let声明的i不影响父作用域的let声明的i。 1234567891011121314151617for (let i = 0; i &lt; 3; i++) &#123; let i = &#x27;abc&#x27;; console.log(i);&#125;// abc// abc// abcfor (var i = 0; i &lt; 3; i++) &#123; var a = &#x27;abc&#x27;; console.log(i);&#125;//abcfor (var i = 0; i &lt; 3; i++) &#123; var a = &#x27;abc&#x27;; console.log(i);&#125;//abc ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。 123456var tmp = 123;if (true) &#123; tmp = &#x27;abc&#x27;; // ReferenceError let tmp;&#125; let不允许在相同作用域内，重复声明同一个变量。 const const声明的变量，一经声明便不允许修改。const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。 12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"https://strive087.github.io/tags/es6/"}]},{"title":"JS闭包","slug":"javascript/JS闭包","date":"2020-08-02T09:23:19.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/08/02/javascript/JS闭包/","link":"","permalink":"https://strive087.github.io/2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/","excerpt":"","text":"闭包 闭包时指有权访问另一个函数作用域中的变量的函数。例如下图，createPerson可以访问到createFunc中的变量name。 123456789101112function createFunc(name)&#123; return function(age)&#123; var person = &#123;&#125;; person.name = name; person.age = age return person; &#125;;&#125;var createPerson = createFunc(&#x27;zhu&#x27;);var person = createPerson(18);alert(person.name) //&#x27;zhu&#x27;createPerson = null; 由于闭包会携带包含他的函数作用域，也因此他会比其他函数占用更多的内存，所有不要过度使用闭包。 常见的闭包与变量的陷阱 由于闭包在执行的时候，他只会取得包含函数中任何变量的最终值。 123456var funcArr = [];for(var i = 0; i &lt; 5; i++)&#123; funcArr[i] = function()&#123; return i; &#125;;&#125; 所以在执行funcArr数组中的闭包时，然会的i全为5。这时我们可以通过创建一个匿名函数去立即执行返回一个匿名函数。 12345678var funcArr = [];for(var i = 0; i &lt; 5; i++)&#123; funcArr[i] = (function(num)&#123; return function()&#123; return num; &#125;; &#125;)(i);&#125; 内存泄漏 在ie9之前对于js和dom对象使用不同的垃圾收集例程。因此如果闭包的作用域中保存着一个html元素，那么该元素将无法销毁。 1234var element = document.getElementById(&#x27;one&#x27;);elememt.onclick = function()&#123; alert(elememt.id);&#125; 那么这时可以采用如下方法解决 123456var element = document.getElementById(&#x27;one&#x27;);var id = elememt.id;elememt.onclick = function()&#123; alert(id);&#125;elememt = null;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"正则表达式","slug":"javascript/正则表达式","date":"2020-07-22T00:10:13.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/22/javascript/正则表达式/","link":"","permalink":"https://strive087.github.io/2020/07/22/javascript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"正则表达式是匹配模式，要么匹配字符，要么匹配位置。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"RegExp","slug":"javascript/RegExp","permalink":"https://strive087.github.io/categories/javascript/RegExp/"}],"tags":[{"name":"RegExp","slug":"RegExp","permalink":"https://strive087.github.io/tags/RegExp/"}]},{"title":"JS继承","slug":"javascript/JS继承","date":"2020-07-16T01:34:14.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/16/javascript/JS继承/","link":"","permalink":"https://strive087.github.io/2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/","excerpt":"","text":"原型链 原型链实现继承的主要方式就是使一个构造函数的原型对象等于另一个构造函数的实例。 12345678function father()&#123;this.friend = [1,2,3];&#125;function children()&#123;this.age = 18;&#125;children.prototype = new father();var person = new children(); 但是使用原型链实现继承存在两个问题，一个是在 js 创建对象中提到的原型对象的引用类型属性共享的问题，另一个是在创建子类型的实例时，无法向超类型的构造函数中传递参数。 1234567891011function father()&#123;this.friend = [1,2,3];&#125;function children()&#123;this.age = 18;&#125;children.prototype = new father();var person1 = new children();var person2 = new children();person1.friend.push(4);alert(person2.friend); //[1,2,3,4] 借用构造函数 借用构造函数实现的继承成功解决了上述原型链实现继承存在的两个问题。 12345678910111213141516function father(name)&#123;this.name = name;this.friend = [1,2,3];&#125;function children(name)&#123;father.call(this,name);this.age = 18;&#125;children.prototype = new father();var person1 = new children(&#x27;zhu&#x27;);var person2 = new children(&#x27;duan&#x27;);person1.friend.push(4);alert(person1.name); //&#x27;zhu&#x27;alert(person2.name); //&#x27;duan&#x27;alert(person1.friend); //[1,2,3,4]alert(person2.friend); //[1,2,3] 但是仅仅使用借用构造函数，那么也将无法避免构造函数模式存在的定义方法复用的问题，在 js 创建对象中有提及。 组合继承 12345678910111213141516171819202122232425function father(name)&#123;this.name = name;this.friend = [1,2,3];&#125;father.prototype.sayname = function()&#123;alert(this.name);&#125;function children(name,age)&#123;father.call(this,name);this.age = age;&#125;children.prototype = new father(&#x27;zhu&#x27;);children.prototype.constructor = children;children.prototype.sayage = function()&#123;alert(this.age);&#125;var person1 = new children(&#x27;duan&#x27;,19);var person2 = new children(&#x27;lei&#x27;,18);person1.friend.push(4);person1.sayname(); //&#x27;duan&#x27;person2.sayname(); //&#x27;lei&#x27;person1.sayage(); //19person2.sayage(); //18alert(person1.friend); //[1,2,3,4]alert(person2.friend); //[1,2,3] 组合继承避免了原型链呵借用构造函数的问题，成为最常用的继承模式。 原型式继承 借助原型可以基于已有对象创建新对象。在只想让一个对象与另一个对象类似的情况下这种模式可以胜任，因为它还是存在共享引用类型属性问题。es5 通过新增 Object.create()方法规范化了原型式继承。 123456789101112131415161718function object(o)&#123;function F()&#123;&#125;F.prototype = o;return new F();&#125;var person = &#123;name : &#x27;zhu&#x27;,friend : [1,2]&#125;var person1 = Object.create(person,&#123;age : &#123;value : 18,writable : true,&#125;,sex : &#123;value : &#x27;man&#x27;&#125;&#125;); 寄生式继承 创建一个用于封装继承过程的函数，在函数内部增强对象。在主要考虑对象而不是自定义类型和构造函数的情况下，这个模式也是有用的。 1234567891011121314151617function object(o)&#123;function F()&#123;&#125;F.prototype = o;return new F();&#125;var person = &#123;name : &#x27;zhu&#x27;,friend : [1,2]&#125;function createAnother(another)&#123;var clone = object(another);clone.sayName = function()&#123;alert(this.name)&#125;return clone;&#125;var anotherPerson = createAnother(person); 寄生组合式继承 回过头看组合式继承的代码，一次在 new father()时在 children.prototype 上创建了 father 的属性，另一次在 children 函数内部 father.call 时在实例上创建了 father 的属性。寄生组合式继承相比组合式继承，解决了实例属性在原型链上重复的问题。寄生式组合继承通过借构造函数来继承属性，通过原型链的混成形式来继承方法。 1234567891011121314function inheritPrototype(father,children)&#123;var prototype = Object.crearte(father.prototype); //必须要创建对象prototype.constructor = children; //增强对象children.prototype = prototype; //指定对象&#125;function father(name)&#123;this.name = name;this.friend = [1,2,3];&#125;function children(name)&#123;father.call(this,name);this.age = 18;&#125;inheritPrototype(father,children);","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"JS创建对象","slug":"javascript/JS创建对象","date":"2020-07-14T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/14/javascript/JS创建对象/","link":"","permalink":"https://strive087.github.io/2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"工厂模式 12345678910function createPerson(name,age)&#123; var person = new Object; person.name = name; person.age = age; person.sayname = function()&#123; alert(this.name); &#125; return person;&#125;var person = createPerson(&#x27;zhu&#x27;,18); 构造函数模式 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.sayname = function()&#123; alert(this.name); &#125;&#125;var person = new Person(&#x27;zhu&#x27;,18); 使用new操作符创建新实例必须经历4个阶段: 1.创建一个新的空对象对象 – obj = {} 2.将构造函数的作用域赋给新对象（因此this就指向了该对象）– obj.proto = Person.prototype 3.执行构造函数中的代码（为新对象obj添加属性） 4.判断fn返回值类型(无返回值默认return this)，如果是值类型，返回obj；如果是引用类型，则返回该引用类型的对象。构造函数的问题：对于sayname的函数相当于new Function(‘alert(this.name)’),这就造成不同实例的同名函数不相等，为了解决这个问题可以将函数定义移到构造函数外部。 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.sayname = sayname；&#125;function sayname()&#123; alert(this.name);&#125; 这样做多个对象共享了全局作用域中同一个函数，但是如果函数增多，那么在全局作用域中定义的函数也增多，那么封装的意义何在？好在这些问题在原型模式中解决。 原型模式 原型模式成功封装并共享同一函数，但是在原型对象对于包含引用类型的数据时，不同实例不会像基本值类型那样在实例上添加同名属性，而是共用同一引用类型数据，这也就是原型模式最大的问题。 12345678910111213141516function Person()&#123;&#125;Person.prototype = &#123; constructor : Person, name : &#x27;zhu&#x27;, age : 18, friend : [&#x27;fan&#x27;,&#x27;hou&#x27;], sayName : function()&#123; alert(this.name) &#125;&#125;var person1 = new Person();var person2 = new Person();person1.friend.push(&#x27;hang&#x27;);alert(person2.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;] 组合使用原型模式和构造函数模式 这种混合模式是es5中使用最广泛、认同度最高的一种创建自定义类型的方法。 12345678910111213141516function Person(name,age)&#123; this.name = name; this.age = age ; this.friend = [&#x27;fan&#x27;,&#x27;hou&#x27;];&#125;Person.prototype = &#123; constructor : Person, sayName : function()&#123; alert(this.name) &#125;&#125;var person1 = new Person();var person2 = new Person();person1.friend.push(&#x27;hang&#x27;);alert(person1.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]alert(person2.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;] 动态原型模式 对于混合模式，在有OO语言开发经验的开发人员来说可能会很困惑，那么动态原型模式，将所有信息都封装在了构造函数中，对原型对象的初始化只会在第一次执行时产生。这里特别强调，在对原型对象初始化时不可使用对象字面量重写原型，因为已经产生了实例，这样会断开实例与原型对象的联系。 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.friend = [&#x27;fan&#x27;,&#x27;hou&#x27;]; if(typeof this.sayname != &#x27;function&#x27;)&#123; Person.prototype.sayname = function()&#123;alert(this.name)&#125;; &#125;&#125; 寄生构造函数模式 如果前面提到几种模式都不适用，那么可以适用寄生构造函数。 12345678910function Person(name,age)&#123; var person = new Object; person.name = name; person.age = age; person.sayname = function()&#123; alert(this.name); &#125; return person;&#125;var person = new Person(&#x27;zhu&#x27;,19); 这里特别说明下，在构造函数不返回值的情况下，会默认返回新对象实例。在末尾加上return可以重写返回值。但是这里返回的对象与构造函数或者构造函数的原型对象没有任何关系，所以叫做寄生。 稳妥构造函数模式 稳妥对象，没有公共属性，而且方法也不引用this。稳妥构造函数与寄生构造函数最大不同在于，稳妥构造函数模式实例方法不引用this，而且不是用new来调用构造函数。 123456789101112131415161718function Person(name, age) &#123; var person = new Object(); // private members var nameUC = name.toUpperCase(); // public members person.sayName = function() &#123; alert(name); &#125;; person.sayNameUC = function() &#123; alert(nameUC); &#125;; return person;&#125;var person = Person(&quot;zhu&quot;, 18);person.sayName(); // &quot;zhu&quot;person.sayNameUC(); // &quot;ZHU&quot;alert(person.name); // undefinedalert(person.nameUC); // undefined new操作符发生了什么 123456789function Person()&#123; this.name = &#x27;zhu&#x27;; return 1;&#125;var person = new Person;1.var obj = &#123;&#125;2.obj.__proto__ = Person.prototype3.Person.call(obj)4.return obj 在JavaScript构造函数中：如果return值类型，那么对构造函数没有影响，实例化对象返回空对象；如果return引用类型（数组，函数，对象），那么实例化对象就会返回该引用类型；","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"二叉树","slug":"algorithm/二叉树","date":"2020-07-13T00:10:13.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/13/algorithm/二叉树/","link":"","permalink":"https://strive087.github.io/2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"树 再说二叉树之前，我们先了解下什么是树？树（tree）是n（n≥0）个节点的有限集。当n=0时，称为空树。在任意一个非空树中，有如下特点。 有且仅有一个特定的称为根的节点。 当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。 二叉树 二叉树（binary tree）是树的一种特殊形式。二叉，顾名思义，这种树的每个节点最多有2个孩子节点。注意，这里是最多有2个，也可能只有1个，或者没有孩子节点。此外，二叉树还有两种特殊形式，一个叫作满二叉树，另一个叫作完全二叉树。 满二叉树 一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同一层级上，那么这个树就是满二叉树。 完全二叉树 对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。 二叉树的应用 二叉树包含许多特殊的形式，每一种形式都有自己的作用，但是其最主要的应用还在于进行查找操作和维持相对顺序这两个方面。 1.查找二叉查找树（binary search tree）,一种特殊的二叉树。二叉查找树在二叉树的基础上增加了以下几个条件。 如果左子树不为空，则左子树上所有节点的值均小于根节点的值。 如果右子树不为空，则右子树上所有节点的值均大于根节点的值。 左、右子树也都是二叉查找树。 对于一个节点分布相对均衡的二叉查找树来说，如果节点总数是n，那么搜索节点的时间复杂度就是O(logn)，和树的深度是一样的。 这种依靠比较大小来逐步查找的方式，和二分查找算法非常相似。 2.维持相对顺序这一点仍然要从二叉查找树说起。二叉查找树要求左子树小于父节点，右子树大于父节点，正是这样保证了二叉树的有序性。因此二叉查找树还有另一个名字 —— 二叉排序树（binary sort tree）。对于持续的插入操作，二叉排序树偌没有自平衡则会发生左右失衡的现象,解决这个现象的方法有多种，如红黑树、AVL树、树堆等 二叉树遍历 二叉树的遍历分为两大类，深度优先遍历和广度优先遍历。 深度优先遍历 1.前序遍历 二叉树的前序遍历，输出顺序是根节点、左子树、右子树。 2.中序遍历 二叉树的中序遍历，输出顺序是左子树、根节点、右子树。 3.后序遍历 二叉树的后序遍历，输出顺序是左子树、右子树、根节点。 12 广度优先遍历 1.层序遍历","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"算法/二叉树","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"二叉树","permalink":"https://strive087.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"}]},{"title":"散列表（哈希表）","slug":"algorithm/散列表","date":"2020-07-11T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/11/algorithm/散列表/","link":"","permalink":"https://strive087.github.io/2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/","excerpt":"","text":"什么是散列表 在职场中，我们每个人在公司内部都有一个唯一的工号工号，这就如同散列表的key值。而工号对应着你的个人信息，就如同散列表中key对应的数据value。散列表本质由数组构成，通过哈希函数将key转换成数组的下标index，数组的下标index对应到相应的数据value。 哈希函数 每种编程语言实现哈希函数的算法都有不同，这里以Java的常用集合 HashMap为例，来看一看哈希函数在Java中的实现。 在Java及大多数面向对象的语言中，每一个对象都有属于自己的hashcode，这个hashcode是区分不同对象的重要标识。无论对象自身的类型是什么，它们的hashcode都是一个整型变量。 既然都是整型变量，想要转化成数组的下标也就不难实现了。最简单的转化方式是什么呢？是按照数组长度进行取模运算。 1index &#x3D; HashCode (Key) % Array.length 实际上，JDK（Java Development Kit，Java语言的软件开发工具包）中的哈希函数并没有直接采用取模运算，而是利用了位运算的方式来优化性能。不过在这里可以姑且简单理解成取模操作。 通过哈希函数，我们可以把字符串或其他类型的Key，转化成数组的下标index。 哈希冲突 由于数组长度有限，当key值通过哈希函数转换成index时，就会可能会出现不同的key值转换成相同的index，这种情况就称为哈希冲突。解决哈希冲突有开放寻址法、拉链法和再哈希法等等。这里主要介绍开放寻址法和拉链法。 开放寻址法 点击查看更多 数据插入开放寻址法的原理很简单，当一个Key通过哈希函数获得对应的数组下标已被占 用时，我们可以“另谋高就”，寻找下一个空档位置。数据查询散列表查询根据key通过哈希函数得到index后对比数据是否相同，如果不同则遍历数组中的数据,如果找到一个空闲的空间则说明该数组中并无该数据。因为在插入数据的时候，遇到相同index的key值后便会遍历数组找到空闲空间进行插入，倘若在查询遍历时找到空闲空间，则表示数组中并没有插入对应key值的value数据。数据删除因为在数据查询的过程中，我们把遍历数组时遇到空闲的空间的情况认定为在数组中无此数据。所以在删除时，不能单单只是地把对应的数据设置为空，因为这操作可能是在插入之后，这将影响到查询。遇到这种情况，通常可以将删除数据设置为空，并从删除位置开始遍历数据组将不为空的数据重新通过哈希函数插入，这将避免直接设置为空给查询带来影响。另一种方法是标记法，可以将要删除的数据打上删除标记，之后查询的时遇到该标记就跳过，而插入时遇到该标记便可看为空闲的空间插入。装载因子你会发现当散列表插入的数据越来越多时，发生哈希冲突的可能将会上升，同时线性探测数据的方法的时间也会增加。极端状况下将探测整个数组，时间复杂度为O(n)。为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子(load factor)来表示空位的多少。散列表的装载因子=填入表中的元素个数/散列表的长度散列表的装载因子越大，空闲的空间越少，哈希冲突发生概率越高。 拉链法 点击查看更多 数据插入拉链法又称链表法，每一个元素不仅是一个Entry对象，还是一个链表的头节点。每一个Entry对象通过next指针指向它的下一个Entry节点。当新来的Entry映射到与之冲突的数组位置时，只需要插入到对应的链表中即可。数据查询数据查询时根据哈希函数得到index，根据链表的头结点，遍历链表找到对应key值的数据。数据删除数据删除时首先跟查询操作相同找到数据，然后做链表删除操作即可。 javasrcipt实现散列表(使用拉链法简单实现) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125class entry&#123; constructor(key,value)&#123; this.data = &#123; key : key, value : value, &#125;; this.next = null; &#125;&#125;class linkedList&#123; last = null; size = 0; constructor()&#123; this.head = new entry(); &#125; insert(entry)&#123; if(this.head.next == null)&#123; this.head.next = entry; this.last = entry; this.size++; &#125;else&#123; this.last.next = entry; this.last = entry; this.size++; &#125; &#125; delete(key)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; if(entry.next.next)&#123; entry.next = entry.next.next; &#125;else&#123; entry.next = null; &#125; if(this.last.data.key == key)&#123; this.last = entry; &#125; this.size--; return &#x27;success&#x27;; &#125;else&#123; entry = entry.next; &#125; &#125; return &#x27;fail&#x27;; &#125; find(key)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; return entry.next.data.value; &#125;else&#123; entry = entry.next; &#125; &#125; return undefined; &#125; update(key,value)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; entry.next.data.value = value; return &#x27;success&#x27;; &#125;else&#123; entry = entry.next; &#125; &#125; return &#x27;not found&#x27;; &#125;&#125;class hashTable&#123; #size = 10; constructor(size)&#123; this.tableArr = []; if(size)&#123; this.#size = size; &#125; for(let i = 0; i &lt; this.#size ; i++)&#123; this.tableArr[i] = new linkedList(); &#125; &#125; hashFunc(key)&#123; let hash = 0; for(let i = 0; i &lt; key.length; ++i)&#123; hash += key.charCodeAt(i); &#125; return hash % this.#size; &#125; set(key,value)&#123; let index = this.hashFunc(key); if(this.get(key) == undefined)&#123; this.tableArr[index].insert(new entry(key,value)); &#125;else&#123; this.tableArr[index].update(key,value) &#125; &#125; get(key)&#123; let index = this.hashFunc(key); return this.tableArr[index].find(key); &#125; remove(key)&#123; let index = this.hashFunc(key); this.tableArr[index].delete(key); &#125;&#125;var map = new hashTable();map.set(1,1);map.set(2,2);map.set(3,3);map.set(4,4);map.set(5,5);map.set(6,6);map.set(7,7);map.set(8,8);map.set(9,9);map.set(10,10);map.set(11,11);map.set(12,12);map.set(13,13);console.log(map.get(12));map.remove(12);console.log(map.get(12));console.log(map.get(6));map.set(6,-6);console.log(map.get(6));","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"散列表","slug":"算法/散列表","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"散列表","slug":"散列表","permalink":"https://strive087.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://strive087.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"基本概念","slug":"algorithm/基本概念","date":"2020-07-06T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/07/06/algorithm/基本概念/","link":"","permalink":"https://strive087.github.io/2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"算法 在数学领域里，算法是用于解决某一类 问题的公式和思想。计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。 数据结构 数据结构是数据的组织、管理和存储格式， 其使用目的是为了高效地访问和修改数据。数据结构包含数组、链表这样的线性数据结构，也包含树、图这样的复杂数据结构。 时间复杂度 如何推导出时间复杂度呢？有如下几个原则。 如果运行时间是常数量级，则用常数1表示 只保留时间函数中的最高阶项 如果最高阶项存在，则省去最高阶项前面的系数 常见的四种时间复杂度执行时间排序：O(1)&lt;O(logn)&lt;O(n)&lt;O(n2)在编程的世界中有各种各样的算法，除了上述4个场景，还有许多不同形式的时 间复杂度，例如：O(nlogn)、O(n3)、O(mn)、O(2n)、O(n!) 空间复杂度 在运行一段程序时，我们不仅要执行各种运算指令，同时也会根据需要，存储一些临时的中间数据，以便后续指令可以更方便地继续执行。这些临时的中间数据在运行过程中所占用的内存空间自然是越小越好，那么空间复杂度便是评判其占用大小的标准。常见的空间复杂度有下面几种情形。 常量空间当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作O(1)。 线性空间当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)。 二维空间当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)。 递归空间递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)。 时间与空间的取舍 在绝大多数时候，时间复杂度更为重要一些，我们宁可多分配一些内存空间， 也要提升程序的执行速度。 最大公约数 如果数a能被数b整除，a就叫做b的倍数，b就叫做a的约数。最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b), 同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。可以在区块中放置一些复杂的结构，支持嵌套。求法： 质因数分解法 点击查看更多 把每个数分别分解质因数，再把各数中的全部公有质因数提取出来连乘，所得的积就是这几个数的最大公约数。例如：求24和60的最大公约数，先分解质因数，得24=2×2×2×3，60=2×2×3×5，24与60的全部公有的质因数是2、2、3，它们的积是2×2×3=12，所以，（24，60）=12。 短除法 点击查看更多 短除法求最大公约数，先用这几个数的公约数连续去除，一直除到所有的商互质为止，然后把所有的除数连乘起来，所得的积就是这几个数的最大公约数。 辗转相除法 点击查看更多 辗转相除法是求两个自然数的最大公约数的一种方法，也叫欧几里德算法。例如，求（319，377）：∵ 319÷377=0（余319）∴（319，377）=（377，319）；∵ 377÷319=1（余58）∴（377，319）=（319，58）；∵ 319÷58=5（余29）∴ （319，58）=（58，29）；∵ 58÷29=2（余0）∴ （58，29）= 29；∴ （319，377）=29。可以写成右边的格式。用辗转相除法求几个数的最大公约数，可以先求出其中任意两个数的最大公约数，再求这个最大公约数与第三个数的最大公约数，依次求下去，直到最后一个数为止。最后所得的那个最大公约数，就是所有这些数的最大公约数。 更相减损法 点击查看更多 更相减损法：也叫更相减损术，是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止。则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。所以更相减损法也叫等值算法。例1．用更相减损术求98与63的最大公约数。解：由于63不是偶数，把98和63以大数减小数，并辗转相减：98-63=3563-35=2835-28=728-7=2121-7=1414-7=7所以，98和63的最大公约数等于7。这个过程可以简单的写为：（98，63）=（35，63）=（35，28）=（7，28）=（7，21）=（7，14）=（7，7）=7.例2．用更相减损术求260和104的最大公约数。解：由于260和104均为偶数，首先用2约简得到130和52，再用2约简得到65和26。此时65是奇数而26不是奇数，故把65和26辗转相减：65-26=3939-26=1326-13=13所以，260与104的最大公约数等于13乘以第一步中约掉的两个2，即1322=52。这个过程可以简单地写为：（260,104）(/2/2) =&gt;（65,26）=（39,26）=（13,26）=（13,13）=13. (22) =&gt; 52 比较辗转相除法与更相减损术的区别都是求最大公因数的方法，计算上辗转相除法以除法为主，更相减损术以减法为主，计算次数上辗转相除法计算次数相对较少，特别当两个数字大小区别较大时计算次数的区别较明显。从结果体现形式来看，辗转相除法体现结果是以相除余数为0则得到，而更相减损术则以减数与差相等而得到。 物理结构与逻辑结构 常用的数据结构有很多，但大多数以数组和链表作为主要的存储方式，数组和链表可以看做数据结构的”物理结构”。 排列组合 回顾一下高中的知识,什么是排列组合？现在有一个袋子中有4个标记了不同数字的小球[0,1,2,3]，要求从袋子中不放回的取出三个。对于排列而言，顾名思义要有顺序性，也就是说小球的顺序是包含在内的，例如[0,1,2]和[1,2,0]是不同的两种可能。那么如果有n个小球，要从中取出k个，有公式如下：$$\\begin{equation}{A}_n^k = \\frac{n!}{(n-k)!}\\end{equation}$$对于组合而言，顺序是不重要的，例如[0,1,2]和[1,2,0]是一种可能，所以在计算可能性时，要除去自身重复。那么如果有n个小球，要从中取出k个，有公式如下：$$\\begin{equation}{C}_n^k = \\frac{n!}{k!*(n-k)!}\\end{equation}$$","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"基本概念","slug":"算法/基本概念","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"JS的函数式编程","slug":"javascript/JS函数式编程","date":"2020-06-11T12:05:50.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/06/11/javascript/JS函数式编程/","link":"","permalink":"https://strive087.github.io/2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/","excerpt":"","text":"函数式编程特点： 函数是”第一等公民” (与变量的) 只用”表达式”，不用”语句” 没有”副作用” 不修改状态 引用透明（函数运行只靠参数） 函数curry多参数函数转化成一个嵌套的一元函数好处：一种函数的预加载的方法,相当于-缓存，保存作用域链闭包必定会有内存泄漏","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"函数式编程","slug":"javascript/函数式编程","permalink":"https://strive087.github.io/categories/javascript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"函数式编程","slug":"函数式编程","permalink":"https://strive087.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"}]},{"title":"JS的作用域","slug":"javascript/JS的词法作用域","date":"2020-06-10T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/06/10/javascript/JS的词法作用域/","link":"","permalink":"https://strive087.github.io/2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/","excerpt":"","text":"作用域 其实作用域就是一套用来存储变量以及快速查找变量的一套的规则。分为全局、函数、块级作用域这三种。块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建： 在一个函数内部 在一个代码块（由一对花括号包裹）内部 作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。 词法作用域 关于自由变量的取值 1234567891011var x = 10function fn() &#123; console.log(x)&#125;function show(f) &#123; var x = 20 (function() &#123; f() //10，而不是20 &#125;)()&#125;show(fn) 在fn函数中，取自由变量x的值时，要到哪个作用域中取？——要到创建fn函数的那个作用域中取，无论fn函数将在哪里调用。 1234567891011var a = 10function fn() &#123; var b = 20 function bar() &#123; console.log(a + b) //30 &#125; return bar&#125;var x = fn(), b = 200x() //bar() fn()返回的是bar函数，赋值给x。执行x()，即执行bar函数代码。取b的值时，直接在fn作用域取出。取a的值时，试图在fn作用域取，但是取不到，只能转向创建fn的那个作用域中去查找，结果找到了,所以最后的结果是30","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"作用域","slug":"javascript/作用域","permalink":"https://strive087.github.io/categories/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"作用域","slug":"作用域","permalink":"https://strive087.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"}]},{"title":"html5陀螺仪","slug":"html5陀螺仪","date":"2020-06-10T23:05:49.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/06/10/html5陀螺仪/","link":"","permalink":"https://strive087.github.io/2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/","excerpt":"","text":"deviceorientation : 设备的物理方向，表示为一系列的本地坐标系旋角。devicemotion : 提供设备的重力加速信息。compassneedscalibration : 罗盘校准。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;html5陀螺仪&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_1872916_9bxpvrr3gw.css&quot;&gt; &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;text-align: center;&quot;&gt;摇一摇有惊喜！&lt;/h1&gt; &lt;div align = &quot;center&quot;&gt; &lt;img src=&quot;https://pigbro.online:9608/images/surprise/1.jpg&quot; alt=&quot;surprise&quot;&gt; &lt;/div&gt; &lt;script&gt; //获取手机屏幕宽度 var deviceWidth = document.documentElement.clientWidth; var speed = 30; var picture = 1; var x=y=z=lastx=lasty=lastz=0; $(&#x27;img&#x27;).width(deviceWidth*0.9); var flag = true; if (window.DeviceOrientationEvent) &#123; window.addEventListener(&#x27;deviceorientation&#x27;, (event) =&gt; &#123; var x = event.beta; var y = event.gamma; var z = event.alpha; if((Math.abs(x-lastx)&gt;speed || Math.abs(y-lasty)&gt;speed || Math.abs(z-lastz)&gt;speed) &amp;&amp; flag)&#123; if(++picture &gt; 7)&#123; picture = 1; &#125; $(&#x27;img&#x27;).attr(&#x27;src&#x27;,&#x27;https://pigbro.online:9608/images/surprise/&#x27;+picture+&#x27;.jpg&#x27;); flag = false; &#125; lastx = x; lasty = y; lastz = z; &#125;); wi &#125; $(&#x27;img&#x27;).on(&#x27;load&#x27;, function() &#123; setTimeout(function()&#123; flag = true; &#125;,1000); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"html","slug":"html","permalink":"https://strive087.github.io/categories/html/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/tags/html/"},{"name":"html5","slug":"html5","permalink":"https://strive087.github.io/tags/html5/"}]},{"title":"npm切换镜像源","slug":"npm","date":"2020-06-07T12:20:35.000Z","updated":"2020-11-03T09:35:26.553Z","comments":true,"path":"2020/06/07/npm/","link":"","permalink":"https://strive087.github.io/2020/06/07/npm/","excerpt":"","text":"手动切换npm源 切换为淘宝镜像npm install cnpm 1.临时使用npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express; 2.持久使用 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 3.通过 cnpm npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 切换官方镜像npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F; 查看当前 npm 源地址npm config get registry nrm切换npm源 通过 nrm 设置 npm 源npm install -g nrmnrm lsnrm use npm设置代理 npm 代理:npm config set proxy http://127.0.0.1:1087npm config set https-proxy http://127.0.0.1:1087npm config set proxy socks5://127.0.0.1:1080npm config set https-proxy socks5://127.0.0.1:1080 取消代理:npm config delete proxynpm config delete https-proxy","categories":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]}],"categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"运算","slug":"javascript/运算","permalink":"https://strive087.github.io/categories/javascript/%E8%BF%90%E7%AE%97/"},{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/categories/framework/"},{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/categories/webpack/"},{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/categories/vue/"},{"name":"wx小程序","slug":"wx小程序","permalink":"https://strive087.github.io/categories/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"},{"name":"http","slug":"http","permalink":"https://strive087.github.io/categories/http/"},{"name":"RegExp","slug":"javascript/RegExp","permalink":"https://strive087.github.io/categories/javascript/RegExp/"},{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"算法/二叉树","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"散列表","slug":"算法/散列表","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"基本概念","slug":"算法/基本概念","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"name":"函数式编程","slug":"javascript/函数式编程","permalink":"https://strive087.github.io/categories/javascript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"name":"作用域","slug":"javascript/作用域","permalink":"https://strive087.github.io/categories/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/categories/html/"}],"tags":[{"name":"浮点数","slug":"浮点数","permalink":"https://strive087.github.io/tags/%E6%B5%AE%E7%82%B9%E6%95%B0/"},{"name":"位运算","slug":"位运算","permalink":"https://strive087.github.io/tags/%E4%BD%8D%E8%BF%90%E7%AE%97/"},{"name":"framework","slug":"framework","permalink":"https://strive087.github.io/tags/framework/"},{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/tags/webpack/"},{"name":"vue","slug":"vue","permalink":"https://strive087.github.io/tags/vue/"},{"name":"wx小程序","slug":"wx小程序","permalink":"https://strive087.github.io/tags/wx%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"},{"name":"http","slug":"http","permalink":"https://strive087.github.io/tags/http/"},{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"this","slug":"this","permalink":"https://strive087.github.io/tags/this/"},{"name":"xhr","slug":"xhr","permalink":"https://strive087.github.io/tags/xhr/"},{"name":"es6","slug":"es6","permalink":"https://strive087.github.io/tags/es6/"},{"name":"RegExp","slug":"RegExp","permalink":"https://strive087.github.io/tags/RegExp/"},{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"二叉树","permalink":"https://strive087.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"散列表","slug":"散列表","permalink":"https://strive087.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://strive087.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"函数式编程","slug":"函数式编程","permalink":"https://strive087.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"name":"作用域","slug":"作用域","permalink":"https://strive087.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/tags/html/"},{"name":"html5","slug":"html5","permalink":"https://strive087.github.io/tags/html5/"}]}