{"meta":{"title":"前端之路","subtitle":"","description":"","author":"zhuduanlei","url":"https://strive087.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-09-23T06:29:03.461Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"404.html","permalink":"https://strive087.github.io/404.html","excerpt":"","text":"404 很抱歉，您访问的页面不存在 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-09-23T06:29:03.461Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"about/index.html","permalink":"https://strive087.github.io/about/index.html","excerpt":"","text":"网站说明 本站纯粹记录个人学习成果，若有侵犯，通知本人，必定删除。 email: 840459919@qq.com"},{"title":"所有分类","date":"2020-09-23T06:29:03.461Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"categories/index.html","permalink":"https://strive087.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-09-23T06:29:03.461Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"tags/index.html","permalink":"https://strive087.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"webpack快速搭建手册","slug":"node/webpack/快速搭建手册","date":"2020-09-12T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/09/12/node/webpack/快速搭建手册/","link":"","permalink":"https://strive087.github.io/2020/09/12/node/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/","excerpt":"","text":"工厂模式","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"node","slug":"javascript/node","permalink":"https://strive087.github.io/categories/javascript/node/"},{"name":"webpack","slug":"javascript/node/webpack","permalink":"https://strive087.github.io/categories/javascript/node/webpack/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"node","slug":"node","permalink":"https://strive087.github.io/tags/node/"},{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/tags/webpack/"}]},{"title":"XHR的使用","slug":"javascript/XHR的使用","date":"2020-08-23T08:02:00.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/08/23/javascript/XHR的使用/","link":"","permalink":"https://strive087.github.io/2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"xhr基本用法 XMLHttpRequest是原生xhr对象，可使用new操作符生成xhr对象。 open方法接受3个参数，发送请求的类型、url和是否异步发送。open方法并未真正发送，只是启动以备发送。 send方法接受1个参数，作为请求主体发送的数据，若不需要请求主体发送数据则必须传入null。调用该方法后便会发送请求到服务器，如果请求是同步的，JavaScript代码将等到服务器响应之后再继续执行，收到响应后，响应的数据会自动填入xhr对象属性。 xhr对象有个readystatechange事件，可以监听xhr的readyState属性的变化。以下readyState的属性值代表的含义： 0: 未初始化。 1: 启动未发送。 2: 发送。 3: 接收部分数据。 4: 完成接收所有数据。 abort方法，在接收到响应数据之前调用该方法可以取消异步请求。 http头部请求 setRequestHeader方法接受2个参数，头部字段的名称和值。该方法必须在open方法调用之后、send方法调用之前使用才有效。 getResponseHeader方法接受1个参数，头部字段名称获取值。 getAllResponseHeader获取所有头部信息。 表单数据传达 FormData为序列化表单以及创建与表单格式相同的数据提供了便利。 1234var xhr = new XMLHttpRequest;var form = document.getElementById(&#x27;user-info&#x27;);xhr.open(...)xhr.send(new FormData(form)); 超时设定 xhr有timeout属性和ontimeout事件，当请求时间到达timeout属性时间后请求就会自动终止，终止时触发ontimeout时间。需要注意的是在终止之后访问status属性将导致错误。 12345var xhr = new XMLHttpRequest;xhr.open(...)xhr.timeout = 1000;xhr.ontimeout = function()&#123;...&#125;;xhr.send(null); overrideMimeType overrideMimeType方法重写xhr响应的MIME类型。 1234var xhr = new XMLHttpRequest;xhr.open(...)xhr.overrideMimeType(&quot;text/xml&quot;)xhr.send(null); ç进度事件有如下几种： onloadstart：接收到响应数据第一个字节触发 onprogress：在接收响应数据期间不断触发 onerror：请求发送错误触发 onabort：调用abort方法触发 onload：接收到完整响应数据触发 onloadend：通信完成或者触发error、abort或load事件后触发 其中onprogress事件会接收一个event对象。 event.target指向xhr对象 event.lengthComputable是个布尔值代表进度信息是否可用 event.position表示已经接收的字节数 event.totalSize表示根据Content-Length响应头部确定的预期字节数","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"xhr","slug":"xhr","permalink":"https://strive087.github.io/tags/xhr/"}]},{"title":"this指针","slug":"javascript/this指针","date":"2020-08-22T07:43:00.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/08/22/javascript/this指针/","link":"","permalink":"https://strive087.github.io/2020/08/22/javascript/this%E6%8C%87%E9%92%88/","excerpt":"","text":"this","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"this","slug":"this","permalink":"https://strive087.github.io/tags/this/"}]},{"title":"let和const命令","slug":"javascript/ES6/let和const命令","date":"2020-08-22T07:43:00.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/08/22/javascript/ES6/let和const命令/","link":"","permalink":"https://strive087.github.io/2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/","excerpt":"","text":"let let类似于var，不同的地方在于var没有代码块作用域，这样会导致var变量提升，而let成功解决了这样的问题。需要特别注意的是在for循环中，for的条件部分是个父作用域，而for的循环体是其中的子作用域。从下面代码可以看出父作用域子作用域中的let声明的i不影响父作用域的let声明的i。 1234567891011121314151617for (let i = 0; i &lt; 3; i++) &#123; let i = &#x27;abc&#x27;; console.log(i);&#125;// abc// abc// abcfor (var i = 0; i &lt; 3; i++) &#123; var a = &#x27;abc&#x27;; console.log(i);&#125;//abcfor (var i = 0; i &lt; 3; i++) &#123; var a = &#x27;abc&#x27;; console.log(i);&#125;//abc ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。 123456var tmp = 123;if (true) &#123; tmp = &#x27;abc&#x27;; // ReferenceError let tmp;&#125; let不允许在相同作用域内，重复声明同一个变量。 const const声明的变量，一经声明便不允许修改。const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。 12345678const foo = &#123;&#125;;// 为 foo 添加一个属性，可以成功foo.prop = 123;foo.prop // 123// 将 foo 指向另一个对象，就会报错foo = &#123;&#125;; // TypeError: &quot;foo&quot; is read-only","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"es6","slug":"es6","permalink":"https://strive087.github.io/tags/es6/"}]},{"title":"JS闭包","slug":"javascript/JS闭包","date":"2020-08-02T09:23:19.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/08/02/javascript/JS闭包/","link":"","permalink":"https://strive087.github.io/2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/","excerpt":"","text":"闭包 闭包时指有权访问另一个函数作用域中的变量的函数。例如下图，createPerson可以访问到createFunc中的变量name。 123456789101112function createFunc(name)&#123; return function(age)&#123; var person = &#123;&#125;; person.name = name; person.age = age return person; &#125;;&#125;var createPerson = createFunc(&#x27;zhu&#x27;);var person = createPerson(18);alert(person.name) //&#x27;zhu&#x27;createPerson = null; 由于闭包会携带包含他的函数作用域，也因此他会比其他函数占用更多的内存，所有不要过度使用闭包。 常见的闭包与变量的陷阱 由于闭包在执行的时候，他只会取得包含函数中任何变量的最终值。 123456var funcArr = [];for(var i = 0; i &lt; 5; i++)&#123; funcArr[i] = function()&#123; return i; &#125;;&#125; 所以在执行funcArr数组中的闭包时，然会的i全为5。这时我们可以通过创建一个匿名函数去立即执行返回一个匿名函数。 12345678var funcArr = [];for(var i = 0; i &lt; 5; i++)&#123; funcArr[i] = (function(num)&#123; return function()&#123; return num; &#125;; &#125;)(i);&#125; 内存泄漏 在ie9之前对于js和dom对象使用不同的垃圾收集例程。因此如果闭包的作用域中保存着一个html元素，那么该元素将无法销毁。 1234var element = document.getElementById(&#x27;one&#x27;);elememt.onclick = function()&#123; alert(elememt.id);&#125; 那么这时可以采用如下方法解决 123456var element = document.getElementById(&#x27;one&#x27;);var id = elememt.id;elememt.onclick = function()&#123; alert(id);&#125;elememt = null;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"正则表达式","slug":"javascript/正则表达式","date":"2020-07-22T00:10:13.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/22/javascript/正则表达式/","link":"","permalink":"https://strive087.github.io/2020/07/22/javascript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/","excerpt":"","text":"正则表达式是匹配模式，要么匹配字符，要么匹配位置。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"RegExp","slug":"javascript/RegExp","permalink":"https://strive087.github.io/categories/javascript/RegExp/"}],"tags":[{"name":"RegExp","slug":"RegExp","permalink":"https://strive087.github.io/tags/RegExp/"}]},{"title":"JS继承","slug":"javascript/JS继承","date":"2020-07-16T01:34:14.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/16/javascript/JS继承/","link":"","permalink":"https://strive087.github.io/2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/","excerpt":"","text":"原型链 原型链实现继承的主要方式就是使一个构造函数的原型对象等于另一个构造函数的实例。 12345678function father()&#123; this.friend = [1,2,3];&#125;function children()&#123; this.age = 18;&#125;children.prototype = new father();var person = new children(); 但是使用原型链实现继承存在两个问题，一个是在js创建对象中提到的原型对象的引用类型属性共享的问题，另一个是在创建子类型的实例时，无法向超类型的构造函数中传递参数。 1234567891011function father()&#123; this.friend = [1,2,3];&#125;function children()&#123; this.age = 18;&#125;children.prototype = new father();var person1 = new children();var person2 = new children();person1.friend.push(4);alert(person2.friend); //[1,2,3,4] 借用构造函数 借用构造函数实现的继承成功解决了上述原型链实现继承存在的两个问题。 12345678910111213141516function father(name)&#123; this.name = name; this.friend = [1,2,3];&#125;function children(name)&#123; father.call(this,name); this.age = 18;&#125;children.prototype = new father();var person1 = new children(&#x27;zhu&#x27;);var person2 = new children(&#x27;duan&#x27;);person1.friend.push(4);alert(person1.name); //&#x27;zhu&#x27;alert(person2.name); //&#x27;duan&#x27;alert(person1.friend); //[1,2,3,4]alert(person2.friend); //[1,2,3] 但是仅仅使用借用构造函数，那么也将无法避免构造函数模式存在的定义方法复用的问题，在js创建对象中有提及。 组合继承 12345678910111213141516171819202122232425function father(name)&#123; this.name = name; this.friend = [1,2,3];&#125;father.prototype.sayname = function()&#123; alert(this.name);&#125;function children(name,age)&#123; father.call(this,name); this.age = age;&#125;children.prototype = new father(&#x27;zhu&#x27;);children.prototype.constructor = children;children.prototype.sayage = function()&#123; alert(this.age);&#125;var person1 = new children(&#x27;duan&#x27;,19);var person2 = new children(&#x27;lei&#x27;,18);person1.friend.push(4);person1.sayname(); //&#x27;duan&#x27;person2.sayname(); //&#x27;lei&#x27;person1.sayage(); //19person2.sayage(); //18alert(person1.friend); //[1,2,3,4]alert(person2.friend); //[1,2,3] 组合继承避免了原型链呵借用构造函数的问题，成为最常用的继承模式。 原型式继承 借助原型可以基于已有对象创建新对象。在只想让一个对象与另一个对象类似的情况下这种模式可以胜任，因为它还是存在共享引用类型属性问题。es5通过新增Object.create()方法规范化了原型式继承。 123456789101112131415161718function object(o)&#123; function F()&#123;&#125; F.prototype = o; return new F();&#125;var person = &#123; name : &#x27;zhu&#x27;, friend : [1,2]&#125;var person1 = Object.create(person,&#123; age : &#123; value : 18, writable : true, &#125;, sex : &#123; value : &#x27;man&#x27; &#125;&#125;); 寄生式继承 创建一个用于封装继承过程的函数，在函数内部增强对象。在主要考虑对象而不是自定义类型和构造函数的情况下，这个模式也是有用的。 1234567891011121314151617function object(o)&#123; function F()&#123;&#125; F.prototype = o; return new F();&#125;var person = &#123; name : &#x27;zhu&#x27;, friend : [1,2]&#125;function createAnother(another)&#123; var clone = object(another); clone.sayName = function()&#123; alert(this.name) &#125; return clone;&#125;var anotherPerson = createAnother(person); 寄生组合式继承 回过头看组合式继承的代码，一次在new father()时在children.prototype上创建了father的属性，另一次在children函数内部father.call时在实例上创建了father的属性。寄生组合式继承相比组合式继承，解决了实例属性在原型链上重复的问题。寄生式组合继承通过借构造函数来继承属性，通过原型链的混成形式来继承方法。 1234567891011121314function inheritPrototype(father,children)&#123; var prototype = Object.crearte(father.prototype); //必须要创建对象 prototype.constructor = children; //增强对象 children.prototype = prototype; //指定对象&#125;function father(name)&#123; this.name = name; this.friend = [1,2,3];&#125;function children(name)&#123; father.call(this,name); this.age = 18;&#125;inheritPrototype(father,children);","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"JS创建对象","slug":"javascript/JS创建对象","date":"2020-07-14T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/14/javascript/JS创建对象/","link":"","permalink":"https://strive087.github.io/2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/","excerpt":"","text":"工厂模式 12345678910function createPerson(name,age)&#123; var person = new Object; person.name = name; person.age = age; person.sayname = function()&#123; alert(this.name); &#125; return person;&#125;var person = createPerson(&#x27;zhu&#x27;,18); 构造函数模式 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.sayname = function()&#123; alert(this.name); &#125;&#125;var person = new Person(&#x27;zhu&#x27;,18); 使用new操作符创建新实例必须经历4个阶段: 1.创建一个新的对象 2.将构造函数的作用域赋给新对象（因此this就指向了该对象） 3.执行构造函数中的代码（为新对象添加属性） 4.返回新对象构造函数的问题：对于sayname的函数相当于new Function(‘alert(this.name)’),这就造成不同实例的同名函数不相等，为了解决这个问题可以将函数定义移到构造函数外部。 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.sayname = sayname；&#125;function sayname()&#123; alert(this.name);&#125; 这样做多个对象共享了全局作用域中同一个函数，但是如果函数增多，那么在全局作用域中定义的函数也增多，那么封装的意义何在？好在这些问题在原型模式中解决。 原型模式 原型模式成功封装并共享同一函数，但是在原型对象对于包含引用类型的数据时，不同实例不会像基本值类型那样在实例上添加同名属性，而是共用同一引用类型数据，这也就是原型模式最大的问题。 12345678910111213141516function Person()&#123;&#125;Person.prototype = &#123; constructor : Person, name : &#x27;zhu&#x27;, age : 18, friend : [&#x27;fan&#x27;,&#x27;hou&#x27;], sayName : function()&#123; alert(this.name) &#125;&#125;var person1 = new Person();var person2 = new Person();person1.friend.push(&#x27;hang&#x27;);alert(person2.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;] 组合使用原型模式和构造函数模式 这种混合模式是es5中使用最广泛、认同度最高的一种创建自定义类型的方法。 12345678910111213141516function Person(name,age)&#123; this.name = name; this.age = age ; this.friend = [&#x27;fan&#x27;,&#x27;hou&#x27;];&#125;Person.prototype = &#123; constructor : Person, sayName : function()&#123; alert(this.name) &#125;&#125;var person1 = new Person();var person2 = new Person();person1.friend.push(&#x27;hang&#x27;);alert(person1.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]alert(person2.friend) //[&#x27;fan&#x27;,&#x27;hou&#x27;] 动态原型模式 对于混合模式，在有OO语言开发经验的开发人员来说可能会很困惑，那么动态原型模式，将所有信息都封装在了构造函数中，对原型对象的初始化只会在第一次执行时产生。这里特别强调，在对原型对象初始化时不可使用对象字面量重写原型，因为已经产生了实例，这样会断开实例与原型对象的联系。 12345678function Person(name,age)&#123; this.name = name; this.age = age; this.friend = [&#x27;fan&#x27;,&#x27;hou&#x27;]; if(typeof this.sayname != &#x27;function&#x27;)&#123; Person.prototype.sayname = function()&#123;alert(this.name)&#125;; &#125;&#125; 寄生构造函数模式 如果前面提到几种模式都不适用，那么可以适用寄生构造函数。 12345678910function Person(name,age)&#123; var person = new Object; person.name = name; person.age = age; person.sayname = function()&#123; alert(this.name); &#125; return person;&#125;var person = new Person(&#x27;zhu&#x27;,19); 这里特别说明下，在构造函数不返回值的情况下，会默认返回新对象实例。在末尾加上return可以重写返回值。但是这里返回的对象与构造函数或者构造函数的原型对象没有任何关系，所以叫做寄生。 稳妥构造函数模式 稳妥对象，没有公共属性，而且方法也不引用this。稳妥构造函数与寄生构造函数最大不同在于，稳妥构造函数模式实例方法不引用this，而且不是用new来调用构造函数。 123456789101112131415161718function Person(name, age) &#123; var person = new Object(); // private members var nameUC = name.toUpperCase(); // public members person.sayName = function() &#123; alert(name); &#125;; person.sayNameUC = function() &#123; alert(nameUC); &#125;; return person;&#125;var person = Person(&quot;zhu&quot;, 18);person.sayName(); // &quot;zhu&quot;person.sayNameUC(); // &quot;ZHU&quot;alert(person.name); // undefinedalert(person.nameUC); // undefined new操作符发生了什么 123456789function Person()&#123; this.name = &#x27;zhu&#x27;; return 1;&#125;var person = new Person;1.var obj = &#123;&#125;2.obj.__proto__ = Person.prototype3.Person.call(obj)4.return obj 在JavaScript构造函数中：如果return值类型，那么对构造函数没有影响，实例化对象返回空对象；如果return引用类型（数组，函数，对象），那么实例化对象就会返回该引用类型；","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"}]},{"title":"二叉树","slug":"algorithm/二叉树","date":"2020-07-13T00:10:13.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/13/algorithm/二叉树/","link":"","permalink":"https://strive087.github.io/2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"树 再说二叉树之前，我们先了解下什么是树？树（tree）是n（n≥0）个节点的有限集。当n=0时，称为空树。在任意一个非空树中，有如下特点。 有且仅有一个特定的称为根的节点。 当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。 二叉树 二叉树（binary tree）是树的一种特殊形式。二叉，顾名思义，这种树的每个节点最多有2个孩子节点。注意，这里是最多有2个，也可能只有1个，或者没有孩子节点。此外，二叉树还有两种特殊形式，一个叫作满二叉树，另一个叫作完全二叉树。 满二叉树 一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同一层级上，那么这个树就是满二叉树。 完全二叉树 对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。 二叉树的应用 二叉树包含许多特殊的形式，每一种形式都有自己的作用，但是其最主要的应用还在于进行查找操作和维持相对顺序这两个方面。 1.查找二叉查找树（binary search tree）,一种特殊的二叉树。二叉查找树在二叉树的基础上增加了以下几个条件。 如果左子树不为空，则左子树上所有节点的值均小于根节点的值。 如果右子树不为空，则右子树上所有节点的值均大于根节点的值。 左、右子树也都是二叉查找树。 对于一个节点分布相对均衡的二叉查找树来说，如果节点总数是n，那么搜索节点的时间复杂度就是O(logn)，和树的深度是一样的。 这种依靠比较大小来逐步查找的方式，和二分查找算法非常相似。 2.维持相对顺序这一点仍然要从二叉查找树说起。二叉查找树要求左子树小于父节点，右子树大于父节点，正是这样保证了二叉树的有序性。因此二叉查找树还有另一个名字 —— 二叉排序树（binary sort tree）。对于持续的插入操作，二叉排序树偌没有自平衡则会发生左右失衡的现象,解决这个现象的方法有多种，如红黑树、AVL树、树堆等 二叉树遍历 二叉树的遍历分为两大类，深度优先遍历和广度优先遍历。 深度优先遍历 1.前序遍历 二叉树的前序遍历，输出顺序是根节点、左子树、右子树。 2.中序遍历 二叉树的中序遍历，输出顺序是左子树、根节点、右子树。 3.后序遍历 二叉树的后序遍历，输出顺序是左子树、右子树、根节点。 12 广度优先遍历 1.层序遍历","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"算法/二叉树","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"二叉树","permalink":"https://strive087.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"}]},{"title":"散列表（哈希表）","slug":"algorithm/散列表","date":"2020-07-11T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/11/algorithm/散列表/","link":"","permalink":"https://strive087.github.io/2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/","excerpt":"","text":"什么是散列表 在职场中，我们每个人在公司内部都有一个唯一的工号工号，这就如同散列表的key值。而工号对应着你的个人信息，就如同散列表中key对应的数据value。散列表本质由数组构成，通过哈希函数将key转换成数组的下标index，数组的下标index对应到相应的数据value。 哈希函数 每种编程语言实现哈希函数的算法都有不同，这里以Java的常用集合 HashMap为例，来看一看哈希函数在Java中的实现。 在Java及大多数面向对象的语言中，每一个对象都有属于自己的hashcode，这个hashcode是区分不同对象的重要标识。无论对象自身的类型是什么，它们的hashcode都是一个整型变量。 既然都是整型变量，想要转化成数组的下标也就不难实现了。最简单的转化方式是什么呢？是按照数组长度进行取模运算。 1index &#x3D; HashCode (Key) % Array.length 实际上，JDK（Java Development Kit，Java语言的软件开发工具包）中的哈希函数并没有直接采用取模运算，而是利用了位运算的方式来优化性能。不过在这里可以姑且简单理解成取模操作。 通过哈希函数，我们可以把字符串或其他类型的Key，转化成数组的下标index。 哈希冲突 由于数组长度有限，当key值通过哈希函数转换成index时，就会可能会出现不同的key值转换成相同的index，这种情况就称为哈希冲突。解决哈希冲突有开放寻址法、拉链法和再哈希法等等。这里主要介绍开放寻址法和拉链法。 开放寻址法 点击查看更多 数据插入开放寻址法的原理很简单，当一个Key通过哈希函数获得对应的数组下标已被占 用时，我们可以“另谋高就”，寻找下一个空档位置。数据查询散列表查询根据key通过哈希函数得到index后对比数据是否相同，如果不同则遍历数组中的数据,如果找到一个空闲的空间则说明该数组中并无该数据。因为在插入数据的时候，遇到相同index的key值后便会遍历数组找到空闲空间进行插入，倘若在查询遍历时找到空闲空间，则表示数组中并没有插入对应key值的value数据。数据删除因为在数据查询的过程中，我们把遍历数组时遇到空闲的空间的情况认定为在数组中无此数据。所以在删除时，不能单单只是地把对应的数据设置为空，因为这操作可能是在插入之后，这将影响到查询。遇到这种情况，通常可以将删除数据设置为空，并从删除位置开始遍历数据组将不为空的数据重新通过哈希函数插入，这将避免直接设置为空给查询带来影响。另一种方法是标记法，可以将要删除的数据打上删除标记，之后查询的时遇到该标记就跳过，而插入时遇到该标记便可看为空闲的空间插入。装载因子你会发现当散列表插入的数据越来越多时，发生哈希冲突的可能将会上升，同时线性探测数据的方法的时间也会增加。极端状况下将探测整个数组，时间复杂度为O(n)。为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子(load factor)来表示空位的多少。散列表的装载因子=填入表中的元素个数/散列表的长度散列表的装载因子越大，空闲的空间越少，哈希冲突发生概率越高。 拉链法 点击查看更多 数据插入拉链法又称链表法，每一个元素不仅是一个Entry对象，还是一个链表的头节点。每一个Entry对象通过next指针指向它的下一个Entry节点。当新来的Entry映射到与之冲突的数组位置时，只需要插入到对应的链表中即可。数据查询数据查询时根据哈希函数得到index，根据链表的头结点，遍历链表找到对应key值的数据。数据删除数据删除时首先跟查询操作相同找到数据，然后做链表删除操作即可。 javasrcipt实现散列表(使用拉链法简单实现) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125class entry&#123; constructor(key,value)&#123; this.data = &#123; key : key, value : value, &#125;; this.next = null; &#125;&#125;class linkedList&#123; last = null; size = 0; constructor()&#123; this.head = new entry(); &#125; insert(entry)&#123; if(this.head.next == null)&#123; this.head.next = entry; this.last = entry; this.size++; &#125;else&#123; this.last.next = entry; this.last = entry; this.size++; &#125; &#125; delete(key)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; if(entry.next.next)&#123; entry.next = entry.next.next; &#125;else&#123; entry.next = null; &#125; if(this.last.data.key == key)&#123; this.last = entry; &#125; this.size--; return &#x27;success&#x27;; &#125;else&#123; entry = entry.next; &#125; &#125; return &#x27;fail&#x27;; &#125; find(key)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; return entry.next.data.value; &#125;else&#123; entry = entry.next; &#125; &#125; return undefined; &#125; update(key,value)&#123; var entry = this.head; while(entry.next)&#123; if(entry.next.data.key == key)&#123; entry.next.data.value = value; return &#x27;success&#x27;; &#125;else&#123; entry = entry.next; &#125; &#125; return &#x27;not found&#x27;; &#125;&#125;class hashTable&#123; #size = 10; constructor(size)&#123; this.tableArr = []; if(size)&#123; this.#size = size; &#125; for(let i = 0; i &lt; this.#size ; i++)&#123; this.tableArr[i] = new linkedList(); &#125; &#125; hashFunc(key)&#123; let hash = 0; for(let i = 0; i &lt; key.length; ++i)&#123; hash += key.charCodeAt(i); &#125; return hash % this.#size; &#125; set(key,value)&#123; let index = this.hashFunc(key); if(this.get(key) == undefined)&#123; this.tableArr[index].insert(new entry(key,value)); &#125;else&#123; this.tableArr[index].update(key,value) &#125; &#125; get(key)&#123; let index = this.hashFunc(key); return this.tableArr[index].find(key); &#125; remove(key)&#123; let index = this.hashFunc(key); this.tableArr[index].delete(key); &#125;&#125;var map = new hashTable();map.set(1,1);map.set(2,2);map.set(3,3);map.set(4,4);map.set(5,5);map.set(6,6);map.set(7,7);map.set(8,8);map.set(9,9);map.set(10,10);map.set(11,11);map.set(12,12);map.set(13,13);console.log(map.get(12));map.remove(12);console.log(map.get(12));console.log(map.get(6));map.set(6,-6);console.log(map.get(6));","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"散列表","slug":"算法/散列表","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"散列表","slug":"散列表","permalink":"https://strive087.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://strive087.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"基本概念","slug":"algorithm/基本概念","date":"2020-07-06T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/07/06/algorithm/基本概念/","link":"","permalink":"https://strive087.github.io/2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/","excerpt":"","text":"算法 在数学领域里，算法是用于解决某一类 问题的公式和思想。计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。 数据结构 数据结构是数据的组织、管理和存储格式， 其使用目的是为了高效地访问和修改数据。数据结构包含数组、链表这样的线性数据结构，也包含树、图这样的复杂数据结构。 时间复杂度 如何推导出时间复杂度呢？有如下几个原则。 如果运行时间是常数量级，则用常数1表示 只保留时间函数中的最高阶项 如果最高阶项存在，则省去最高阶项前面的系数 常见的四种时间复杂度执行时间排序：O(1)&lt;O(logn)&lt;O(n)&lt;O(n2)在编程的世界中有各种各样的算法，除了上述4个场景，还有许多不同形式的时 间复杂度，例如：O(nlogn)、O(n3)、O(mn)、O(2n)、O(n!) 空间复杂度 在运行一段程序时，我们不仅要执行各种运算指令，同时也会根据需要，存储一些临时的中间数据，以便后续指令可以更方便地继续执行。这些临时的中间数据在运行过程中所占用的内存空间自然是越小越好，那么空间复杂度便是评判其占用大小的标准。常见的空间复杂度有下面几种情形。 常量空间当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作O(1)。 线性空间当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)。 二维空间当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)。 递归空间递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)。 时间与空间的取舍 在绝大多数时候，时间复杂度更为重要一些，我们宁可多分配一些内存空间， 也要提升程序的执行速度。 最大公约数 如果数a能被数b整除，a就叫做b的倍数，b就叫做a的约数。最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b), 同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。可以在区块中放置一些复杂的结构，支持嵌套。求法： 质因数分解法 点击查看更多 把每个数分别分解质因数，再把各数中的全部公有质因数提取出来连乘，所得的积就是这几个数的最大公约数。例如：求24和60的最大公约数，先分解质因数，得24=2×2×2×3，60=2×2×3×5，24与60的全部公有的质因数是2、2、3，它们的积是2×2×3=12，所以，（24，60）=12。 短除法 点击查看更多 短除法求最大公约数，先用这几个数的公约数连续去除，一直除到所有的商互质为止，然后把所有的除数连乘起来，所得的积就是这几个数的最大公约数。 辗转相除法 点击查看更多 辗转相除法是求两个自然数的最大公约数的一种方法，也叫欧几里德算法。例如，求（319，377）：∵ 319÷377=0（余319）∴（319，377）=（377，319）；∵ 377÷319=1（余58）∴（377，319）=（319，58）；∵ 319÷58=5（余29）∴ （319，58）=（58，29）；∵ 58÷29=2（余0）∴ （58，29）= 29；∴ （319，377）=29。可以写成右边的格式。用辗转相除法求几个数的最大公约数，可以先求出其中任意两个数的最大公约数，再求这个最大公约数与第三个数的最大公约数，依次求下去，直到最后一个数为止。最后所得的那个最大公约数，就是所有这些数的最大公约数。 更相减损法 点击查看更多 更相减损法：也叫更相减损术，是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止。则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。所以更相减损法也叫等值算法。例1．用更相减损术求98与63的最大公约数。解：由于63不是偶数，把98和63以大数减小数，并辗转相减：98-63=3563-35=2835-28=728-7=2121-7=1414-7=7所以，98和63的最大公约数等于7。这个过程可以简单的写为：（98，63）=（35，63）=（35，28）=（7，28）=（7，21）=（7，14）=（7，7）=7.例2．用更相减损术求260和104的最大公约数。解：由于260和104均为偶数，首先用2约简得到130和52，再用2约简得到65和26。此时65是奇数而26不是奇数，故把65和26辗转相减：65-26=3939-26=1326-13=13所以，260与104的最大公约数等于13乘以第一步中约掉的两个2，即1322=52。这个过程可以简单地写为：（260,104）(/2/2) =&gt;（65,26）=（39,26）=（13,26）=（13,13）=13. (22) =&gt; 52 比较辗转相除法与更相减损术的区别都是求最大公因数的方法，计算上辗转相除法以除法为主，更相减损术以减法为主，计算次数上辗转相除法计算次数相对较少，特别当两个数字大小区别较大时计算次数的区别较明显。从结果体现形式来看，辗转相除法体现结果是以相除余数为0则得到，而更相减损术则以减数与差相等而得到。 物理结构与逻辑结构 常用的数据结构有很多，但大多数以数组和链表作为主要的存储方式，数组和链表可以看做数据结构的”物理结构”。 排列组合 回顾一下高中的知识,什么是排列组合？现在有一个袋子中有4个标记了不同数字的小球[0,1,2,3]，要求从袋子中不放回的取出三个。对于排列而言，顾名思义要有顺序性，也就是说小球的顺序是包含在内的，例如[0,1,2]和[1,2,0]是不同的两种可能。那么如果有n个小球，要从中取出k个，有公式如下：$$\\begin{equation}{A}_n^k = \\frac{n!}{(n-k)!}\\end{equation}$$对于组合而言，顺序是不重要的，例如[0,1,2]和[1,2,0]是一种可能，所以在计算可能性时，要除去自身重复。那么如果有n个小球，要从中取出k个，有公式如下：$$\\begin{equation}{C}_n^k = \\frac{n!}{k!*(n-k)!}\\end{equation}$$","categories":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"基本概念","slug":"算法/基本概念","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"JS的函数式编程","slug":"javascript/JS函数式编程","date":"2020-06-11T12:05:50.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/06/11/javascript/JS函数式编程/","link":"","permalink":"https://strive087.github.io/2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/","excerpt":"","text":"函数式编程特点： 函数是”第一等公民” (与变量的) 只用”表达式”，不用”语句” 没有”副作用” 不修改状态 引用透明（函数运行只靠参数） 函数curry多参数函数转化成一个嵌套的一元函数好处：一种函数的预加载的方法,相当于-缓存，保存作用域链闭包必定会有内存泄漏","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"函数式编程","slug":"javascript/函数式编程","permalink":"https://strive087.github.io/categories/javascript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"函数式编程","slug":"函数式编程","permalink":"https://strive087.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"}]},{"title":"html5陀螺仪","slug":"html5陀螺仪","date":"2020-06-10T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/06/10/html5陀螺仪/","link":"","permalink":"https://strive087.github.io/2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/","excerpt":"","text":"deviceorientation : 设备的物理方向，表示为一系列的本地坐标系旋角。devicemotion : 提供设备的重力加速信息。compassneedscalibration : 罗盘校准。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;html5陀螺仪&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;http://at.alicdn.com/t/font_1872916_9bxpvrr3gw.css&quot;&gt; &lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;h1 style=&quot;text-align: center;&quot;&gt;摇一摇有惊喜！&lt;/h1&gt; &lt;div align = &quot;center&quot;&gt; &lt;img src=&quot;https://pigbro.online:9608/images/surprise/1.jpg&quot; alt=&quot;surprise&quot;&gt; &lt;/div&gt; &lt;script&gt; //获取手机屏幕宽度 var deviceWidth = document.documentElement.clientWidth; var speed = 30; var picture = 1; var x=y=z=lastx=lasty=lastz=0; $(&#x27;img&#x27;).width(deviceWidth*0.9); var flag = true; if (window.DeviceOrientationEvent) &#123; window.addEventListener(&#x27;deviceorientation&#x27;, (event) =&gt; &#123; var x = event.beta; var y = event.gamma; var z = event.alpha; if((Math.abs(x-lastx)&gt;speed || Math.abs(y-lasty)&gt;speed || Math.abs(z-lastz)&gt;speed) &amp;&amp; flag)&#123; if(++picture &gt; 7)&#123; picture = 1; &#125; $(&#x27;img&#x27;).attr(&#x27;src&#x27;,&#x27;https://pigbro.online:9608/images/surprise/&#x27;+picture+&#x27;.jpg&#x27;); flag = false; &#125; lastx = x; lasty = y; lastz = z; &#125;); wi &#125; $(&#x27;img&#x27;).on(&#x27;load&#x27;, function() &#123; setTimeout(function()&#123; flag = true; &#125;,1000); &#125;); &lt;/script&gt;&lt;/body&gt;&lt;/html&gt;","categories":[{"name":"html","slug":"html","permalink":"https://strive087.github.io/categories/html/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/tags/html/"},{"name":"html5","slug":"html5","permalink":"https://strive087.github.io/tags/html5/"}]},{"title":"JS的作用域","slug":"javascript/JS的词法作用域","date":"2020-06-10T23:05:49.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/06/10/javascript/JS的词法作用域/","link":"","permalink":"https://strive087.github.io/2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/","excerpt":"","text":"作用域 其实作用域就是一套用来存储变量以及快速查找变量的一套的规则。分为全局、函数、块级作用域这三种。块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建： 在一个函数内部 在一个代码块（由一对花括号包裹）内部 作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。 词法作用域 关于自由变量的取值 1234567891011var x = 10function fn() &#123; console.log(x)&#125;function show(f) &#123; var x = 20 (function() &#123; f() //10，而不是20 &#125;)()&#125;show(fn) 在fn函数中，取自由变量x的值时，要到哪个作用域中取？——要到创建fn函数的那个作用域中取，无论fn函数将在哪里调用。 1234567891011var a = 10function fn() &#123; var b = 20 function bar() &#123; console.log(a + b) //30 &#125; return bar&#125;var x = fn(), b = 200x() //bar() fn()返回的是bar函数，赋值给x。执行x()，即执行bar函数代码。取b的值时，直接在fn作用域取出。取a的值时，试图在fn作用域取，但是取不到，只能转向创建fn的那个作用域中去查找，结果找到了,所以最后的结果是30","categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"作用域","slug":"javascript/作用域","permalink":"https://strive087.github.io/categories/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"作用域","slug":"作用域","permalink":"https://strive087.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"}]},{"title":"npm切换镜像源","slug":"npm","date":"2020-06-07T12:20:35.000Z","updated":"2020-09-23T06:29:03.461Z","comments":true,"path":"2020/06/07/npm/","link":"","permalink":"https://strive087.github.io/2020/06/07/npm/","excerpt":"","text":"手动切换npm源 切换为淘宝镜像npm install cnpm 1.临时使用npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express; 2.持久使用 npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org 3.通过 cnpm npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org 切换官方镜像npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F; 查看当前 npm 源地址npm config get registry nrm切换npm源 通过 nrm 设置 npm 源npm install -g nrmnrm lsnrm use npm设置代理 npm 代理:npm config set proxy http://127.0.0.1:1087npm config set https-proxy http://127.0.0.1:1087npm config set proxy socks5://127.0.0.1:1080npm config set https-proxy socks5://127.0.0.1:1080 取消代理:npm config delete proxynpm config delete https-proxy","categories":[{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]}],"categories":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/categories/javascript/"},{"name":"node","slug":"javascript/node","permalink":"https://strive087.github.io/categories/javascript/node/"},{"name":"webpack","slug":"javascript/node/webpack","permalink":"https://strive087.github.io/categories/javascript/node/webpack/"},{"name":"RegExp","slug":"javascript/RegExp","permalink":"https://strive087.github.io/categories/javascript/RegExp/"},{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"算法/二叉树","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"散列表","slug":"算法/散列表","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"基本概念","slug":"算法/基本概念","permalink":"https://strive087.github.io/categories/%E7%AE%97%E6%B3%95/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"},{"name":"函数式编程","slug":"javascript/函数式编程","permalink":"https://strive087.github.io/categories/javascript/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/categories/html/"},{"name":"作用域","slug":"javascript/作用域","permalink":"https://strive087.github.io/categories/javascript/%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"name":"nodeJs","slug":"nodeJs","permalink":"https://strive087.github.io/categories/nodeJs/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://strive087.github.io/tags/javascript/"},{"name":"node","slug":"node","permalink":"https://strive087.github.io/tags/node/"},{"name":"webpack","slug":"webpack","permalink":"https://strive087.github.io/tags/webpack/"},{"name":"xhr","slug":"xhr","permalink":"https://strive087.github.io/tags/xhr/"},{"name":"this","slug":"this","permalink":"https://strive087.github.io/tags/this/"},{"name":"es6","slug":"es6","permalink":"https://strive087.github.io/tags/es6/"},{"name":"RegExp","slug":"RegExp","permalink":"https://strive087.github.io/tags/RegExp/"},{"name":"算法","slug":"算法","permalink":"https://strive087.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"二叉树","slug":"二叉树","permalink":"https://strive087.github.io/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"},{"name":"散列表","slug":"散列表","permalink":"https://strive087.github.io/tags/%E6%95%A3%E5%88%97%E8%A1%A8/"},{"name":"哈希表","slug":"哈希表","permalink":"https://strive087.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"函数式编程","slug":"函数式编程","permalink":"https://strive087.github.io/tags/%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"},{"name":"html","slug":"html","permalink":"https://strive087.github.io/tags/html/"},{"name":"html5","slug":"html5","permalink":"https://strive087.github.io/tags/html5/"},{"name":"作用域","slug":"作用域","permalink":"https://strive087.github.io/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F/"},{"name":"npm","slug":"npm","permalink":"https://strive087.github.io/tags/npm/"},{"name":"nodejs","slug":"nodejs","permalink":"https://strive087.github.io/tags/nodejs/"}]}