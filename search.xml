<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="2020/11/03/javascript/CORS%E8%B7%A8%E5%9F%9F/"/>
      <url>2020/11/03/javascript/CORS%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/11/03/node/koa2/%E8%B7%AF%E7%94%B1/"/>
      <url>2020/11/03/node/koa2/%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>/about -&gt;<br>后端 /about -&gt;<br>404 -&gt;<br>Fallback -&gt;<br>后端 / -&gt;<br>vue 页面 -&gt;<br>页面上 url是 /about -&gt;<br>vue-router -&gt;<br>/about</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/11/03/javascript/Web%20Worker/"/>
      <url>2020/11/03/javascript/Web%20Worker/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2020/11/03/javascript/ES6/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
      <url>2020/11/03/javascript/ES6/%E5%8F%98%E9%87%8F%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>双精度浮点数</title>
      <link href="2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>js中的数字</p><p>JavaScript中所有的数字，无论是整数还是小数，其类型均为Number。在程序内部，Number类型的实质是一个64位的浮点数，这与Java中double类型的浮点数是一致的；因此，JavaScript中所有的数都是浮点数。遵循IEEE 754标准（浮点数算术标准），JavaScript所能表示的数值范围为正负1.7976931348623157乘以10的308次方，其最小所能表示的小数为正负5乘以10的负324次方，这两个边界值可以分别通过访问Number对象的MAX_VALUE属性和MIN_VALUE属性来获取。</p><p class='p subtitle'>EEE 754标准</p><p>IEEE 754浮点数的三个域如下图所示:</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/qV74Bn.png' style='width:500px'><ul><li>sign(1bit):符号位</li><li>exponent(11bit):阶数 (阶数 = 指数+偏置量(对于双精度来说，其规定的偏置量为1023))</li><li>fraction(52bit):有效数字<br>例如:二进制数0.0101,此时可以表示为1.01*2^-2:</li><li>sign: 0</li><li>exponent: 1111111101  (1021)</li><li>fraction: 010000…00 (1.01 存储有效数字时，将不会存储小数点前面的1)</li></ul><p>十进制数为0.3125,转化为十进制的公式：</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/8cc994c808feffcdacec43ad2f6bee8b.svg' style='width:500px'>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浮点数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E8%BF%9B%E5%88%B6/"/>
      <url>2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E8%BF%9B%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>二/八/十六进制数表示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="number">0b101</span>;  <span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">var</span> num8 = <span class="number">0765</span>;  <span class="comment">//八进制</span></span><br><span class="line"><span class="keyword">var</span> num16 = <span class="number">0xFA37</span>;  <span class="comment">//十六进制</span></span><br><span class="line"><span class="built_in">console</span>.log(num2)</span><br><span class="line"><span class="built_in">console</span>.log(num8)</span><br><span class="line"><span class="built_in">console</span>.log(num16)</span><br></pre></td></tr></table></figure><p class='p subtitle'>二/八/十六进制转十进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num2 = <span class="string">&#x27;101&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num8 = <span class="string">&#x27;765&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> num16 = <span class="string">&#x27;FA37&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 0b101 = (2^2)*1 + (2^1)*0 + (2^0)*1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;二进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num2,<span class="number">2</span>));</span><br><span class="line"><span class="comment">//0765 = (8^2)*7 + (8^1)*6 + (8^0)*5</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;八进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num8,<span class="number">8</span>));</span><br><span class="line"><span class="comment">//0xFA37 = (16^3)*15 + (16^2)*10 + (16^1)*3 + (16^0)*7</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十六进制转十进制:&#x27;</span>,<span class="built_in">parseInt</span>(num16,<span class="number">16</span>));</span><br></pre></td></tr></table></figure><p class='p subtitle'>十进制转二/八/十六进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num10 = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转二进制:&#x27;</span>,num10.toString(<span class="number">2</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转八进制:&#x27;</span>,num10.toString(<span class="number">8</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;十进制数转十六进制:&#x27;</span>,num10.toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算的应用</title>
      <link href="2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
      <url>2020/11/01/javascript/%E8%BF%90%E7%AE%97/%E4%BD%8D%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>js中的位操作符</p><p>1.~  (按位非)<br>2.&amp;  (按位与)<br>3.|  (按位或)<br>4.^  (按位异或)<br>5.&lt;&lt;  (左移)<br>6.&gt;&gt;  (有符号右移)<br>7.&gt;&gt;&gt;  (无符号右移)</p><p class='p subtitle'>~ (按位非)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1反码二进制表示: 11111111 11111111 11111111 11111110</span></span><br><span class="line"><span class="comment">// 由于第一位（符号位）是1，所以这个数是一个负数。JavaScript 内部采用补码形式表示负数，即需要将这个数减去1，再取一次反，然后加上负号，才能得到这个负数对应的10进制值。</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1的反码减1：     11111111 11111111 11111111 11111101</span></span><br><span class="line"><span class="comment">// 反码取反：       00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="comment">// 表示为10进制加负号：-2</span></span><br><span class="line"><span class="built_in">console</span>.log(~ <span class="number">1</span>)     <span class="comment">// -2</span></span><br><span class="line"><span class="comment">//可以简单可以理解为-(num-1)</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>& (按位与)</p><p>&amp;以特定的方式组合操作二进制数中对应的位，如果对应的位都为1，那么结果就是1， 如果任意一个位是0 则结果就是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &amp; <span class="number">3</span>)     <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>| (按位或)</p><p>| 运算符跟 &amp; 的区别在于如果对应的位中任一个操作数为1 那么结果就是1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> | <span class="number">3</span>)     <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>^ (按位异或)</p><p>^ 如果对应两个操作位有且仅有一个1时结果为1，其他都是0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// 3的二进制表示为: 00000000 00000000 00000000 00000011</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> ^ <span class="number">3</span>)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p class='p subtitle'><< (左移)</p><p>&lt;&lt;运算符使指定值的二进制数所有位都左移指定次数，其移动规则：丢弃高位，低位补0即按二进制形式把所有的数字向左移动对应的位数，高位移出(舍弃)，低位的空位补零。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 2的二进制表示为: 00000000 00000000 00000000 00000010</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &lt;&lt; <span class="number">1</span>)     <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>>> (有符号右移)</p><p>&gt;&gt;该操作符会将指定操作数的二进制位向右移动指定的位数。向右被移出的位被丢弃，拷贝最左侧的位以填充左侧。由于新的最左侧的位总是和以前相同，符号位没有被改变。所以被称作“符号传播”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1的二进制表示为: 00000000 00000000 00000000 00000001</span></span><br><span class="line"><span class="comment">// -----------------------------</span></span><br><span class="line"><span class="comment">// 0的二进制表示为: 00000000 00000000 00000000 00000000</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> &gt;&gt; <span class="number">1</span>)     <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>>>> (无符号右移)</p><p>&gt;&gt;&gt;该操作符会将第一个操作数向右移动指定的位数。向右被移出的位被丢弃，左侧用0填充。因为符号位变成了 0，所以结果总是非负的。（译注：即便右移 0 个比特，结果也是非负的。）<br>对于非负数，有符号右移和无符号右移总是返回相同的结果。例如， 9 &gt;&gt;&gt; 2 得到 2 和 9 &gt;&gt; 2 相同。</p><p class='p subtitle'>位操作符的常见应用</p><p>1.使用&amp;运算符判断一个数的奇偶<br>2.使用~, &gt;&gt;, &lt;&lt;, &gt;&gt;&gt;, |来取整<br>3.使用^来完成值交换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">8</span></span><br><span class="line">a ^= b</span><br><span class="line">b ^= a</span><br><span class="line">a ^= b</span><br><span class="line"><span class="built_in">console</span>.log(a)   <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(b)   <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>4.使用&amp;, &gt;&gt;, |来完成rgb值和16进制颜色值之间的转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 16进制颜色值转RGB</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>hex 16进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>RGB颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">hexToRGB</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hexx = hex.replace(<span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> r = hexx &gt;&gt; <span class="number">16</span></span><br><span class="line">    <span class="keyword">var</span> g = hexx &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">var</span> b = hexx &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`rgb(<span class="subst">$&#123;r&#125;</span>, <span class="subst">$&#123;g&#125;</span>, <span class="subst">$&#123;b&#125;</span>)`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RGB颜色转16进制颜色</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param  <span class="type">&#123;String&#125;</span> </span>rgb RGB进制颜色字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;String&#125;</span>     </span>16进制颜色字符串</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">RGBToHex</span>(<span class="params">rgb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgbArr = rgb.split(<span class="regexp">/[^\d]+/</span>)</span><br><span class="line">    <span class="keyword">var</span> color = rgbArr[<span class="number">1</span>]&lt;&lt;<span class="number">16</span> | rgbArr[<span class="number">2</span>]&lt;&lt;<span class="number">8</span> | rgbArr[<span class="number">3</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;#&#x27;</span>+ color.toString(<span class="number">16</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -------------------------------------------------</span></span><br><span class="line">hexToRGB(<span class="string">&#x27;#ffffff&#x27;</span>)               <span class="comment">// &#x27;rgb(255,255,255)&#x27;</span></span><br><span class="line">RGBToHex(<span class="string">&#x27;rgb(255,255,255)&#x27;</span>)      <span class="comment">// &#x27;#ffffff&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 运算 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是React SSR</title>
      <link href="2020/10/28/framework/react_ssr/"/>
      <url>2020/10/28/framework/react_ssr/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>什么是React SSR</p><p>React SSR也就是指融合了单页面应用的优点以及服务端渲染的优点进行互补,做到切页SPA刷新SSR<br>优点:</p><p>1.SEO友好</p><p>2.首页加载速度快</p><p>3.页面切页快</p><p>缺点:</p><p>1.配置复杂</p><p>2.服务器压力相对较大,但比传统的服务器端压力小</p><p>3.部分开发受限,比如ComponentDidMount</p>]]></content>
      
      
      <categories>
          
          <category> framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于SPA/MPA和SSR/CSR</title>
      <link href="2020/10/27/framework/spa_mpa_ssr/"/>
      <url>2020/10/27/framework/spa_mpa_ssr/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>什么是SPA</p><p>SPA也就是单页面应用,通过ajax和前端渲染更新页面部分内容而不是进行整体页面加载</p><p class='p subtitle'>什么是MPA</p><p>MPA也就是多页面应用,不同的内容来自不同的页面,需要整也加载(不同网址)</p><p class='p subtitle'>什么是SSR</p><p>SSR也就是服务器端渲染,将完整的html内容发送到前端,网页需要重新加载,相对于SPA单页应用他有如下几个优势:</p><p>1.首屏加载时间快(ssr可从服务端直出页面)</p><p>2.SEO友好(由于搜索引擎需要爬虫抓去html中的关键字,而spa依靠虚拟dom挂载所以爬虫无法获取,除了google等一些搜索引擎能够去抓取js中的关键字)</p><p>当然ssr也有很明显的劣势:</p><p>1.页面体验不够友好(相对无spa快速切页,由于ssr每次切页都要从服务端渲染页面,所以会造成卡顿延迟)</p><p>2.可见不一定可操作(因为js可能还在执行)</p><p>3.服务器压力大</p><p class='p subtitle'>什么是CSR</p><p>CSR指的是前端渲染,常是前端请求后端获取数据后通过js更新页面内容</p>]]></content>
      
      
      <categories>
          
          <category> framework </category>
          
      </categories>
      
      
        <tags>
            
            <tag> framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack4.x/5.x源码分析1</title>
      <link href="2020/10/25/webpack/wepack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/"/>
      <url>2020/10/25/webpack/wepack%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>单文件输出分析</p><p>1.webpack4.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">modules</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> installedModules = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__webpack_require__</span>(<span class="params">moduleId</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">if</span> (installedModules[moduleId]) &#123;</span><br><span class="line">      <span class="keyword">return</span> installedModules[moduleId].exports;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="built_in">module</span> = (installedModules[moduleId] = &#123;</span><br><span class="line">      i: moduleId,</span><br><span class="line">      l: <span class="literal">false</span>,</span><br><span class="line">      <span class="built_in">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    modules[moduleId].call(</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      <span class="built_in">module</span>,</span><br><span class="line">      <span class="built_in">module</span>.exports,</span><br><span class="line">      __webpack_require__</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Flag the module as loaded</span></span><br><span class="line">    <span class="built_in">module</span>.l = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="keyword">return</span> __webpack_require__((__webpack_require__.s = <span class="string">&#x27;./src/index.js&#x27;</span>));</span><br><span class="line">&#125;)(&#123;<span class="comment">//立即执行函数传入一个对象,以文件路径为属性名,函数体为值</span></span><br><span class="line">  <span class="string">&#x27;./src/index.js&#x27;</span>: <span class="function"><span class="keyword">function</span> (<span class="params">module, exports</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;zhuduanlei&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>从上面代码可以得知首先调用立即执行函数,然后函数体内会创建一个缓存对象,然后对判断缓存对象中是否存在传入的module,存在就返回,不存在就创建一个module,模拟commonJS的export,然后存入缓存中,最后通过call执行mudule中的函数,返回mudule.export;</p><p>2.webpack5.x</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">&#x27;console.log(zhuduanlei)&#x27;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>由于现代浏览器的普及,在webpack5中便直接将源代码进行输出执行</p><p class='p subtitle'>多文件输出分析</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue面试题</title>
      <link href="2020/10/18/vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2020/10/18/vue/vue%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>runtime和完整版这两个版本的区别</p><p>答:最明显的就是大小的区别,还有就是编译的时机不同，完整版同时包含编译器和运行时的版本,编译器是运行时编译，性能会有一定的损耗；运行时版本是借助loader做的离线编译，运行性能更高。</p><ul><li>编译器：用来将模板字符串编译成为 JavaScript 渲染函数的代码</li><li>运行时：用来创建 Vue 实例、渲染并处理虚拟 DOM 等的代码。基本上就是除去编译器的其它一切</li></ul><p class='p subtitle'>methods内的方法可以使用箭头函数么，会造成什么样的结果</p><p>答:是不可以使用箭头函数的，因为箭头函数的this是定义时就绑定的。在vue的内部，methods内每个方法的上下文是当前的vm组件实例，methods[key].bind(vm)，而如果使用使用箭头函数，函数的上下文就变成了父级的上下文，也就是undefined了，结果就是通过undefined访问任何变量都会报错。</p><p class='p subtitle'>请问可以在beforeCreate钩子内通过this访问到data中定义的变量么，为什么以及请问这个钩子可以做什么？</p><p>答:是不可以直接访问的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$options.data()方法获得。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码分析-created之前</title>
      <link href="2020/10/16/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/"/>
      <url>2020/10/16/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%902/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>initInjections(vm)方法</p><p>主要作用是初始化inject，可以访问到对应的依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initInjections</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = resolveInject(vm.$options.inject, vm) <span class="comment">// 找结果</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveInject</span> (<span class="params">inject, vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inject) &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="built_in">Object</span>.create(<span class="literal">null</span>)</span><br><span class="line">    <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(inject)  <span class="comment">//省略Symbol情况</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keys.length; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> key = keys[i]</span><br><span class="line">      <span class="keyword">const</span> provideKey = inject[key].from</span><br><span class="line">      <span class="keyword">let</span> source = vm</span><br><span class="line">      <span class="keyword">while</span> (source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source._provided &amp;&amp; hasOwn(source._provided, provideKey)) &#123; <span class="comment">//hasOwn为是否有</span></span><br><span class="line">          result[key] = source._provided[provideKey]</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">        source = source.$parent</span><br><span class="line">      &#125;</span><br><span class="line">    ... vue@<span class="number">2.5</span>后新增设置inject默认参数相关逻辑</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>source就是当前的实例，而source._provided内保存的就是当前provide提供的值。首先从当前实例查找，接着将它的父组件实例赋值给source，在它的父组件查找。找到后使用break跳出循环，将搜索的结果赋值给result，接着查找下一个。由于vue是组件式的,所以会先初始化父组件再初始化子组件,所以是先初始化inject再初始化provide</p><p class='p subtitle'>initState(vm)方法</p><p>初始化会被使用到的状态，状态包括props，methods，data，computed，watch五个选项。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initState</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> opts = vm.$options</span><br><span class="line">  <span class="keyword">if</span>(opts.props) initProps(vm, opts.props)</span><br><span class="line">  <span class="keyword">if</span>(opts.methods) initMethods(vm, opts.methods)</span><br><span class="line">  <span class="keyword">if</span>(opts.data) initData(vm)</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span>(opts.computed) initComputed(vm, opts.computed)</span><br><span class="line">  <span class="keyword">if</span>(opts.watch &amp;&amp; opts.watch !== nativeWatch) &#123;</span><br><span class="line">    initWatch(vm, opts.watch)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>initProps (vm, propsOptions)<br>主要作用是检测子组件接受的值是否符合规则，以及让对应的值可以用this直接访问。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initProps</span>(<span class="params">vm, propsOptions</span>) </span>&#123;  <span class="comment">// 第二个参数为验证规则</span></span><br><span class="line">  <span class="keyword">const</span> propsData = vm.$options.propsData || &#123;&#125;  <span class="comment">// props具体的值</span></span><br><span class="line">  <span class="keyword">const</span> props = vm._props = &#123;&#125;  <span class="comment">// 存放props</span></span><br><span class="line">  <span class="keyword">const</span> isRoot = !vm.$parent <span class="comment">// 是否是根节点</span></span><br><span class="line">  <span class="keyword">if</span> (!isRoot) &#123;</span><br><span class="line">    toggleObserving(<span class="literal">false</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> propsOptions) &#123;</span><br><span class="line">    <span class="keyword">const</span> value = validateProp(key, propsOptions, propsData, vm)</span><br><span class="line">    defineReactive(props, key, value)</span><br><span class="line">    <span class="keyword">if</span> (!(key <span class="keyword">in</span> vm)) &#123;</span><br><span class="line">      proxy(vm, <span class="string">`_props`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  toggleObserving(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>props是作为父组件向子组件通信的重要方式，而initProps内的第二个参数propsOptions，就是当前实例也就是通信角色里的子组件，它所定义的接受参数的规则。子组件的props规则是可以使用数组形式的定义的，不过再经过合并options之后会被格式化为对象的形式。所以在定义props规则时，直接使用对象格式吧，这也是更好的书写规范。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">target, sourceKey, key</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(target, key, &#123;</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>[sourceKey][key]</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>[sourceKey][key] = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里vue内部做了一层代理，将对this.name的访问转而为对this._props.name的访问。</p><p>2.initMethods (vm, methods)<br>主要作用是将methods内的方法挂载到this下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initMethods</span>(<span class="params">vm, methods</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">const</span> key <span class="keyword">in</span> methods) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(methods[key] == <span class="literal">null</span>) &#123;  <span class="comment">// methods[key] === null || methods[key] === undefined 的简写</span></span><br><span class="line">      warn(<span class="string">`只定义了key而没有相应的value`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      warn(<span class="string">`方法名和props的key重名了`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((key <span class="keyword">in</span> vm) &amp;&amp; isReserved(key)) &#123;</span><br><span class="line">      warn(<span class="string">`方法名已经存在而且以_或$开头`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    vm[key] = methods[key] == <span class="literal">null</span></span><br><span class="line">      ? noop  <span class="comment">// 空函数</span></span><br><span class="line">      : bind(methods[key], vm)  <span class="comment">//  相当于methods[key].bind(vm)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.initData(vm)<br>主要作用是初始化data，挂载到this下。有个重要的点，之所以data内的数据是响应式的，是在这里初始化的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initData</span> (<span class="params">vm: Component</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> data = vm.$options.data</span><br><span class="line">  data = vm._data = <span class="keyword">typeof</span> data === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">    ? getData(data, vm) <span class="comment">// 通过data.call(vm, vm)得到返回的对象</span></span><br><span class="line">    : data || &#123;&#125;</span><br><span class="line">  <span class="keyword">if</span> (!isPlainObject(data)) &#123; <span class="comment">// 如果不是一个对象格式</span></span><br><span class="line">    data = &#123;&#125;</span><br><span class="line">    warn(<span class="string">`data得是一个对象`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(data)</span><br><span class="line">  <span class="keyword">const</span> props = vm.$options.props  <span class="comment">// 得到props</span></span><br><span class="line">  <span class="keyword">const</span> methods = vm.$options.methods  <span class="comment">// 得到methods</span></span><br><span class="line">  <span class="keyword">let</span> i = keys.length</span><br><span class="line">  <span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (methods &amp;&amp; hasOwn(methods, key)) &#123;</span><br><span class="line">      warn(<span class="string">`和methods内的方法重名了`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (props &amp;&amp; hasOwn(props, key)) &#123;</span><br><span class="line">      warn(<span class="string">`和props内的key重名了`</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!isReserved(key)) &#123; <span class="comment">// key不能以_或$开头</span></span><br><span class="line">      proxy(vm, <span class="string">`_data`</span>, key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  observe(data, <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>initProvide(vm)方法</p><p>主要作用是初始化provide为子组件提供依赖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initProvide</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> provide = vm.$options.provide</span><br><span class="line">  <span class="keyword">if</span> (provide) &#123;</span><br><span class="line">    vm._provided = <span class="keyword">typeof</span> provide === <span class="string">&#x27;function&#x27;</span></span><br><span class="line">      ? provide.call(vm)</span><br><span class="line">      : provide</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>provide选项应该是一个对象或是函数，所以对它取值即可，就像取data内的值类似</p><p class='p subtitle'>callHook-created</p><p>执行用户定义的created钩子函数，有mixin混入的也一并执行。</p><p>分别用一句话来介绍它们主要都干了什么事：</p><ul><li>initInjections(vm)：让子组件inject的项可以访问到正确的值</li><li>initState(vm)：将组件定义的状态挂载到this下。</li><li>initProvide(vm)：初始化父组件提供的provide依赖。</li><li>created：执行组件的created钩子函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解vue组件缓存</title>
      <link href="2020/10/15/vue/%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98/"/>
      <url>2020/10/15/vue/%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件基础知识</title>
      <link href="2020/10/14/vue/%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86/"/>
      <url>2020/10/14/vue/%E7%BB%84%E4%BB%B6%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>全局组件和局部组件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;test&#x27;</span>, &#123;...&#125;);  </span><br><span class="line"><span class="comment">//局部组件</span></span><br><span class="line"><span class="keyword">const</span> test = &#123;...&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  ...</span><br><span class="line">  components:&#123;</span><br><span class="line">    test</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>全局组件相对对于局部组件而言,全局组件及时没有使用也会被webpack等打包工具打包起来,无法进行tree shaking</p><p class='p subtitle'>组件间通信</p><p>1.父组件向子组件通信</p><ul><li>v-bind: props 值传递</li><li>$parent 非值传递</li></ul><p>2.子组件向父组件通信</p><ul><li>$emit v-on: 事件传值</li><li>$children 非值传递</li></ul><p>3.兄弟组件通信</p><ul><li>bus中央事件总线 将bus挂载至vue根实例的原型上 注册的bus要及时销毁</li><li>Vuex 状态管理 适合中大型项目</li><li>通过父组件监听后传值给子组件</li></ul><p>4.多层嵌套传值</p><ul><li>provide/inject 依赖注入传值 适合高阶组件/组件库使用,不建议直接在应用代码中使用</li><li>v-bind: $attrs 使用inheritAttrs是否隐藏v-bind:</li></ul><p class='p subtitle'>插槽</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:footer</span>=<span class="string">&quot;slotVal&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span> footer <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//子组件匿名</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;footer&quot;</span> <span class="attr">:slotVal</span>=<span class="string">&quot;slotVal&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.匿名插槽和具名插槽</p><ul><li>匿名插槽可以转换为具名插槽:v-slot:default</li><li>v-slot必须使用在template标签上</li></ul><p>2.作用域插槽<br>可以让插槽获取子组件的数据</p><p class='p subtitle'>动态组件以及组件缓存</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;componentName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">components</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用componentName来切换组件,使用&lt;keep-alive&gt;标签可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存。<br>和 &lt;transition&gt; 相似，&lt;keep-alive&gt; 是一个抽象组件：它自身不会渲染一个 DOM 元素，也不会出现在父组件链中。</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码分析-beforeCreate之前</title>
      <link href="2020/10/13/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/"/>
      <url>2020/10/13/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%901/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>_init()方法</p><p>该_init 方法在 initMixin 中定义,_init 方法执行了一系列初始化操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> uid = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">Vue.prototype._init = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vm = <span class="built_in">this</span></span><br><span class="line">vm._uid = uid++ <span class="comment">// 唯一标识</span></span><br><span class="line"></span><br><span class="line">vm.$options = mergeOptions(  <span class="comment">// 合并options</span></span><br><span class="line">    resolveConstructorOptions(vm.constructor),</span><br><span class="line">    options || &#123;&#125;,</span><br><span class="line">    vm</span><br><span class="line">  )</span><br><span class="line">  ...</span><br><span class="line">  initLifecycle(vm) <span class="comment">// 开始一系列的初始化</span></span><br><span class="line">  initEvents(vm)</span><br><span class="line">  initRender(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;beforeCreate&#x27;</span>)</span><br><span class="line">  initInjections(vm)</span><br><span class="line">  initState(vm)</span><br><span class="line">  initProvide(vm)</span><br><span class="line">  callHook(vm, <span class="string">&#x27;created&#x27;</span>)</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">if</span> (vm.$options.el) &#123;</span><br><span class="line">    vm.$mount(vm.$options.el)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先需要交代下，每一个组件都是一个Vue构造函数的子类，这个之后会说明为何如此。从上往下我们一步步看，首先会定义_uid属性，这是为每个组件每一次初始化时做的一个唯一的私有属性标识，有时候会有些作用。</p><p class='p subtitle'>合并options</p><p>回到主线任务，接着会合并options并在实例上挂载一个$options属性。这里是分两种情况的：</p><p>1.初始化new Vue</p><p>在执行new Vue构造函数时，参数就是一个对象，也就是用户的自定义配置；会将它和vue之前定义的原型方法，全局API属性；还有全局的Vue.mixin内的参数，将这些都合并成为一个新的options，最后赋值给一个的新的属性$options。</p><p>2.子组件初始化</p><p>如果是子组件初始化，除了合并以上那些外，还会将父组件的参数进行合并，如有父组件定义在子组件上的event、props等等。<br>经过合并之后就可以通过this.$options.data访问到用户定义的data函数，this.$options.name访问到用户定义的组件名称，这个合并后的属性很重要，会被经常使用到。</p><p class='p subtitle'>initLifecycle</p><p>initLifecycle(vm): 主要作用是确认组件的父子关系和初始化某些实例属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initLifecycle</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> options = vm.$options  <span class="comment">// 之前合并的属性</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">let</span> parent = options.parent;</span><br><span class="line">  <span class="keyword">if</span> (parent &amp;&amp; !options.abstract) &#123; <span class="comment">//  找到第一个非抽象父组件</span></span><br><span class="line">    <span class="keyword">while</span> (parent.$options.abstract &amp;&amp; parent.$parent) &#123;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    parent.$children.push(vm)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  vm.$parent = parent  <span class="comment">// 找到后赋值</span></span><br><span class="line">  vm.$root = parent ? parent.$root : vm  <span class="comment">// 让每一个子组件的$root属性都是根组件</span></span><br><span class="line">  </span><br><span class="line">  vm.$children = []</span><br><span class="line">  vm.$refs = &#123;&#125;</span><br><span class="line">  </span><br><span class="line">  vm._watcher = <span class="literal">null</span></span><br><span class="line">  ...</span><br><span class="line">  vm._isDestroyed = <span class="literal">false</span></span><br><span class="line">  vm._isBeingDestroyed = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>initEvents</p><p>initEvents(vm): 主要作用是将父组件在使用v-on或@注册的自定义事件添加到子组件的事件中心中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initEvents</span> (<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._events = <span class="built_in">Object</span>.create(<span class="literal">null</span>)  <span class="comment">// 事件中心</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> listeners = vm.$options._parentListeners  <span class="comment">// 经过合并options得到的</span></span><br><span class="line">  <span class="keyword">if</span> (listeners) &#123;</span><br><span class="line">    updateComponentListeners(vm, listeners) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在经历过合并options阶段后，子组件就可以从vm.$options._parentListeners读取到父组件传过来的自定义事件：<br>&lt;child-components @select=’handleSelect’ /&gt;<br>复制代码传过来的事件数据格式是{select:function(){}}这样的，在initEvents方法内定义vm._events用来存储传过来的事件集合。<br>内部执行的方法updateComponentListeners(vm, listeners)主要是执行updateListeners方法。这个方法有两个执行时机，首先是现在的初始化阶段，还一个就是最后patch时的原生事件也会用到。它的作用是比较新旧事件的列表来确定事件的添加和移除以及事件修饰符的处理，现在主要看自定义事件的添加，它的作用是借助之前定义的$on，$emit方法，完成父子组件事件的通信，(详细的原理说明会在之后的全局API章节统一说明)。首先使用$on往vm.events事件中心下创建一个自定义事件名的数组集合项，数组内的每一项都是对应事件名的回调函数，例如：<br>vm._events.select = [function handleSelect(){}, …]  // 可以有多个<br>复制代码注册完成之后，使用$emit方法执行事件：<br>this.$emit(‘select’)<br>复制代码首先会读取到事件中心内$emit方法第一个参数select的对象的数组集合，然后将数组内每个回调函数顺序执行一遍即完成了$emit做的事情。</p><p class='p subtitle'>initRender</p><p>initRender(vm): 主要作用是挂载可以将render函数转为vnode的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initRender</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  vm._vnode = <span class="literal">null</span></span><br><span class="line">  ...</span><br><span class="line">  vm._c = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">false</span>)  <span class="comment">//转化编译器的</span></span><br><span class="line">  vm.$createElement = <span class="function">(<span class="params">a, b, c, d</span>) =&gt;</span> createElement(vm, a, b, c, d, <span class="literal">true</span>)  <span class="comment">// 转化手写的</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要作用是挂载vm._c和vm.$createElement两个方法，它们只是最后一个参数不同，这两个方法都可以将render函数转为vnode，从命名大家应该可以看出区别，vm._c转换的是通过编译器将template转换而来的render函数；而vm.$createElement转换的是用户自定义的render函数,例如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">&#x27;hello Vue!&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render(h) &#123; <span class="comment">// 这里的 h 就是vm.$createElement</span></span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;span&#x27;</span>, <span class="built_in">this</span>.msg);  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>callHook-beforeCreate</p><p>在beforeCreate钩子内通过this是不可以访问到data中定义的变量的，因为在vue初始化阶段，这个时候data中的变量还没有被挂载到this上，这个时候访问值会是undefined。不过可以通过this.$option.data()进行访问。beforeCreate这个钩子在平时业务开发中用的比较少，而像插件内部的instanll方法通过Vue.use方法安装时一般会选在beforeCreate这个钩子内执行，vue-router和vuex就是这么干的。</p><p>实例的第一个生命周期钩子阶段的初始化工作完成了，一句话来主要说明下他们做了什么事情：</p><ul><li>initLifecycle(vm)：确认组件(也是vue实例)的父子关系</li><li>initEvents(vm)：将父组件的自定义事件传递给子组件</li><li>initRender(vm)：提供将render函数转为vnode的方法</li><li>beforeCreate：执行组件的beforeCreate钩子函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue源码分析-Vue实例创建</title>
      <link href="2020/10/12/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/"/>
      <url>2020/10/12/vue/vue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%900/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>vue实例的生成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; initMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./init&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; stateMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./state&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; renderMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./render&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; eventsMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./events&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; lifecycleMixin &#125; <span class="keyword">from</span> <span class="string">&#x27;./lifecycle&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">...</span><br><span class="line"><span class="built_in">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br></pre></td></tr></table></figure><p>Vue 不采用 ES6 的 class 来定义，因为这样可以方便的把 vue 的功能拆分到不同的目录中去维护，将 vue 的构造函数传入到以下方法内：</p><ul><li>initMixin(Vue)：定义_init 方法。</li><li>stateMixin(Vue)：定义数据相关的方法$set,$delete,$watch 方法。</li><li>eventsMixin(Vue)：定义事件相关的方法$on，$once，$off，$emit。</li><li>lifecycleMixin(Vue)：定义_update，及生命周期相关的$forceUpdate 和$destroy。</li><li>renderMixin(Vue)：定义$nextTick，_render 将 render 函数转为 vnode。</li></ul><p>这些方法都是在各自的文件内维护的，从而让代码结构更加清晰易懂可维护。</p><p>在再这些 xxxMixin 完成后，接着会定义一些全局的 API:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">initGlobalAPI</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">Vue.set 方法</span><br><span class="line">Vue.delete 方法</span><br><span class="line">Vue.nextTick 方法</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">内置组件：</span><br><span class="line">keep-alive</span><br><span class="line">transition</span><br><span class="line">transition-group</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">initUse(Vue)：Vue.use 方法</span><br><span class="line">initMixin(Vue)：Vue.mixin 方法</span><br><span class="line">initExtend(Vue)：Vue.extend 方法</span><br><span class="line">initAssetRegisters(Vue)：Vue.component，Vue.directive，Vue.filter 方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里需要提一下 vue 的架构设计，它的架构是分层式的。最底层是一个 ES5 的构造函数，再上层在原型上会定义一些_init、$watch、_render 等这样的方法，再上层会在构造函数自身定义全局的一些 API，如 set、nextTick、use 等(以上这些是不区分平台的核心代码)，接着是跨平台和服务端渲染(这些暂时不在讨论范围)及编译器。</p><p class='p subtitle'>vue变量命名</p><p>在 vue 的内部，_符号开头定义的变量是供内部私有使用的，而$符号定义的变量是供用户使用的，而且用户自定义的变量不能以_或$开头，以防止内部冲突。</p><p class='p subtitle'>vue2.x 源码目录结构</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/%E6%88%AA%E5%B1%8F2020-10-18%20%E4%B8%8B%E5%8D%883.03.59.png' style='width:300px'><ul><li>flow：javaScript 是弱类型语言，使用 flow 以定义类型和检测类型，增加代码的健壮性。</li><li>src/compiler：将 template 模板编译为 render 函数。</li><li>src/core：与平台无关通用的逻辑，可以运行在任何 javaScript 环境下，如 web、Node.js、weex 嵌入原生应用中。</li><li>src/platforms：针对 web 平台和 weex 平台分别的实现，并提供统一的 API 供调用。</li><li>src/core/observer：vue 检测数据数据变化改变视图的代码实现。</li><li>src/core/vdom：将 render 函数转为 vnode 从而 patch 为真实 dom 以及 diff 算法的代码实现。</li><li>dist：存放着针对不同使用方式的不同的 vue 版本。</li></ul><p class='p subtitle'>vue版本</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/%E6%88%AA%E5%B1%8F2020-10-19%20%E4%B8%8B%E5%8D%885.16.23.png' style='width:300px'><p>vue 使用的是 rollup 构建的，具体怎么构建的不重要，总之会构建出很多不同版本的 vue。vue-cli 默认是使用运行时版本。按照使用方式的不同，可以分为以下三类:</p><ul><li>UMD：通过&lt;script&gt;标签直接在浏览器中使用。</li><li>CommonJS：使用比较旧的打包工具使用，如 webpack1。</li><li>ES Module：配合现代打包工具使用，如 webpack2 及以上,分为直接作用于浏览器和基于构建工具使用。</li></ul><p>其实运行时版与完整版区别在于以下两点:</p><ul><li>最明显的就是大小的区别，带编译器会比不带的版本大。</li><li>编译的时机不同，编译器是运行时编译，性能会有一定的损耗；运行时版本是借助 loader 做的离线编译，运行性能更高。</li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue生命周期</title>
      <link href="2020/10/11/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>2020/10/11/vue/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>beforeCreate创建前</p><p>在初始化事件和生命周期完毕之后,初始化注入和反应之前触发</p><p class='p subtitle'>加载渲染过程</p><p>1.父组件beforeCreate<br>2.父组件created<br>3.父组件beforeMount<br>4.子组件beforeCreate<br>5.子组件created<br>6.子组件beforeMount<br>7.子组件mounted<br>8.父组件mounted</p><p class='p subtitle'>更新过程</p><p>1.父组件beforeUpdate<br>2.子组件beforeUpdate<br>3.子组件updated<br>4.父组件updated</p><p class='p subtitle'>销毁过程</p><p>1.父组件beforeDestroy<br>2.子组件beforeDestroy<br>3.子组件destroyed<br>4.父组件destroyed</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack快速搭建手册</title>
      <link href="2020/09/12/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/"/>
      <url>2020/09/12/webpack/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>工厂模式</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wx小程序屏幕滑动</title>
      <link href="2020/09/12/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8/"/>
      <url>2020/09/12/wx/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%BB%91%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>屏幕滑动</p><p>movable-area:设置可滑动的区域<br>movable-view:必须为movable-area的直接子节点<br>当movable-view小于movable-area时，movable-view的移动范围是在movable-area内；<br>当movable-view大于movable-area时，movable-view的移动范围必须包含movable-area，这句话的意思是movable-view的左边框只能到达movable-area的左边框，右边框也只能到达movable-area的右边框，那么就可以实现左右滑动。<br>左滑动：只要movable-view的宽大于movable-area;<br>右滑动：只要movable-view的宽小于movable-area;</p>]]></content>
      
      
      <categories>
          
          <category> wx小程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wx小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node单线程</title>
      <link href="2020/09/10/node/%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
      <url>2020/09/10/node/%E5%8D%95%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>单线程的优势</p><p>1.不需要像多线程编程一样处处在意状态的同步问题<br>2.没有死锁<br>3.没有线程上下文交换所带来的性能上的开销</p><p class='p subtitle'>单线程的劣势</p><p>1.无法利用多核CPU<br>2.当CPU有大量运算时,会影响异步I/O的执行<br>3.错误会引起整个应用的退出,应用的健壮性值得考验</p>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json包描述文件分析</title>
      <link href="2020/09/07/node/npm/%E5%8C%85%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/"/>
      <url>2020/09/07/node/npm/%E5%8C%85%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>必需字段分析</p><p>-name:包名,必须是唯一的,以免对外公布时产生冲突<br>-description:包简介<br>-version:版本号,通常格式为major.minor.revision<br>-keywords:关键词数组,npm用来做分类搜索<br>-maintainers:包维护者列表,每个维护者由name/email/web三个属性组成,npm根据该属性进行权限认证<br>-contributors:贡献者列表,格式与维护者列表相同<br>-bugs:一个可以反馈bug的网址或者邮箱<br>-licenses:许可证列表,表示这个包可以在哪些许可证下使用<br>-repositories:托管源代码的位置列表<br>-dependencies:当前包所需要依赖的包列表,npm会根据这个属性自动加载依赖包</p><p class='p subtitle'>非必需字段分析</p><p>-script:脚本说明对象,主要被包管理器用来安装/编译/测试/卸载包<br>-homepage:当前包网址地址<br>-os:操作系统支持列表<br>-cpu:cpu架构支持列表<br>-engines:支持的JavaScript引擎列表</p><p class='p subtitle'>devDependencies和dependencies的区别</p><p>通常我们安装模块时,使用<br>npm i <package_name> –save<br>这时的模块将被放在 dependencies 下,而我们使用<br>npm i <package_name> –save –dev<br>这时的模块将被放在 devDependencies 下<br>他们的区别在于作为一个项目时,我们初始化 npm i 下载模块的时候,devDependencies 和 dependencies 下的所有依赖模块将被下载到本地的 node_modules,而在这个项目发布 npm 包时,别人 npm i <package_name>你的这个项目时,只会把 dependencies 下的所有依赖模块下载</p>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm script使用指南</title>
      <link href="2020/09/07/node/npm/npm_script/"/>
      <url>2020/09/07/node/npm/npm_script/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>参考链接</p><div><a class='link-card' title='https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html' href='https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html'><div class='left'><i class='fas fa-link'></i></div><div class='right'><p class='text'>npm script使用指南</p><p class='url'>https://www.ruanyifeng.com/blog/2016/10/npm_scripts.html</p></div></a></div>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http请求</title>
      <link href="2020/08/25/http/http/"/>
      <url>2020/08/25/http/http/</url>
      
        <content type="html"><![CDATA[<p>ping<br>ttl 默认为 64，每次经过经过一个设备 ttl 减一，当 ttl 为 0 时包会被丢弃<br>浏览器访问页面流程<br>解析域名<br>浏览器发送 http 请求<br>服务器处理请求<br>服务器返回 html 响应<br>浏览器处理 html 页面</p><p>一次 http 操作为称为一个事务</p><p>http 请求：get、post、head、put、delete、connect、option</p><p>http 状态码：<br>1xx：指示信息 – 表示请求已经接受，继续处理</p><p>2xx：成功 – 请求已被成功接收</p><p>3xx：重定向 – 要完成请求必须进行更一步操作<br>301：资源被永久移动了<br>302：资源被临时移动了<br>304：本地重定向<br>305：资源直接请求不到，要通过代理<br>307：临时重定向</p><p>4xx：客户端错误 – 请求有语法错误或请求无法实现<br>400：请求语法错误<br>402：请求需要验证<br>403：拒绝执行<br>404：资源没找到，资源根本不存在<br>406：无法完成请求<br>408：请求时间过长<br>409：请求方法和无服务器要求的方法冲突<br>410：资源不存在了，原来有后来没了，维护人员应该设置 301 跳转<br>413：发送的数据太大，服务器拒绝执行<br>422：请求的数据是错误的数据</p><p>5xx：服务器端错误 – 服务器未能实现合法的请求<br>500：服务器奔溃</p><p>http 请求头</p><p>cookies<br>存在于客户端的一小段文本，随客户端点每一个请求发送该 url 下的所有 cookies 到服务器端。既可以在服务端也可以在客户端产生<br>cookie：客户端将服务器设置的 cookie 返回服务器<br>setCookie：服务端向客户端设置 cookie</p><p>seesion<br>存在于服务端，服务端用 seesionid 区分会话，服务器会将 seesionid 通过 setCookie 存在客户端。</p><p>http 缓存机制（浏览器的缓存）<br>缓存会根据请求保存输出内容的副本，如果是同一 url，缓存直接使用副本响应访问请求，而不是向源服务器再次发送请求。</p><p>缓存协商策略（服务器决定策略）<br>Etag：文件的 md5 指纹（哈希值）<br>Last-Modified：文件的时间戳<br>强制缓存：不向服务器发送请求，直接拿缓存资源（资源有时间戳和强制缓存标志 Expires）<br>每次访问后服务端会重新给个新的 md5 指纹或时间戳</p><p>密码学<br>散列是一种数据一旦转化成其他形式将永远无法恢复的加密技术<br>对称加密：加密和解密手段相同，手段泄露后不安全<br>费对称加密：<br>密钥交换算法：</p><p>https:<br>tls 协议包含了握手协议、密钥配置切换协议、应用数据协议和警报协议</p>]]></content>
      
      
      <categories>
          
          <category> http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指针</title>
      <link href="2020/08/24/javascript/this%E6%8C%87%E9%92%88/"/>
      <url>2020/08/24/javascript/this%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>this指针的由来</p><p>由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，this就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><p class='p subtitle'>this指针全局对象调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p>这是的全局环境调用foo函数，那么this指针指向全局对象。<br>需要注意的是全局对象不是顶层对象。在es5中全局对象等于顶层对象，但在es6中他们分离开了。例如下面例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">//undefined，这是this指向全局对象window而x挂载在顶层对象上</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>this指针普通对象调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    f : foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    f : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        foo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.f(); <span class="comment">//obj1</span></span><br><span class="line">obj2.f(); <span class="comment">//window</span></span><br></pre></td></tr></table></figure><p>在对象环境调用时，this指针指向该对象。但是需要注意的是上面的例子obj2.f()的this，因为obj2.f的值并不是指向foo的地址，而是一个匿名函数的地址。</p><p class='p subtitle'>this指针数组环境调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [foo];</span><br><span class="line">arr[<span class="number">0</span>](); <span class="comment">// arr</span></span><br></pre></td></tr></table></figure><p>在函数放置于数值中进行调用时，this指针指向素组本身。</p><p class='p subtitle'>this指针构造函数调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> test();</span><br><span class="line">obj.x <span class="comment">//1</span></span><br><span class="line">x <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>在构造函数中时，this指针指向新对象。</p><p class='p subtitle'>this指针箭头函数调用</p><p>this的值是可以用call方法修改的，而且只有在调用的时候我们才能确定this的值。而当我们使用箭头函数的时候，箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.id);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">id = <span class="number">21</span>;</span><br><span class="line">foo.call(&#123; <span class="attr">id</span>: <span class="number">12</span> &#125;);<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    f : foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    f : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            consolt.log(<span class="built_in">this</span>);</span><br><span class="line">        &#125;)()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.f(); <span class="comment">//window</span></span><br><span class="line">obj2.f(); <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;</span><br><span class="line">    f : foo</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;</span><br><span class="line">    f : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        (<span class="function">()=&gt;</span>&#123;<span class="built_in">console</span>.log(<span class="built_in">this</span>)&#125;)()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj1.f(); <span class="comment">//window</span></span><br><span class="line">obj2.f(); <span class="comment">//obj2</span></span><br></pre></td></tr></table></figure><p>由于箭头函数没有自己的this指针，通过call()或apply()等方法调用一个函数时，只能传递参数，他们的第一个参数会被忽略。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XHR的使用</title>
      <link href="2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/08/23/javascript/XHR%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>xhr基本用法</p><ol><li><p>XMLHttpRequest是原生xhr对象，可使用new操作符生成xhr对象。</p></li><li><p>open方法接受3个参数，发送请求的类型、url和是否异步发送。open方法并未真正发送，只是启动以备发送。</p></li><li><p>send方法接受1个参数，作为请求主体发送的数据，若不需要请求主体发送数据则必须传入null。调用该方法后便会发送请求到服务器，如果请求是同步的，JavaScript代码将等到服务器响应之后再继续执行，收到响应后，响应的数据会自动填入xhr对象属性。</p></li><li><p>xhr对象有个readystatechange事件，可以监听xhr的readyState属性的变化。以下readyState的属性值代表的含义：</p><ul><li>0: 未初始化。</li><li>1: 启动未发送。</li><li>2: 发送。</li><li>3: 接收部分数据。</li><li>4: 完成接收所有数据。</li></ul></li><li><p>abort方法，在接收到响应数据之前调用该方法可以取消异步请求。</p></li></ol><p class='p subtitle'>http头部请求</p><ol><li>setRequestHeader方法接受2个参数，头部字段的名称和值。该方法必须在open方法调用之后、send方法调用之前使用才有效。</li><li>getResponseHeader方法接受1个参数，头部字段名称获取值。</li><li>getAllResponseHeader获取所有头部信息。</li></ol><p class='p subtitle'>表单数据传达</p><p>FormData为序列化表单以及创建与表单格式相同的数据提供了便利。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;user-info&#x27;</span>);</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.send(<span class="keyword">new</span> FormData(form));</span><br></pre></td></tr></table></figure><p class='p subtitle'>超时设定</p><p>xhr有timeout属性和ontimeout事件，当请求时间到达timeout属性时间后请求就会自动终止，终止时触发ontimeout时间。<br>需要注意的是在终止之后访问status属性将导致错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.timeout = <span class="number">1000</span>;</span><br><span class="line">xhr.ontimeout = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;;</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>overrideMimeType</p><p>overrideMimeType方法重写xhr响应的MIME类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest;</span><br><span class="line">xhr.open(...)</span><br><span class="line">xhr.overrideMimeType(<span class="string">&quot;text/xml&quot;</span>)</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><p>进度事件有如下几种：</p><ul><li>onloadstart：接收到响应数据第一个字节触发</li><li>onprogress：在接收响应数据期间不断触发</li><li>onerror：请求发送错误触发</li><li>onabort：调用abort方法触发</li><li>onload：接收到完整响应数据触发</li><li>onloadend：通信完成或者触发error、abort或load事件后触发</li></ul><p>其中onprogress事件会接收一个event对象。</p><ul><li>event.target指向xhr对象</li><li>event.lengthComputable是个布尔值代表进度信息是否可用</li><li>event.position表示已经接收的字节数</li><li>event.totalSize表示根据Content-Length响应头部确定的预期字节数 </li></ul>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> xhr </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>let和const命令</title>
      <link href="2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/"/>
      <url>2020/08/22/javascript/ES6/let%E5%92%8Cconst%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>let</p><p>let类似于var，不同的地方在于var没有代码块作用域，这样会导致var变量提升，而let成功解决了这样的问题。<br>需要特别注意的是在for循环中，for的条件部分是个父作用域，而for的循环体是其中的子作用域。<br>从下面代码可以看出父作用域子作用域中的let声明的i不影响父作用域的let声明的i。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abc</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//abc</span></span><br></pre></td></tr></table></figure><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">&#x27;abc&#x27;</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>let不允许在相同作用域内，重复声明同一个变量。</p><p class='p subtitle'>const</p><p>const声明的变量，一经声明便不允许修改。<br>const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = &#123;&#125;; <span class="comment">// TypeError: &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> es6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS闭包</title>
      <link href="2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/"/>
      <url>2020/08/02/javascript/JS%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>闭包</p><p>闭包时指有权访问另一个函数作用域中的变量的函数。例如下图，createPerson可以访问到createFunc中的变量name。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunc</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">age</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">        person.name = name;</span><br><span class="line">        person.age = age</span><br><span class="line">        <span class="keyword">return</span> person;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> createPerson = createFunc(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="number">18</span>);</span><br><span class="line">alert(person.name)  <span class="comment">//&#x27;zhu&#x27;</span></span><br><span class="line">createPerson = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><img src='https://pigbro.online:9608/images/javascript/javascript_closure.png' style='width:500px'><p>由于闭包会携带包含他的函数作用域，也因此他会比其他函数占用更多的内存，所有不要过度使用闭包。</p><p class='p subtitle'>常见的闭包与变量的陷阱</p><p>由于闭包在执行的时候，他只会取得包含函数中任何变量的最终值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    funcArr[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以在执行funcArr数组中的闭包时，然会的i全为5。这时我们可以通过创建一个匿名函数去立即执行返回一个匿名函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> funcArr = [];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    funcArr[i] = (<span class="function"><span class="keyword">function</span>(<span class="params">num</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>内存泄漏</p><p>在ie9之前对于js和dom对象使用不同的垃圾收集例程。因此如果闭包的作用域中保存着一个html元素，那么该元素将无法销毁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line">elememt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(elememt.id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这时可以采用如下方法解决</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> id = elememt.id;</span><br><span class="line">elememt.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(id);</span><br><span class="line">&#125;</span><br><span class="line">elememt = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="2020/07/22/javascript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/07/22/javascript/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>正则表达式是匹配模式，要么匹配字符，要么匹配位置。</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> RegExp </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS继承</title>
      <link href="2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/"/>
      <url>2020/07/16/javascript/JS%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>原型链</p><p>原型链实现继承的主要方式就是使一个构造函数的原型对象等于另一个构造函数的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> children();</span><br></pre></td></tr></table></figure><img src='https://pigbro.online:9608/images/javascript/javascript_inherit.png' style='width:300px'><p>但是使用原型链实现继承存在两个问题，一个是在 js 创建对象中提到的原型对象的引用类型属性共享的问题，另一个是在创建子类型的实例时，无法向超类型的构造函数中传递参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children();</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3,4]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>借用构造函数</p><p>借用构造函数实现的继承成功解决了上述原型链实现继承存在的两个问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">father.call(<span class="built_in">this</span>,name);</span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father();</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children(<span class="string">&#x27;duan&#x27;</span>);</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">alert(person1.name); <span class="comment">//&#x27;zhu&#x27;</span></span><br><span class="line">alert(person2.name); <span class="comment">//&#x27;duan&#x27;</span></span><br><span class="line">alert(person1.friend); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><p>但是仅仅使用借用构造函数，那么也将无法避免构造函数模式存在的定义方法复用的问题，在 js 创建对象中有提及。</p><p class='p subtitle'>组合继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line">father.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">father.call(<span class="built_in">this</span>,name);</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">children.prototype = <span class="keyword">new</span> father(<span class="string">&#x27;zhu&#x27;</span>);</span><br><span class="line">children.prototype.constructor = children;</span><br><span class="line">children.prototype.sayage = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> children(<span class="string">&#x27;duan&#x27;</span>,<span class="number">19</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> children(<span class="string">&#x27;lei&#x27;</span>,<span class="number">18</span>);</span><br><span class="line">person1.friend.push(<span class="number">4</span>);</span><br><span class="line">person1.sayname(); <span class="comment">//&#x27;duan&#x27;</span></span><br><span class="line">person2.sayname(); <span class="comment">//&#x27;lei&#x27;</span></span><br><span class="line">person1.sayage(); <span class="comment">//19</span></span><br><span class="line">person2.sayage(); <span class="comment">//18</span></span><br><span class="line">alert(person1.friend); <span class="comment">//[1,2,3,4]</span></span><br><span class="line">alert(person2.friend); <span class="comment">//[1,2,3]</span></span><br></pre></td></tr></table></figure><div class="gallery ">              <p><img src="https://pigbro.online:9608/images/javascript/javascript_inherit2.png" alt=""><br><img src="https://pigbro.online:9608/images/javascript/javascript_inherit1.png" alt=""></p>            </div><p>组合继承避免了原型链呵借用构造函数的问题，成为最常用的继承模式。</p><p class='p subtitle'>原型式继承</p><p>借助原型可以基于已有对象创建新对象。在只想让一个对象与另一个对象类似的情况下这种模式可以胜任，因为它还是存在共享引用类型属性问题。<br>es5 通过新增 Object.create()方法规范化了原型式继承。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name : <span class="string">&#x27;zhu&#x27;</span>,</span><br><span class="line">friend : [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="built_in">Object</span>.create(person,&#123;</span><br><span class="line">age : &#123;</span><br><span class="line">value : <span class="number">18</span>,</span><br><span class="line">writable : <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">sex : &#123;</span><br><span class="line">value : <span class="string">&#x27;man&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生式继承</p><p>创建一个用于封装继承过程的函数，在函数内部增强对象。在主要考虑对象而不是自定义类型和构造函数的情况下，这个模式也是有用的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">object</span>(<span class="params">o</span>)</span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">F.prototype = o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">name : <span class="string">&#x27;zhu&#x27;</span>,</span><br><span class="line">friend : [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createAnother</span>(<span class="params">another</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> clone = object(another);</span><br><span class="line">clone.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> anotherPerson = createAnother(person);</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生组合式继承</p><p>回过头看组合式继承的代码，一次在 new father()时在 children.prototype 上创建了 father 的属性，另一次在 children 函数内部 father.call 时在实例上创建了 father 的属性。<br>寄生组合式继承相比组合式继承，解决了实例属性在原型链上重复的问题。寄生式组合继承通过借构造函数来继承属性，通过原型链的混成形式来继承方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inheritPrototype</span>(<span class="params">father,children</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> prototype = <span class="built_in">Object</span>.crearte(father.prototype); <span class="comment">//必须要创建对象</span></span><br><span class="line">prototype.constructor = children; <span class="comment">//增强对象</span></span><br><span class="line">children.prototype = prototype; <span class="comment">//指定对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">father</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line"><span class="built_in">this</span>.friend = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">children</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">father.call(<span class="built_in">this</span>,name);</span><br><span class="line"><span class="built_in">this</span>.age = <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">inheritPrototype(father,children);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS创建对象</title>
      <link href="2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/07/14/javascript/JS%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>工厂模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    person.name = name;</span><br><span class="line">    person.age = age;</span><br><span class="line">    person.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = createPerson(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p class='p subtitle'>构造函数模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>使用new操作符创建新实例必须经历4个阶段:<br> 1.创建一个新的空对象对象 – obj = {}<br> 2.将构造函数的作用域赋给新对象（因此this就指向了该对象）– obj.<strong>proto</strong> = Person.prototype<br> 3.执行构造函数中的代码（为新对象obj添加属性）<br> 4.判断fn返回值类型(无返回值默认return this)，如果是值类型，返回obj；如果是引用类型，则返回该引用类型的对象。<br>构造函数的问题：<br>对于sayname的函数相当于new Function(‘alert(this.name)’),这就造成不同实例的同名函数不相等，为了解决这个问题可以将函数定义移到构造函数外部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.sayname = sayname；</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayname</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样做多个对象共享了全局作用域中同一个函数，但是如果函数增多，那么在全局作用域中定义的函数也增多，那么封装的意义何在？好在这些问题在原型模式中解决。</p><p class='p subtitle'>原型模式</p><p>原型模式成功封装并共享同一函数，但是在原型对象对于包含引用类型的数据时，不同实例不会像基本值类型那样在实例上添加同名属性，而是共用同一引用类型数据，这也就是原型模式最大的问题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    name : &#x27;zhu&#x27;,</span><br><span class="line">    age : 18,</span><br><span class="line">    friend : [&#x27;fan&#x27;,&#x27;hou&#x27;],</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friend.push(<span class="string">&#x27;hang&#x27;</span>);</span><br><span class="line">alert(person2.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>组合使用原型模式和构造函数模式</p><p>这种混合模式是es5中使用最广泛、认同度最高的一种创建自定义类型的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age ;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="string">&#x27;fan&#x27;</span>,<span class="string">&#x27;hou&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person,</span><br><span class="line">    sayName : function()&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</span><br><span class="line">person1.friend.push(<span class="string">&#x27;hang&#x27;</span>);</span><br><span class="line">alert(person1.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;,&#x27;hang&#x27;]</span></span><br><span class="line">alert(person2.friend)   <span class="comment">//[&#x27;fan&#x27;,&#x27;hou&#x27;]</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>动态原型模式</p><p>对于混合模式，在有OO语言开发经验的开发人员来说可能会很困惑，那么动态原型模式，将所有信息都封装在了构造函数中，对原型对象的初始化只会在第一次执行时产生。<br>这里特别强调，在对原型对象初始化时不可使用对象字面量重写原型，因为已经产生了实例，这样会断开实例与原型对象的联系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">    <span class="built_in">this</span>.friend = [<span class="string">&#x27;fan&#x27;</span>,<span class="string">&#x27;hou&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="built_in">this</span>.sayname != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">        Person.prototype.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;alert(<span class="built_in">this</span>.name)&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p class='p subtitle'>寄生构造函数模式</p><p>如果前面提到几种模式都不适用，那么可以适用寄生构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>;</span><br><span class="line">    person.name = name;</span><br><span class="line">    person.age = age;</span><br><span class="line">    person.sayname = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;zhu&#x27;</span>,<span class="number">19</span>);</span><br></pre></td></tr></table></figure><p>这里特别说明下，在构造函数不返回值的情况下，会默认返回新对象实例。在末尾加上return可以重写返回值。但是这里返回的对象与构造函数或者构造函数的原型对象没有任何关系，所以叫做寄生。</p><p class='p subtitle'>稳妥构造函数模式</p><p>稳妥对象，没有公共属性，而且方法也不引用this。稳妥构造函数与寄生构造函数最大不同在于，稳妥构造函数模式实例方法不引用this，而且不是用new来调用构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    <span class="comment">// private members</span></span><br><span class="line">    <span class="keyword">var</span> nameUC = name.toUpperCase();</span><br><span class="line">    <span class="comment">// public members</span></span><br><span class="line">    person.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(name);</span><br><span class="line">    &#125;;</span><br><span class="line">    person.sayNameUC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(nameUC);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = Person(<span class="string">&quot;zhu&quot;</span>, <span class="number">18</span>);</span><br><span class="line">person.sayName(); <span class="comment">// &quot;zhu&quot;</span></span><br><span class="line">person.sayNameUC(); <span class="comment">// &quot;ZHU&quot;</span></span><br><span class="line">alert(person.name);  <span class="comment">// undefined</span></span><br><span class="line">alert(person.nameUC);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p class='p subtitle'>new操作符发生了什么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;zhu&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person;</span><br><span class="line"><span class="number">1.</span><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="number">2.</span>obj.__proto__ = Person.prototype</span><br><span class="line"><span class="number">3.</span>Person.call(obj)</span><br><span class="line"><span class="number">4.</span><span class="keyword">return</span> obj</span><br></pre></td></tr></table></figure><p>在JavaScript构造函数中：如果return值类型，那么对构造函数没有影响，实例化对象返回空对象；如果return引用类型（数组，函数，对象），那么实例化对象就会返回该引用类型；</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉树</title>
      <link href="2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2020/07/13/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>树</p><p>再说二叉树之前，我们先了解下什么是树？<br>树（tree）是n（n≥0）个节点的有限集。当n=0时，称为空树。在任意一个非空树中，有如下特点。</p><ol><li>有且仅有一个特定的称为根的节点。  </li><li>当n&gt;1时，其余节点可分为m（m&gt;0）个互不相交的有限集，每一个集合本身又是一个树，并称为根的子树。  </li></ol><p class='p subtitle'>二叉树</p><p>二叉树（binary tree）是树的一种特殊形式。二叉，顾名思义，这种树的每个节点最多有2个孩子节点。注意，这里是最多有2个，也可能只有1个，或者没有孩子节点。<br>此外，二叉树还有两种特殊形式，一个叫作满二叉树，另一个叫作完全二叉树。</p><p class='p subtitle'>满二叉树</p><p>一个二叉树的所有非叶子节点都存在左右孩子，并且所有叶子节点都在同一层级上，那么这个树就是满二叉树。</p><p class='p subtitle'>完全二叉树</p><p>对一个有n个节点的二叉树，按层级顺序编号，则所有节点的编号为从1到n。如果这个树所有节点和同样深度的满二叉树的编号为从1到n的节点位置相同，则这个二叉树为完全二叉树。</p><p class='p subtitle'>二叉树的应用</p><p>二叉树包含许多特殊的形式，每一种形式都有自己的作用，但是其最主要的应用还在于进行查找操作和维持相对顺序这两个方面。</p><p> 1.查找<br>二叉查找树（binary search tree）,一种特殊的二叉树。二叉查找树在二叉树的基础上增加了以下几个条件。</p><ul><li>如果左子树不为空，则左子树上所有节点的值均小于根节点的值。</li><li>如果右子树不为空，则右子树上所有节点的值均大于根节点的值。</li><li>左、右子树也都是二叉查找树。</li></ul><p>对于一个节点分布相对均衡的二叉查找树来说，如果节点总数是n，那么搜索节点的时间复杂度就是O(logn)，和树的深度是一样的。 这种依靠比较大小来逐步查找的方式，和二分查找算法非常相似。</p><p> 2.维持相对顺序<br>这一点仍然要从二叉查找树说起。二叉查找树要求左子树小于父节点，右子树大于父节点，正是这样保证了二叉树的有序性。因此二叉查找树还有另一个名字 —— 二叉排序树（binary sort tree）。<br>对于持续的插入操作，二叉排序树偌没有自平衡则会发生左右失衡的现象,解决这个现象的方法有多种，如红黑树、AVL树、树堆等</p><img src='https://pigbro.online:9608/images/algorithm/binarytree.png' style='width:500px'><p class='p subtitle'>二叉树遍历</p><p>二叉树的遍历分为两大类，深度优先遍历和广度优先遍历。</p><ul><li><p>深度优先遍历</p><p>  1.前序遍历<br>  二叉树的前序遍历，输出顺序是根节点、左子树、右子树。<br>  2.中序遍历<br>  二叉树的中序遍历，输出顺序是左子树、根节点、右子树。<br>  3.后序遍历<br>  二叉树的后序遍历，输出顺序是左子树、右子树、根节点。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">        </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>广度优先遍历<br>  1.层序遍历</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 二叉树 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>散列表（哈希表）</title>
      <link href="2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/"/>
      <url>2020/07/11/algorithm/%E6%95%A3%E5%88%97%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>什么是散列表</p><p>在职场中，我们每个人在公司内部都有一个唯一的工号工号，这就如同散列表的key值。而工号对应着你的个人信息，就如同散列表中key对应的数据value。<br>散列表本质由数组构成，通过哈希函数将key转换成数组的下标index，数组的下标index对应到相应的数据value。</p><p class='p subtitle'>哈希函数</p><p>每种编程语言实现哈希函数的算法都有不同，这里以Java的常用集合 HashMap为例，来看一看哈希函数在Java中的实现。 在Java及大多数面向对象的语言中，每一个对象都有属于自己的hashcode，这个hashcode是区分不同对象的重要标识。无论对象自身的类型是什么，它们的hashcode都是一个整型变量。 既然都是整型变量，想要转化成数组的下标也就不难实现了。最简单的转化方式是什么呢？是按照数组长度进行取模运算。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index &#x3D; HashCode (Key) % Array.length  </span><br></pre></td></tr></table></figure><p>实际上，JDK（Java Development Kit，Java语言的软件开发工具包）中的哈希函数并没有直接采用取模运算，而是利用了位运算的方式来优化性能。不过在这里可以姑且简单理解成取模操作。 通过哈希函数，我们可以把字符串或其他类型的Key，转化成数组的下标index。</p><img src='https://pigbro.online:9608/images/algorithm/hashtable.png' style='width:500px'><p class='p subtitle'>哈希冲突</p><p>由于数组长度有限，当key值通过哈希函数转换成index时，就会可能会出现不同的key值转换成相同的index，这种情况就称为哈希冲突。<br>解决哈希冲突有开放寻址法、拉链法和再哈希法等等。<br>这里主要介绍开放寻址法和拉链法。</p><div class="note quote">            <p class='p subtitle'>开放寻址法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p><strong>数据插入</strong><br>开放寻址法的原理很简单，当一个Key通过哈希函数获得对应的数组下标已被占 用时，我们可以“另谋高就”，寻找下一个空档位置。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_addressing.png' style='width:500px'><br><strong>数据查询</strong><br>散列表查询根据key通过哈希函数得到index后对比数据是否相同，如果不同则遍历数组中的数据,如果找到一个空闲的空间则说明该数组中并无该数据。<br>因为在插入数据的时候，遇到相同index的key值后便会遍历数组找到空闲空间进行插入，倘若在查询遍历时找到空闲空间，则表示数组中并没有插入对应key值的value数据。<br><strong>数据删除</strong><br>因为在数据查询的过程中，我们把遍历数组时遇到空闲的空间的情况认定为在数组中无此数据。所以在删除时，不能单单只是地把对应的数据设置为空，因为这操作可能是在插入之后，这将影响到查询。<br>遇到这种情况，通常可以将删除数据设置为空，并从删除位置开始遍历数据组将不为空的数据重新通过哈希函数插入，这将避免直接设置为空给查询带来影响。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_addressing2.png' style='width:500px'><br>另一种方法是标记法，可以将要删除的数据打上删除标记，之后查询的时遇到该标记就跳过，而插入时遇到该标记便可看为空闲的空间插入。<br><strong>装载因子</strong><br>你会发现当散列表插入的数据越来越多时，发生哈希冲突的可能将会上升，同时线性探测数据的方法的时间也会增加。极端状况下将探测整个数组，时间复杂度为O(n)。<br>为了尽可能保证散列表的操作效率，一般情况下，我们会尽可能保证散列表中有一定比例的空闲槽位。我们用装载因子(load factor)来表示空位的多少。</p><p class='p center'>散列表的装载因子=填入表中的元素个数/散列表的长度</p>散列表的装载因子越大，空闲的空间越少，哈希冲突发生概率越高。              </div>            </details><p class='p subtitle'>拉链法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p><strong>数据插入</strong><br>拉链法又称链表法，每一个元素不仅是一个Entry对象，还是一个链表的头节点。每一个Entry对象通过next指针指向它的下一个Entry节点。当新来的Entry映射到与之冲突的数组位置时，只需要插入到对应的链表中即可。<br><img src='https://pigbro.online:9608/images/algorithm/hashtable_linkedlist.png' style='width:500px'><br><strong>数据查询</strong><br>数据查询时根据哈希函数得到index，根据链表的头结点，遍历链表找到对应key值的数据。<br><strong>数据删除</strong><br>数据删除时首先跟查询操作相同找到数据，然后做链表删除操作即可。</p>              </div>            </details>          </div><p class='p subtitle'>javasrcipt实现散列表(使用拉链法简单实现)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">entry</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(key,value)&#123;</span><br><span class="line">        <span class="built_in">this</span>.data = &#123;</span><br><span class="line">            key : key,</span><br><span class="line">            value : value,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">linkedList</span></span>&#123;</span><br><span class="line">    last = <span class="literal">null</span>;</span><br><span class="line">    size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">constructor</span>()&#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="keyword">new</span> entry();</span><br><span class="line">    &#125;</span><br><span class="line">    insert(entry)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.head.next == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head.next = entry;</span><br><span class="line">            <span class="built_in">this</span>.last = entry;</span><br><span class="line">            <span class="built_in">this</span>.size++;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.last.next = entry;</span><br><span class="line">            <span class="built_in">this</span>.last = entry;</span><br><span class="line">            <span class="built_in">this</span>.size++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span>(key)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                <span class="keyword">if</span>(entry.next.next)&#123;</span><br><span class="line">                    entry.next = entry.next.next;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    entry.next = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.last.data.key == key)&#123;</span><br><span class="line">                    <span class="built_in">this</span>.last = entry;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">this</span>.size--;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;fail&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    find(key)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                <span class="keyword">return</span> entry.next.data.value;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    update(key,value)&#123;</span><br><span class="line">        <span class="keyword">var</span> entry = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">while</span>(entry.next)&#123;</span><br><span class="line">            <span class="keyword">if</span>(entry.next.data.key == key)&#123;</span><br><span class="line">                entry.next.data.value = value;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;success&#x27;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                entry = entry.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;not found&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hashTable</span></span>&#123;</span><br><span class="line">    #size = 10;</span><br><span class="line">    <span class="keyword">constructor</span>(size)&#123;</span><br><span class="line">        <span class="built_in">this</span>.tableArr = [];</span><br><span class="line">        <span class="keyword">if</span>(size)&#123;</span><br><span class="line">            this.#size = size;</span><br><span class="line">        &#125;</span><br><span class="line">        for(let i = 0; i &lt; this.#size ; i++)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[i] = <span class="keyword">new</span> linkedList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    hashFunc(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> hash = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; key.length; ++i)&#123;</span><br><span class="line">            hash += key.charCodeAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">        return hash % this.#size;</span><br><span class="line">    &#125;</span><br><span class="line">    set(key,value)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.get(key) == <span class="literal">undefined</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[index].insert(<span class="keyword">new</span> entry(key,value));</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.tableArr[index].update(key,value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    get(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.tableArr[index].find(key);</span><br><span class="line">    &#125;</span><br><span class="line">    remove(key)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="built_in">this</span>.hashFunc(key);</span><br><span class="line">        <span class="built_in">this</span>.tableArr[index].delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> hashTable();</span><br><span class="line">map.set(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">map.set(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">map.set(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">map.set(<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">map.set(<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">map.set(<span class="number">6</span>,<span class="number">6</span>);</span><br><span class="line">map.set(<span class="number">7</span>,<span class="number">7</span>);</span><br><span class="line">map.set(<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">map.set(<span class="number">9</span>,<span class="number">9</span>);</span><br><span class="line">map.set(<span class="number">10</span>,<span class="number">10</span>);</span><br><span class="line">map.set(<span class="number">11</span>,<span class="number">11</span>);</span><br><span class="line">map.set(<span class="number">12</span>,<span class="number">12</span>);</span><br><span class="line">map.set(<span class="number">13</span>,<span class="number">13</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">12</span>));</span><br><span class="line">map.remove(<span class="number">12</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">12</span>));</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">6</span>));</span><br><span class="line">map.set(<span class="number">6</span>,<span class="number">-6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">6</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 散列表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 散列表 </tag>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基本概念</title>
      <link href="2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2020/07/06/algorithm/%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>算法</p><p>在数学领域里，算法是用于解决某一类 问题的公式和思想。<br>计算机科学领域的算法，它的本质是一系列程序指令，用于解决特定的运算和逻辑问题。</p><p class='p subtitle'>数据结构</p><p>数据结构是数据的组织、管理和存储格式， 其使用目的是为了高效地访问和修改数据。<br>数据结构包含数组、链表这样的线性数据结构，也包含树、图这样的复杂数据结构。</p><p class='p subtitle'>时间复杂度</p><p>如何推导出时间复杂度呢？有如下几个原则。  </p><ul><li>如果运行时间是常数量级，则用常数1表示</li><li>只保留时间函数中的最高阶项  </li><li>如果最高阶项存在，则省去最高阶项前面的系数</li></ul><p>常见的四种时间复杂度执行时间排序：<br>O(1)&lt;O(logn)&lt;O(n)&lt;O(n2)<br>在编程的世界中有各种各样的算法，除了上述4个场景，还有许多不同形式的时 间复杂度，例如：O(nlogn)、O(n3)、O(mn)、O(2n)、O(n!)</p><p class='p subtitle'>空间复杂度</p><p>在运行一段程序时，我们不仅要执行各种运算指令，同时也会根据需要，存储一些临时的中间数据，以便后续指令可以更方便地继续执行。<br>这些临时的中间数据在运行过程中所占用的内存空间自然是越小越好，那么空间复杂度便是评判其占用大小的标准。<br>常见的空间复杂度有下面几种情形。</p><ol><li>常量空间<br>当算法的存储空间大小固定，和输入规模没有直接的关系时，空间复杂度记作O(1)。</li><li>线性空间<br>当算法分配的空间是一个线性的集合（如数组），并且集合大小和输入规模n成正比时，空间复杂度记作O(n)。</li><li>二维空间<br>当算法分配的空间是一个二维数组集合，并且集合的长度和宽度都与输入规模n成正比时，空间复杂度记作O(n2)。</li><li>递归空间<br>递归是一个比较特殊的场景。虽然递归代码中并没有显式地声明变量或集合，但是计算机在执行程序时，会专门分配一块内存，用来存储“方法调用栈”。纯粹的递归操作的空间复杂度也是线性的，如果递归的深度是n，那么空间复杂度就是O(n)。</li></ol><p class='p subtitle'>时间与空间的取舍</p><p>在绝大多数时候，时间复杂度更为重要一些，我们宁可多分配一些内存空间， 也要提升程序的执行速度。</p><p class='p subtitle'>最大公约数</p><p>如果数a能被数b整除，a就叫做b的倍数，b就叫做a的约数。<br>最大公因数，也称最大公约数、最大公因子，指两个或多个整数共有约数中最大的一个。a，b的最大公约数记为（a，b), 同样的，a，b，c的最大公约数记为（a，b，c），多个整数的最大公约数也有同样的记号。<br>可以在区块中放置一些复杂的结构，支持嵌套。<br>求法：</p><div class="note quote">            <p class='p subtitle'>质因数分解法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>把每个数分别分解质因数，再把各数中的全部公有质因数提取出来连乘，所得的积就是这几个数的最大公约数。<br>例如：求24和60的最大公约数，先分解质因数，得24=2×2×2×3，60=2×2×3×5，24与60的全部公有的质因数是2、2、3，它们的积是2×2×3=12，所以，（24，60）=12。</p>              </div>            </details><p class='p subtitle'>短除法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>短除法求最大公约数，先用这几个数的公约数连续去除，一直除到所有的商互质为止，然后把所有的除数连乘起来，所得的积就是这几个数的最大公约数。</p>              </div>            </details><p class='p subtitle'>辗转相除法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>辗转相除法是求两个自然数的最大公约数的一种方法，也叫欧几里德算法。<br>例如，求（319，377）：<br>∵ 319÷377=0（余319）<br>∴（319，377）=（377，319）；<br>∵ 377÷319=1（余58）<br>∴（377，319）=（319，58）；<br>∵ 319÷58=5（余29）<br>∴ （319，58）=（58，29）；<br>∵ 58÷29=2（余0）<br>∴ （58，29）= 29；<br>∴ （319，377）=29。<br>可以写成右边的格式。<br>用辗转相除法求几个数的最大公约数，可以先求出其中任意两个数的最大公约数，再求这个最大公约数与第三个数的最大公约数，依次求下去，直到最后一个数为止。最后所得的那个最大公约数，就是所有这些数的最大公约数。</p>              </div>            </details><p class='p subtitle'>更相减损法</p><details ><summary> <p>点击查看更多</p> </summary>              <div class='content'>              <p>更相减损法：也叫更相减损术，是出自《九章算术》的一种求最大公约数的算法，它原本是为约分而设计的，但它适用于任何需要求最大公约数的场合。<br>第一步：任意给定两个正整数；判断它们是否都是偶数。若是，则用2约简；若不是则执行第二步。<br>第二步：以较大的数减较小的数，接着把所得的差与较小的数比较，并以大数减小数。继续这个操作，直到所得的减数和差相等为止。<br>则第一步中约掉的若干个2与第二步中等数的乘积就是所求的最大公约数。<br>其中所说的“等数”，就是最大公约数。求“等数”的办法是“更相减损”法。所以更相减损法也叫等值算法。<br>例1．用更相减损术求98与63的最大公约数。<br>解：由于63不是偶数，把98和63以大数减小数，并辗转相减：<br>98-63=35<br>63-35=28<br>35-28=7<br>28-7=21<br>21-7=14<br>14-7=7<br>所以，98和63的最大公约数等于7。<br>这个过程可以简单的写为：<br>（98，63）=（35，63）=（35，28）=（7，28）=（7，21）=（7，14）=（7，7）=7.<br>例2．用更相减损术求260和104的最大公约数。<br>解：由于260和104均为偶数，首先用2约简得到130和52，再用2约简得到65和26。<br>此时65是奇数而26不是奇数，故把65和26辗转相减：<br>65-26=39<br>39-26=13<br>26-13=13<br>所以，260与104的最大公约数等于13乘以第一步中约掉的两个2，即13<em>2</em>2=52。<br>这个过程可以简单地写为：<br>（260,104）(/2/2) =&gt;（65,26）=（39,26）=（13,26）=（13,13）=13. (<em>2</em>2) =&gt; 52</p>              </div>            </details><p class='p subtitle'>比较辗转相除法与更相减损术的区别</p><ol><li><p>都是求最大公因数的方法，计算上辗转相除法以除法为主，更相减损术以减法为主，计算次数上辗转相除法计算次数相对较少，特别当两个数字大小区别较大时计算次数的区别较明显。</p></li><li><p>从结果体现形式来看，辗转相除法体现结果是以相除余数为0则得到，而更相减损术则以减数与差相等而得到。</p></li></ol>          </div><p class='p subtitle'>物理结构与逻辑结构</p><p>常用的数据结构有很多，但大多数以数组和链表作为主要的存储方式，数组和链表可以看做数据结构的”物理结构”。</p><img src='https://pigbro.online:9608/images/algorithm/datastructure.png' style='width:500px'>  <p class='p subtitle'>排列组合</p><p>回顾一下高中的知识,什么是排列组合？<br>现在有一个袋子中有4个标记了不同数字的小球[0,1,2,3]，要求从袋子中不放回的取出三个。<br>对于排列而言，顾名思义要有顺序性，也就是说小球的顺序是包含在内的，例如[0,1,2]和[1,2,0]是不同的两种可能。那么如果有n个小球，要从中取出k个，有公式如下：<br>$$<br>\begin{equation}<br>{A}_n^k = \frac{n!}{(n-k)!}<br>\end{equation}<br>$$<br>对于组合而言，顺序是不重要的，例如[0,1,2]和[1,2,0]是一种可能，所以在计算可能性时，要除去自身重复。那么如果有n个小球，要从中取出k个，有公式如下：<br>$$<br>\begin{equation}<br>{C}_n^k = \frac{n!}{k!*(n-k)!}<br>\end{equation}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
          <category> 基本概念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的函数式编程</title>
      <link href="2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/"/>
      <url>2020/06/11/javascript/JS%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>函数式编程特点：</p><ol><li>函数是”第一等公民”  (与变量的)</li><li>只用”表达式”，不用”语句”  </li><li>没有”副作用”  </li><li>不修改状态  </li><li>引用透明（函数运行只靠参数）</li></ol><p>函数curry<br>多参数函数转化成一个嵌套的一元函数<br>好处：一种函数的预加载的方法,相当于-缓存，保存作用域链<br>闭包必定会有内存泄漏</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 函数式编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的作用域</title>
      <link href="2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2020/06/10/javascript/JS%E7%9A%84%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>作用域</p><p>其实作用域就是一套用来存储变量以及快速查找变量的一套的规则。分为全局、函数、块级作用域这三种。<br>块级作用域可通过新增命令let和const声明，所声明的变量在指定块的作用域外无法被访问。块级作用域在如下情况被创建：</p><ol><li>在一个函数内部</li><li>在一个代码块（由一对花括号包裹）内部</li></ol><p>作用域是分层的，内层作用域可以访问外层作用域的变量，反之则不行。</p><img src='https://zhuduanlei-1256381138.cos.ap-guangzhou.myqcloud.com/uPic/169590b8c66f551b.jpg' style='width:300px'><p class='p subtitle'>词法作用域</p><p class='p subtitle'>关于自由变量的取值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="number">20</span></span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    f() <span class="comment">//10，而不是20</span></span><br><span class="line">  &#125;)()</span><br><span class="line">&#125;</span><br><span class="line">show(fn)</span><br></pre></td></tr></table></figure><p>在fn函数中，取自由变量x的值时，要到哪个作用域中取？——要到创建fn函数的那个作用域中取，无论fn函数将在哪里调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a + b) <span class="comment">//30</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bar</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = fn(),</span><br><span class="line">  b = <span class="number">200</span></span><br><span class="line">x() <span class="comment">//bar()</span></span><br></pre></td></tr></table></figure><p>fn()返回的是bar函数，赋值给x。执行x()，即执行bar函数代码。取b的值时，直接在fn作用域取出。取a的值时，试图在fn作用域取，但是取不到，只能转向创建fn的那个作用域中去查找，结果找到了,所以最后的结果是30</p>]]></content>
      
      
      <categories>
          
          <category> javascript </category>
          
          <category> 作用域 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html5陀螺仪</title>
      <link href="2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/"/>
      <url>2020/06/10/html5%E9%99%80%E8%9E%BA%E4%BB%AA/</url>
      
        <content type="html"><![CDATA[<p>deviceorientation : 设备的物理方向，表示为一系列的本地坐标系旋角。<br>devicemotion : 提供设备的重力加速信息。<br>compassneedscalibration : 罗盘校准。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html5陀螺仪<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;http://at.alicdn.com/t/font_1872916_9bxpvrr3gw.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span>摇一摇有惊喜！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span> = <span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://pigbro.online:9608/images/surprise/1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;surprise&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//获取手机屏幕宽度</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> deviceWidth = <span class="built_in">document</span>.documentElement.clientWidth;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> speed = <span class="number">30</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> picture = <span class="number">1</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> x=y=z=lastx=lasty=lastz=<span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).width(deviceWidth*<span class="number">0.9</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> flag = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">window</span>.DeviceOrientationEvent) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;deviceorientation&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> x = event.beta;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> y = event.gamma;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> z = event.alpha;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>((<span class="built_in">Math</span>.abs(x-lastx)&gt;speed || <span class="built_in">Math</span>.abs(y-lasty)&gt;speed || <span class="built_in">Math</span>.abs(z-lastz)&gt;speed) &amp;&amp; flag)&#123;</span></span><br><span class="line">                    if(++picture &gt; 7)&#123;</span><br><span class="line">                        picture = 1;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="javascript">                    $(<span class="string">&#x27;img&#x27;</span>).attr(<span class="string">&#x27;src&#x27;</span>,<span class="string">&#x27;https://pigbro.online:9608/images/surprise/&#x27;</span>+picture+<span class="string">&#x27;.jpg&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    flag = <span class="literal">false</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line">                lastx = x;</span><br><span class="line">                lasty = y;</span><br><span class="line">                lastz = z;</span><br><span class="line">            &#125;);</span><br><span class="line">            wi</span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;img&#x27;</span>).on(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                flag = <span class="literal">true</span>;</span></span><br><span class="line">            &#125;,1000);</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> html </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> html </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm切换镜像源</title>
      <link href="2020/06/07/npm/"/>
      <url>2020/06/07/npm/</url>
      
        <content type="html"><![CDATA[<p class='p subtitle'>手动切换npm源</p><ul><li>切换为淘宝镜像<br>npm install cnpm 1.临时使用<pre><code>npm --registry https:&#x2F;&#x2F;registry.npm.taobao.org install express;</code></pre> 2.持久使用<pre><code>npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre> 3.通过 cnpm<pre><code>npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</code></pre></li><li>切换官方镜像<pre><code>npm config set registry https:&#x2F;&#x2F;registry.npmjs.org&#x2F;</code></pre></li><li>查看当前 npm 源地址<pre><code>npm config get registry</code></pre></li></ul><p class='p subtitle'>nrm切换npm源</p><p>通过 nrm 设置 npm 源<br>npm install -g nrm<br>nrm ls<br>nrm use <registry></p><p class='p subtitle'>npm设置代理</p><p>npm 代理:<br>npm config set proxy <a href="http://127.0.0.1:1087">http://127.0.0.1:1087</a><br>npm config set https-proxy <a href="http://127.0.0.1:1087">http://127.0.0.1:1087</a><br>npm config set proxy socks5://127.0.0.1:1080<br>npm config set https-proxy socks5://127.0.0.1:1080</p><p>取消代理:<br>npm config delete proxy<br>npm config delete https-proxy</p>]]></content>
      
      
      <categories>
          
          <category> nodeJs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
